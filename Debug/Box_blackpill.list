
Box_blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006808  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a00  08006a00  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a08  08006a08  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08006a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  20000168  08006b78  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  08006b78  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e19  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd4  00000000  00000000  00034fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00038cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001868a  00000000  00000000  00039910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011094  00000000  00000000  00051f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089921  00000000  00000000  0006302e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec94f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b4  00000000  00000000  000ec9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000168 	.word	0x20000168
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006988 	.word	0x08006988

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000016c 	.word	0x2000016c
 80001d4:	08006988 	.word	0x08006988

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ReceiveCommand>:
 */

#include "COMMS.h"

void ReceiveCommand()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  uint8_t command = ReceiveByte();
 80004d6:	f000 f8fb 	bl	80006d0 <ReceiveByte>
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]

  switch (command)
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b41      	cmp	r3, #65	; 0x41
 80004e2:	d011      	beq.n	8000508 <ReceiveCommand+0x38>
 80004e4:	2b41      	cmp	r3, #65	; 0x41
 80004e6:	dc14      	bgt.n	8000512 <ReceiveCommand+0x42>
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d008      	beq.n	80004fe <ReceiveCommand+0x2e>
 80004ec:	2b40      	cmp	r3, #64	; 0x40
 80004ee:	d110      	bne.n	8000512 <ReceiveCommand+0x42>
  {
    case 0x40:
      ReceiveByte();                      // get second command out of the way
 80004f0:	f000 f8ee 	bl	80006d0 <ReceiveByte>
      ReceiveRumbleByte(); // get last 2 bits of 3rd command to check for rumble
 80004f4:	f000 f92d 	bl	8000752 <ReceiveRumbleByte>
      SendInputs();
 80004f8:	f000 f84c 	bl	8000594 <SendInputs>
      break;
 80004fc:	e009      	b.n	8000512 <ReceiveCommand+0x42>

    case 0x00:
      FlushReceiveBuffer();
 80004fe:	f000 f9bf 	bl	8000880 <FlushReceiveBuffer>
      SendPollResponse();
 8000502:	f000 f80c 	bl	800051e <SendPollResponse>
      break;
 8000506:	e004      	b.n	8000512 <ReceiveCommand+0x42>

    case 0x41:
      FlushReceiveBuffer();
 8000508:	f000 f9ba 	bl	8000880 <FlushReceiveBuffer>
      SendOrigin();
 800050c:	f000 f81a 	bl	8000544 <SendOrigin>
      break;
 8000510:	bf00      	nop

  }
  FlushReceiveBuffer();
 8000512:	f000 f9b5 	bl	8000880 <FlushReceiveBuffer>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <SendPollResponse>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SendPollResponse() // responds to console poll to check if a controller is plugged in (See GCN communication protocol guides)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  SetBaudSend(); // sets UART frame size to 6 (see function for details)
 8000522:	f000 f9cb 	bl	80008bc <SetBaudSend>

  SendByte(0x09);   // send expected poll response bytes
 8000526:	2009      	movs	r0, #9
 8000528:	f000 f892 	bl	8000650 <SendByte>
  SendByte(0x00);
 800052c:	2000      	movs	r0, #0
 800052e:	f000 f88f 	bl	8000650 <SendByte>
  SendByte(0x03);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 f88c 	bl	8000650 <SendByte>
  SendStopBit();    // sends stop bit (duh)
 8000538:	f000 f99a 	bl	8000870 <SendStopBit>

  SetBaudReceive(); // flushes buffer and sets UART frame back to 8 (see function for details)
 800053c:	f000 f9ca 	bl	80008d4 <SetBaudReceive>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <SendOrigin>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SendOrigin() // responds to console poll for origin (See GCN communication protocol guides)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  SetBaudSend();  // sets UART frame size to 6 (see function for details)
 8000548:	f000 f9b8 	bl	80008bc <SetBaudSend>

  SendByte((uint8_t)0x00);     // Sends Start, Y, X, B, A and some overhead stuff, format is usually [0,0,0,St,Y,X,B,A]
 800054c:	2000      	movs	r0, #0
 800054e:	f000 f87f 	bl	8000650 <SendByte>
  SendByte((uint8_t)0x80);     // Sends L, R, Z and Dpad inputs, format is usually [1,L,R,Z,Dup,Ddown,Dright,Dleft]
 8000552:	2080      	movs	r0, #128	; 0x80
 8000554:	f000 f87c 	bl	8000650 <SendByte>

  SendByte((uint8_t)128);      // control stick inputs
 8000558:	2080      	movs	r0, #128	; 0x80
 800055a:	f000 f879 	bl	8000650 <SendByte>
  SendByte((uint8_t)128);
 800055e:	2080      	movs	r0, #128	; 0x80
 8000560:	f000 f876 	bl	8000650 <SendByte>

  SendByte((uint8_t)128);      // c-stick inputs
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	f000 f873 	bl	8000650 <SendByte>
  SendByte((uint8_t)128);
 800056a:	2080      	movs	r0, #128	; 0x80
 800056c:	f000 f870 	bl	8000650 <SendByte>

  SendByte((uint8_t)0x00);     // analog L and R inputs
 8000570:	2000      	movs	r0, #0
 8000572:	f000 f86d 	bl	8000650 <SendByte>
  SendByte((uint8_t)0x00);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f86a 	bl	8000650 <SendByte>

  SendByte((uint8_t)0x00);     // null bytes (expected by console)
 800057c:	2000      	movs	r0, #0
 800057e:	f000 f867 	bl	8000650 <SendByte>
  SendByte((uint8_t)0x00);
 8000582:	2000      	movs	r0, #0
 8000584:	f000 f864 	bl	8000650 <SendByte>

  SendStopBit();               // stop bit
 8000588:	f000 f972 	bl	8000870 <SendStopBit>


  SetBaudReceive(); // sets UART frame back to 8 (see function for details)
 800058c:	f000 f9a2 	bl	80008d4 <SetBaudReceive>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <SendInputs>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SendInputs() // sends inputs to console
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  SetBaudSend();
 8000598:	f000 f990 	bl	80008bc <SetBaudSend>

  SendByte(~(GPIOA->IDR) & 0b00011111);   // Sends Start, Y, X, B, A and some overhead stuff, format is usually [0,0,0,St,Y,X,B,A]
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <SendInputs+0x9c>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	43db      	mvns	r3, r3
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 031f 	and.w	r3, r3, #31
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f84f 	bl	8000650 <SendByte>
  SendByte(((~(GPIOA->IDR) & 0b11100000)>>1)| 0b10000000 | DPad);  // Sends L, R, Z and Dpad inputs, format is usually [1,L,R,Z,Dup,Ddown,Dright,Dleft]
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SendInputs+0x9c>)
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	43db      	mvns	r3, r3
 80005b8:	085b      	lsrs	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <SendInputs+0xa0>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f83c 	bl	8000650 <SendByte>

  SendByte(ControlX); // control stick inputs
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <SendInputs+0xa4>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f836 	bl	8000650 <SendByte>
  SendByte(ControlY);
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <SendInputs+0xa8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f830 	bl	8000650 <SendByte>

  SendByte(CstickX);  // c-stick inputs
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <SendInputs+0xac>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f82a 	bl	8000650 <SendByte>
  SendByte(CstickY);
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <SendInputs+0xb0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f824 	bl	8000650 <SendByte>

  SendByte(AnalogL);  // analog L and R inputs
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <SendInputs+0xb4>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f81e 	bl	8000650 <SendByte>
  SendByte(AnalogR);
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <SendInputs+0xb8>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f818 	bl	8000650 <SendByte>

  SendStopBit();      // stop bit
 8000620:	f000 f926 	bl	8000870 <SendStopBit>

  FlushReceiveBuffer(); // empties RX buffer
 8000624:	f000 f92c 	bl	8000880 <FlushReceiveBuffer>

  SetBaudReceive(); // sets UART frame back to 8 (see function for details)
 8000628:	f000 f954 	bl	80008d4 <SetBaudReceive>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40020000 	.word	0x40020000
 8000634:	20000186 	.word	0x20000186
 8000638:	20000000 	.word	0x20000000
 800063c:	20000001 	.word	0x20000001
 8000640:	20000002 	.word	0x20000002
 8000644:	20000003 	.word	0x20000003
 8000648:	20000184 	.word	0x20000184
 800064c:	20000185 	.word	0x20000185

08000650 <SendByte>:



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SendByte(uint8_t dataByte) // Sends a full GC byte to the console in pairs of GC bits using 4 UART bytes (REQUIRES 6-BIT FRAME)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  SendPair(Byte2GC((dataByte & 0b11000000) >> 6));      //splits byte into pairs, converts them to UART bytes and sends them
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	099b      	lsrs	r3, r3, #6
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f8b7 	bl	80007d4 <Byte2GC>
 8000666:	4603      	mov	r3, r0
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f887 	bl	800077c <SendPair>
  SendPair(Byte2GC((dataByte & 0b00110000) >> 4));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	111b      	asrs	r3, r3, #4
 8000672:	b2db      	uxtb	r3, r3
 8000674:	f003 0303 	and.w	r3, r3, #3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f8aa 	bl	80007d4 <Byte2GC>
 8000680:	4603      	mov	r3, r0
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f87a 	bl	800077c <SendPair>
  SendPair(Byte2GC((dataByte & 0b00001100) >> 2));
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	109b      	asrs	r3, r3, #2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0303 	and.w	r3, r3, #3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f89d 	bl	80007d4 <Byte2GC>
 800069a:	4603      	mov	r3, r0
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f86d 	bl	800077c <SendPair>
  SendPair(Byte2GC(dataByte & 0b00000011));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 0303 	and.w	r3, r3, #3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f892 	bl	80007d4 <Byte2GC>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f862 	bl	800077c <SendPair>

  USART1->SR |= USART_SR_TC; // clear TX_COMPLETE bit by writing a 1 to it (see TXCn in AVR datasheet)
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <SendByte+0x7c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <SendByte+0x7c>)
 80006be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40011000 	.word	0x40011000

080006d0 <ReceiveByte>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t ReceiveByte() // Receives 1 full GC byte as 4 UART bytes (REQUIRES 8-BIT FRAME)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  uint8_t first, second, third, last;

  first = ReceivePair();    //receive each pair of bytes
 80006d6:	f000 f869 	bl	80007ac <ReceivePair>
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  second = ReceivePair();
 80006de:	f000 f865 	bl	80007ac <ReceivePair>
 80006e2:	4603      	mov	r3, r0
 80006e4:	71bb      	strb	r3, [r7, #6]
  third = ReceivePair();
 80006e6:	f000 f861 	bl	80007ac <ReceivePair>
 80006ea:	4603      	mov	r3, r0
 80006ec:	717b      	strb	r3, [r7, #5]
  last = ReceivePair();
 80006ee:	f000 f85d 	bl	80007ac <ReceivePair>
 80006f2:	4603      	mov	r3, r0
 80006f4:	713b      	strb	r3, [r7, #4]

  first = GC2Byte(first);   //convert UART bytes into GC bits
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f88d 	bl	8000818 <GC2Byte>
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  second = GC2Byte(second);
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f887 	bl	8000818 <GC2Byte>
 800070a:	4603      	mov	r3, r0
 800070c:	71bb      	strb	r3, [r7, #6]
  third = GC2Byte(third);
 800070e:	797b      	ldrb	r3, [r7, #5]
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f881 	bl	8000818 <GC2Byte>
 8000716:	4603      	mov	r3, r0
 8000718:	717b      	strb	r3, [r7, #5]
  last = GC2Byte(last);
 800071a:	793b      	ldrb	r3, [r7, #4]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f87b 	bl	8000818 <GC2Byte>
 8000722:	4603      	mov	r3, r0
 8000724:	713b      	strb	r3, [r7, #4]

  return (first << 6) | (second << 4) | (third << 2) | (last); // return GC byte
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	019b      	lsls	r3, r3, #6
 800072a:	b25a      	sxtb	r2, r3
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	b25b      	sxtb	r3, r3
 8000732:	4313      	orrs	r3, r2
 8000734:	b25a      	sxtb	r2, r3
 8000736:	797b      	ldrb	r3, [r7, #5]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	b25b      	sxtb	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b25a      	sxtb	r2, r3
 8000740:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	b25b      	sxtb	r3, r3
 8000748:	b2db      	uxtb	r3, r3
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <ReceiveRumbleByte>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t ReceiveRumbleByte() // Receives 1 full GC byte as 4 UART bytes (REQUIRES 8-BIT FRAME)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  //uint8_t first, second, third, last;

  ReceivePair();    //receive each pair of bytes
 8000756:	f000 f829 	bl	80007ac <ReceivePair>
  ReceivePair();
 800075a:	f000 f827 	bl	80007ac <ReceivePair>
  ReceivePair();
 800075e:	f000 f825 	bl	80007ac <ReceivePair>
  SetRumble(GC2Byte(ReceivePair()));
 8000762:	f000 f823 	bl	80007ac <ReceivePair>
 8000766:	4603      	mov	r3, r0
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f855 	bl	8000818 <GC2Byte>
 800076e:	4603      	mov	r3, r0
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f8c1 	bl	80008f8 <SetRumble>
}
 8000776:	bf00      	nop
 8000778:	4618      	mov	r0, r3
 800077a:	bd80      	pop	{r7, pc}

0800077c <SendPair>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SendPair(uint8_t sent)  // sends UART Byte via TX (SHOULD USE 6-BIT FRAME)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  //PORTB = (1<<3);
  while (!(USART1->SR & USART_SR_TXE)); //wait for TX buffer to be ready to send data
 8000786:	bf00      	nop
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <SendPair+0x2c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f9      	beq.n	8000788 <SendPair+0xc>
  USART1->DR = sent;  // send data
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <SendPair+0x2c>)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	6053      	str	r3, [r2, #4]
  //PORTB = 0;
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40011000 	.word	0x40011000

080007ac <ReceivePair>:


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t ReceivePair()  // receives UART byte via RX (SHOULD USE 8-BIT FRAME)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  //PORTB = (1<<2);
  while (!(USART1->SR & USART_SR_RXNE));  // wait for data to be received
 80007b0:	bf00      	nop
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <ReceivePair+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f9      	beq.n	80007b2 <ReceivePair+0x6>
  //PORTB = 0;
  return USART1->DR;  // read data
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <ReceivePair+0x24>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	b2db      	uxtb	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40011000 	.word	0x40011000

080007d4 <Byte2GC>:

uint8_t Byte2GC(uint8_t dataByte) // translates 2 GC bits into one UART byte (SHOULD USE 6-BIT FRAME)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  switch (dataByte) // UART sends bits LSB first (unlike GC which sends them MSB first) so these have to be flipped
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d813      	bhi.n	800080c <Byte2GC+0x38>
 80007e4:	a201      	add	r2, pc, #4	; (adr r2, 80007ec <Byte2GC+0x18>)
 80007e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ea:	bf00      	nop
 80007ec:	080007fd 	.word	0x080007fd
 80007f0:	08000801 	.word	0x08000801
 80007f4:	08000805 	.word	0x08000805
 80007f8:	08000809 	.word	0x08000809
  {
                          // start & stop bits in []
                          // GC bits      desired output            sent UART       UART input
    case 0: return 0x08;  // 0b00   ->    [0]00010000[1] -> (flip) -> [0]00001000[1]  ->  0x08
 80007fc:	2308      	movs	r3, #8
 80007fe:	e005      	b.n	800080c <Byte2GC+0x38>
    case 1: return 0xE8;  // 0b01   ->    [0]00010111[1] -> (flip) -> [0]11101000[1]  ->  0xE8
 8000800:	23e8      	movs	r3, #232	; 0xe8
 8000802:	e003      	b.n	800080c <Byte2GC+0x38>
    case 2: return 0x0F;  // 0b10   ->    [0]11110000[1] -> (flip) -> [0]00001111[1]  ->  0x0F
 8000804:	230f      	movs	r3, #15
 8000806:	e001      	b.n	800080c <Byte2GC+0x38>
    case 3: return 0xEF;  // 0b11   ->    [0]11110111[1] -> (flip) -> [0]11101111[1]  ->  0xEF
 8000808:	23ef      	movs	r3, #239	; 0xef
 800080a:	e7ff      	b.n	800080c <Byte2GC+0x38>
  }
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <GC2Byte>:

uint8_t GC2Byte(uint8_t dataByte)  // translates 1 UART byte (8-bit frame) to 2 GC bits
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  dataByte &= 0b01010010; // we only care about checking the 2nd and 2nd-last in the UART since they correspond with the GC bits (possible values )
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 0352 	and.w	r3, r3, #82	; 0x52
 8000828:	71fb      	strb	r3, [r7, #7]
                          // the middle bit is checked to see if its a stop bit (1 if stop bit)

  switch (dataByte)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b52      	cmp	r3, #82	; 0x52
 800082e:	d016      	beq.n	800085e <GC2Byte+0x46>
 8000830:	2b52      	cmp	r3, #82	; 0x52
 8000832:	dc16      	bgt.n	8000862 <GC2Byte+0x4a>
 8000834:	2b42      	cmp	r3, #66	; 0x42
 8000836:	d010      	beq.n	800085a <GC2Byte+0x42>
 8000838:	2b42      	cmp	r3, #66	; 0x42
 800083a:	dc12      	bgt.n	8000862 <GC2Byte+0x4a>
 800083c:	2b40      	cmp	r3, #64	; 0x40
 800083e:	d008      	beq.n	8000852 <GC2Byte+0x3a>
 8000840:	2b40      	cmp	r3, #64	; 0x40
 8000842:	dc0e      	bgt.n	8000862 <GC2Byte+0x4a>
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <GC2Byte+0x36>
 8000848:	2b02      	cmp	r3, #2
 800084a:	d004      	beq.n	8000856 <GC2Byte+0x3e>
 800084c:	e009      	b.n	8000862 <GC2Byte+0x4a>
  {
    case 0x00: return 0;
 800084e:	2300      	movs	r3, #0
 8000850:	e008      	b.n	8000864 <GC2Byte+0x4c>
    case 0x40: return 1;
 8000852:	2301      	movs	r3, #1
 8000854:	e006      	b.n	8000864 <GC2Byte+0x4c>
    case 0x02: return 2;
 8000856:	2302      	movs	r3, #2
 8000858:	e004      	b.n	8000864 <GC2Byte+0x4c>
    case 0x42: return 3;
 800085a:	2303      	movs	r3, #3
 800085c:	e002      	b.n	8000864 <GC2Byte+0x4c>
    case 0x52: return 255;  // STOP bit if input is 0b01010010
 800085e:	23ff      	movs	r3, #255	; 0xff
 8000860:	e000      	b.n	8000864 <GC2Byte+0x4c>
    default:   return 0;    // default to 00 if something goes wrong
 8000862:	2300      	movs	r3, #0
  }
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <SendStopBit>:

void SendStopBit()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  SendPair(0xFF); // send (01111111) stop bit to tell console that your message is done
 8000874:	20ff      	movs	r0, #255	; 0xff
 8000876:	f7ff ff81 	bl	800077c <SendPair>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <FlushReceiveBuffer>:

void FlushReceiveBuffer() // clear receiver buffer before changing frame size or awaiting new messages from the console
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  //PORTB = (1<<4);
  while (!(USART1->SR & USART_SR_TC));
 8000886:	bf00      	nop
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <FlushReceiveBuffer+0x38>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0f9      	beq.n	8000888 <FlushReceiveBuffer+0x8>
  uint32_t dummy;
  while(USART1->SR & USART_SR_RXNE) dummy = USART1->DR; // read data until no more data is in the buffer
 8000894:	e002      	b.n	800089c <FlushReceiveBuffer+0x1c>
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <FlushReceiveBuffer+0x38>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <FlushReceiveBuffer+0x38>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 0320 	and.w	r3, r3, #32
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f6      	bne.n	8000896 <FlushReceiveBuffer+0x16>
  //PORTB = 0;
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40011000 	.word	0x40011000

080008bc <SetBaudSend>:

void SetBaudSend() // changes UART frame size to 6 (after receiving a console command and before sending a controller message)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
   FlushReceiveBuffer();
 80008c0:	f7ff ffde 	bl	8000880 <FlushReceiveBuffer>
   USART1->BRR = 0x095;
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <SetBaudSend+0x14>)
 80008c6:	2295      	movs	r2, #149	; 0x95
 80008c8:	609a      	str	r2, [r3, #8]
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40011000 	.word	0x40011000

080008d4 <SetBaudReceive>:

void SetBaudReceive() // changes UART frame size to 8 (after receiving sending a controller message - this is the default frame size for receiving data from the console)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
   FlushReceiveBuffer();
 80008d8:	f7ff ffd2 	bl	8000880 <FlushReceiveBuffer>
   while (!(USART1->SR & USART_SR_TC)); // wait for transmit buffer to be clear (i.e. wait for the controller message to be sent)
 80008dc:	bf00      	nop
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <SetBaudReceive+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0f9      	beq.n	80008de <SetBaudReceive+0xa>
   USART1->BRR = 0x0C0;
 80008ea:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <SetBaudReceive+0x20>)
 80008ec:	22c0      	movs	r2, #192	; 0xc0
 80008ee:	609a      	str	r2, [r3, #8]
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40011000 	.word	0x40011000

080008f8 <SetRumble>:

void SetRumble(uint8_t command)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  //RMBL_PORT = command & 1;
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f000 fa3b 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000916:	f000 f807 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f000 f899 	bl	8000a50 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800091e:	f005 fbd9 	bl	80060d4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000922:	f000 f869 	bl	80009f8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000926:	e7fe      	b.n	8000926 <main+0x18>

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f006 f81e 	bl	8006978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <SystemClock_Config+0xc8>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <SystemClock_Config+0xc8>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <SystemClock_Config+0xc8>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <SystemClock_Config+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <SystemClock_Config+0xcc>)
 8000972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <SystemClock_Config+0xcc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000998:	2319      	movs	r3, #25
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800099c:	23c0      	movs	r3, #192	; 0xc0
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 feb7 	bl	8002720 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b8:	f000 f8fb 	bl	8000bb2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2103      	movs	r1, #3
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 f919 	bl	8002c10 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e4:	f000 f8e5 	bl	8000bb2 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3750      	adds	r7, #80	; 0x50
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART1_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <MX_USART1_UART_Init+0x54>)
 8000a06:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	220c      	movs	r2, #12
 8000a1e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a30:	f002 fabe 	bl	8002fb0 <HAL_HalfDuplex_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f8ba 	bl	8000bb2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000019c 	.word	0x2000019c
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	000f4240 	.word	0x000f4240

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b48      	ldr	r3, [pc, #288]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a47      	ldr	r2, [pc, #284]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a40      	ldr	r2, [pc, #256]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a39      	ldr	r2, [pc, #228]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a32      	ldr	r2, [pc, #200]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000adc:	482c      	ldr	r0, [pc, #176]	; (8000b90 <MX_GPIO_Init+0x140>)
 8000ade:	f000 fc81 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUMBLE_GPIO_Port, RUMBLE_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	482b      	ldr	r0, [pc, #172]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000ae8:	f000 fc7c 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4822      	ldr	r0, [pc, #136]	; (8000b90 <MX_GPIO_Init+0x140>)
 8000b06:	f000 fae9 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin X_Pin Y_Pin
                           START_Pin Z_Pin R_Pin L_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|X_Pin|Y_Pin
 8000b0a:	23ff      	movs	r3, #255	; 0xff
 8000b0c:	617b      	str	r3, [r7, #20]
                          |START_Pin|Z_Pin|R_Pin|L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481e      	ldr	r0, [pc, #120]	; (8000b98 <MX_GPIO_Init+0x148>)
 8000b1e:	f000 fadd 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_Pin LEFT_Pin UP_Pin DOWN_Pin
                           C_RIGHT_Pin C_LEFT_Pin C_UP_Pin C_DOWN_Pin
                           LS_Pin MS_Pin MX_Pin MY_Pin */
  GPIO_InitStruct.Pin = RIGHT_Pin|LEFT_Pin|UP_Pin|DOWN_Pin
 8000b22:	f24f 7367 	movw	r3, #63335	; 0xf767
 8000b26:	617b      	str	r3, [r7, #20]
                          |C_RIGHT_Pin|C_LEFT_Pin|C_UP_Pin|C_DOWN_Pin
                          |LS_Pin|MS_Pin|MX_Pin|MY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4817      	ldr	r0, [pc, #92]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000b38:	f000 fad0 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_INT_Pin */
  GPIO_InitStruct.Pin = TX_INT_Pin;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_INT_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4810      	ldr	r0, [pc, #64]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000b52:	f000 fac3 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RUMBLE_Pin */
  GPIO_InitStruct.Pin = RUMBLE_Pin;
 8000b56:	2310      	movs	r3, #16
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RUMBLE_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <MX_GPIO_Init+0x144>)
 8000b6e:	f000 fab5 	bl	80010dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2009      	movs	r0, #9
 8000b78:	f000 fa79 	bl	800106e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b7c:	2009      	movs	r0, #9
 8000b7e:	f000 fa92 	bl	80010a6 <HAL_NVIC_EnableIRQ>

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020400 	.word	0x40020400
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	ReceiveCommand();
 8000ba6:	f7ff fc93 	bl	80004d0 <ReceiveCommand>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb6:	b672      	cpsid	i
}
 8000bb8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bba:	e7fe      	b.n	8000bba <Error_Handler+0x8>

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_UART_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12c      	bne.n	8000c88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6c:	2312      	movs	r3, #18
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_UART_MspInit+0x8c>)
 8000c84:	f000 fa2a 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f8a2 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Y_Pin);
 8000cf4:	2008      	movs	r0, #8
 8000cf6:	f000 fb8f 	bl	8001418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <OTG_FS_IRQHandler+0x10>)
 8000d06:	f000 fcef 	bl	80016e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200006b4 	.word	0x200006b4

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f005 fde3 	bl	8006930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fdd0 	bl	800090e <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000d7c:	08006a10 	.word	0x08006a10
  ldr r2, =_sbss
 8000d80:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000d84:	20000abc 	.word	0x20000abc

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f94f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fefc 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f967 	bl	80010c2 <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f92f 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000004 	.word	0x20000004
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	20000008 	.word	0x20000008

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000000c 	.word	0x2000000c
 8000e54:	200001e0 	.word	0x200001e0

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200001e0 	.word	0x200001e0

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000000c 	.word	0x2000000c

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff29 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff3e 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff8e 	bl	8000fac <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff31 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e159      	b.n	80013ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8148 	bne.w	80013a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	2b02      	cmp	r3, #2
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b03      	cmp	r3, #3
 800119a:	d017      	beq.n	80011cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d123      	bne.n	8001220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0203 	and.w	r2, r3, #3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80a2 	beq.w	80013a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a56      	ldr	r2, [pc, #344]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <HAL_GPIO_Init+0x2ec>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d019      	beq.n	80012de <HAL_GPIO_Init+0x202>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <HAL_GPIO_Init+0x2f4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x1fe>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a47      	ldr	r2, [pc, #284]	; (80013d4 <HAL_GPIO_Init+0x2f8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x1fa>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <HAL_GPIO_Init+0x2fc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x1f6>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a45      	ldr	r2, [pc, #276]	; (80013dc <HAL_GPIO_Init+0x300>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x1f2>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e008      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012d2:	2303      	movs	r3, #3
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x204>
 80012de:	2300      	movs	r3, #0
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f002 0203 	and.w	r2, r2, #3
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x2ec>)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001322:	4a2f      	ldr	r2, [pc, #188]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_GPIO_Init+0x304>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <HAL_GPIO_Init+0x304>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <HAL_GPIO_Init+0x304>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_GPIO_Init+0x304>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_GPIO_Init+0x304>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f67f aea2 	bls.w	80010f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fbb0 	bl	8000b9c <HAL_GPIO_EXTI_Callback>
  }
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40013c00 	.word	0x40013c00

08001448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	b08f      	sub	sp, #60	; 0x3c
 800144c:	af0a      	add	r7, sp, #40	; 0x28
 800144e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e10f      	b.n	800167a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d106      	bne.n	800147a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f004 ff63 	bl	8006340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2203      	movs	r2, #3
 800147e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f002 f8bc 	bl	8003616 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	687e      	ldr	r6, [r7, #4]
 80014a6:	466d      	mov	r5, sp
 80014a8:	f106 0410 	add.w	r4, r6, #16
 80014ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80014bc:	1d33      	adds	r3, r6, #4
 80014be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c0:	6838      	ldr	r0, [r7, #0]
 80014c2:	f001 ff93 	bl	80033ec <USB_CoreInit>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2202      	movs	r2, #2
 80014d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0d0      	b.n	800167a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 f8aa 	bl	8003638 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e04a      	b.n	8001580 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	333d      	adds	r3, #61	; 0x3d
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	333c      	adds	r3, #60	; 0x3c
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	b298      	uxth	r0, r3
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	3342      	adds	r3, #66	; 0x42
 8001526:	4602      	mov	r2, r0
 8001528:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	333f      	adds	r3, #63	; 0x3f
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3344      	adds	r3, #68	; 0x44
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3348      	adds	r3, #72	; 0x48
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3350      	adds	r3, #80	; 0x50
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	3301      	adds	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d3af      	bcc.n	80014ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e044      	b.n	800161a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	3301      	adds	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	d3b5      	bcc.n	8001590 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	687e      	ldr	r6, [r7, #4]
 800162c:	466d      	mov	r5, sp
 800162e:	f106 0410 	add.w	r4, r6, #16
 8001632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800163e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001642:	1d33      	adds	r3, r6, #4
 8001644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001646:	6838      	ldr	r0, [r7, #0]
 8001648:	f002 f842 	bl	80036d0 <USB_DevInit>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2202      	movs	r2, #2
 8001656:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00d      	b.n	800167a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f003 f8be 	bl	80047f4 <USB_DevDisconnect>

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001682 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_PCD_Start+0x1c>
 800169a:	2302      	movs	r3, #2
 800169c:	e020      	b.n	80016e0 <HAL_PCD_Start+0x5e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d109      	bne.n	80016c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d005      	beq.n	80016c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 ff94 	bl	80035f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 f86e 	bl	80047b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08d      	sub	sp, #52	; 0x34
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 f92c 	bl	800495c <USB_GetMode>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	f040 839d 	bne.w	8001e46 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f003 f890 	bl	8004836 <USB_ReadInterrupts>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8393 	beq.w	8001e44 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f003 f887 	bl	8004836 <USB_ReadInterrupts>
 8001728:	4603      	mov	r3, r0
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b02      	cmp	r3, #2
 8001730:	d107      	bne.n	8001742 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f002 0202 	and.w	r2, r2, #2
 8001740:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f003 f875 	bl	8004836 <USB_ReadInterrupts>
 800174c:	4603      	mov	r3, r0
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b10      	cmp	r3, #16
 8001754:	d161      	bne.n	800181a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0210 	bic.w	r2, r2, #16
 8001764:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	f003 020f 	and.w	r2, r3, #15
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	3304      	adds	r3, #4
 8001784:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	0c5b      	lsrs	r3, r3, #17
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	2b02      	cmp	r3, #2
 8001790:	d124      	bne.n	80017dc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d035      	beq.n	800180a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	6a38      	ldr	r0, [r7, #32]
 80017b2:	f002 feac 	bl	800450e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017c2:	441a      	add	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017d4:	441a      	add	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	619a      	str	r2, [r3, #24]
 80017da:	e016      	b.n	800180a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	0c5b      	lsrs	r3, r3, #17
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	2b06      	cmp	r3, #6
 80017e6:	d110      	bne.n	800180a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80017ee:	2208      	movs	r2, #8
 80017f0:	4619      	mov	r1, r3
 80017f2:	6a38      	ldr	r0, [r7, #32]
 80017f4:	f002 fe8b 	bl	800450e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001804:	441a      	add	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0210 	orr.w	r2, r2, #16
 8001818:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f003 f809 	bl	8004836 <USB_ReadInterrupts>
 8001824:	4603      	mov	r3, r0
 8001826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800182a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800182e:	d16e      	bne.n	800190e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 f80f 	bl	800485c <USB_ReadDevAllOutEpInterrupt>
 800183e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001840:	e062      	b.n	8001908 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d057      	beq.n	80018fc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f003 f834 	bl	80048c4 <USB_ReadDevOutEPInterrupt>
 800185c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00c      	beq.n	8001882 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001874:	461a      	mov	r2, r3
 8001876:	2301      	movs	r3, #1
 8001878:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800187a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fd99 	bl	80023b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00c      	beq.n	80018a6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	4413      	add	r3, r2
 8001894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001898:	461a      	mov	r2, r3
 800189a:	2308      	movs	r3, #8
 800189c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800189e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fe93 	bl	80025cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	015a      	lsls	r2, r3, #5
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018bc:	461a      	mov	r2, r3
 80018be:	2310      	movs	r3, #16
 80018c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	015a      	lsls	r2, r3, #5
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d8:	461a      	mov	r2, r3
 80018da:	2320      	movs	r3, #32
 80018dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f4:	461a      	mov	r2, r3
 80018f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	3301      	adds	r3, #1
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190a:	2b00      	cmp	r3, #0
 800190c:	d199      	bne.n	8001842 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f002 ff8f 	bl	8004836 <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001922:	f040 80c0 	bne.w	8001aa6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 ffb0 	bl	8004890 <USB_ReadDevAllInEpInterrupt>
 8001930:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001936:	e0b2      	b.n	8001a9e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80a7 	beq.w	8001a92 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f002 ffd6 	bl	8004900 <USB_ReadDevInEPInterrupt>
 8001954:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d057      	beq.n	8001a10 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	2201      	movs	r2, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43db      	mvns	r3, r3
 800197a:	69f9      	ldr	r1, [r7, #28]
 800197c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001980:	4013      	ands	r3, r2
 8001982:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001990:	461a      	mov	r2, r3
 8001992:	2301      	movs	r3, #1
 8001994:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d132      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	3348      	adds	r3, #72	; 0x48
 80019ae:	6819      	ldr	r1, [r3, #0]
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4403      	add	r3, r0
 80019be:	3344      	adds	r3, #68	; 0x44
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4419      	add	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4403      	add	r3, r0
 80019d2:	3348      	adds	r3, #72	; 0x48
 80019d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d113      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x31c>
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3350      	adds	r3, #80	; 0x50
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d108      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80019fc:	461a      	mov	r2, r3
 80019fe:	2101      	movs	r1, #1
 8001a00:	f002 ffde 	bl	80049c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f004 fd19 	bl	8006442 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a26:	461a      	mov	r2, r3
 8001a28:	2308      	movs	r3, #8
 8001a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a42:	461a      	mov	r2, r3
 8001a44:	2310      	movs	r3, #16
 8001a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2340      	movs	r3, #64	; 0x40
 8001a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fc03 	bl	8002298 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	3301      	adds	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f47f af49 	bne.w	8001938 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fec3 	bl	8004836 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aba:	d122      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fe0f 	bl	8002708 <HAL_PCDEx_LPM_Callback>
 8001aea:	e002      	b.n	8001af2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f004 fd15 	bl	800651c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fe95 	bl	8004836 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b16:	d112      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f004 fcd1 	bl	80064d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b3c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fe77 	bl	8004836 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b52:	f040 80c7 	bne.w	8001ce4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2110      	movs	r1, #16
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 ff11 	bl	8003998 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7a:	e056      	b.n	8001c2a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b88:	461a      	mov	r2, r3
 8001b8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba0:	0151      	lsls	r1, r2, #5
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	440a      	add	r2, r1
 8001ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bae:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc0:	0151      	lsls	r1, r2, #5
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	440a      	add	r2, r1
 8001bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001be2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be6:	015a      	lsls	r2, r3, #5
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf4:	0151      	lsls	r1, r2, #5
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	440a      	add	r2, r1
 8001bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c14:	0151      	lsls	r1, r2, #5
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	440a      	add	r2, r1
 8001c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c22:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	3301      	adds	r3, #1
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d3a3      	bcc.n	8001b7c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d016      	beq.n	8001c7e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c60:	f043 030b 	orr.w	r3, r3, #11
 8001c64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c76:	f043 030b 	orr.w	r3, r3, #11
 8001c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7c:	e015      	b.n	8001caa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca4:	f043 030b 	orr.w	r3, r3, #11
 8001ca8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cbc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f002 fe76 	bl	80049c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fda4 	bl	8004836 <USB_ReadInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf8:	d124      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fe3a 	bl	8004978 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 fea2 	bl	8003a52 <USB_GetDevSpeed>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681c      	ldr	r4, [r3, #0]
 8001d1a:	f001 f915 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8001d1e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f001 fbc1 	bl	80034b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f004 fbaf 	bl	8006492 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 fd74 	bl	8004836 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d10a      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f004 fb8c 	bl	8006476 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f002 0208 	and.w	r2, r2, #8
 8001d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 fd5f 	bl	8004836 <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d82:	d10f      	bne.n	8001da4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f004 fbe4 	bl	800655c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 fd44 	bl	8004836 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001db8:	d10f      	bne.n	8001dda <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f004 fbb7 	bl	8006538 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fd29 	bl	8004836 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d10a      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f004 fbc5 	bl	8006580 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fd13 	bl	8004836 <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d115      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f004 fbb5 	bl	800659c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e000      	b.n	8001e46 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001e44:	bf00      	nop
    }
  }
}
 8001e46:	3734      	adds	r7, #52	; 0x34
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}

08001e4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_PCD_SetAddress+0x1a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e013      	b.n	8001e8e <HAL_PCD_SetAddress+0x42>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 fc71 	bl	8004766 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	4608      	mov	r0, r1
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	70fb      	strb	r3, [r7, #3]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	803b      	strh	r3, [r7, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0f      	bge.n	8001edc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3338      	adds	r3, #56	; 0x38
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	705a      	strb	r2, [r3, #1]
 8001eda:	e00f      	b.n	8001efc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f08:	883a      	ldrh	r2, [r7, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	78ba      	ldrb	r2, [r7, #2]
 8001f12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	785b      	ldrb	r3, [r3, #1]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f26:	78bb      	ldrb	r3, [r7, #2]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d102      	bne.n	8001f32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_PCD_EP_Open+0xaa>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e00e      	b.n	8001f5e <HAL_PCD_EP_Open+0xc8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 fda4 	bl	8003a9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da0f      	bge.n	8001f9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	3338      	adds	r3, #56	; 0x38
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3304      	adds	r3, #4
 8001f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	705a      	strb	r2, [r3, #1]
 8001f98:	e00f      	b.n	8001fba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_PCD_EP_Close+0x6e>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e00e      	b.n	8001ff2 <HAL_PCD_EP_Close+0x8c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fde2 	bl	8003bac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	460b      	mov	r3, r1
 8002008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200a:	7afb      	ldrb	r3, [r7, #11]
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	3304      	adds	r3, #4
 8002022:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2200      	movs	r2, #0
 800203a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203c:	7afb      	ldrb	r3, [r7, #11]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	b2da      	uxtb	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d102      	bne.n	8002056 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	6979      	ldr	r1, [r7, #20]
 800206e:	f002 f8bd 	bl	80041ec <USB_EP0StartXfer>
 8002072:	e008      	b.n	8002086 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	6979      	ldr	r1, [r7, #20]
 8002082:	f001 fe6f 	bl	8003d64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	460b      	mov	r3, r1
 800209e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	3338      	adds	r3, #56	; 0x38
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2201      	movs	r2, #1
 80020ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d0:	7afb      	ldrb	r3, [r7, #11]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	6979      	ldr	r1, [r7, #20]
 8002102:	f002 f873 	bl	80041ec <USB_EP0StartXfer>
 8002106:	e008      	b.n	800211a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	6979      	ldr	r1, [r7, #20]
 8002116:	f001 fe25 	bl	8003d64 <USB_EPStartXfer>
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 020f 	and.w	r2, r3, #15
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	d901      	bls.n	8002142 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e050      	b.n	80021e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002146:	2b00      	cmp	r3, #0
 8002148:	da0f      	bge.n	800216a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	3338      	adds	r3, #56	; 0x38
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	3304      	adds	r3, #4
 8002160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	705a      	strb	r2, [r3, #1]
 8002168:	e00d      	b.n	8002186 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	b2da      	uxtb	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_PCD_EP_SetStall+0x82>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e01e      	b.n	80021e4 <HAL_PCD_EP_SetStall+0xc0>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 fa02 	bl	80045be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	b2d9      	uxtb	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021d4:	461a      	mov	r2, r3
 80021d6:	f002 fbf3 	bl	80049c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	f003 020f 	and.w	r2, r3, #15
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	d901      	bls.n	800220a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e042      	b.n	8002290 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800220a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220e:	2b00      	cmp	r3, #0
 8002210:	da0f      	bge.n	8002232 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	f003 020f 	and.w	r2, r3, #15
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	3338      	adds	r3, #56	; 0x38
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	3304      	adds	r3, #4
 8002228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	705a      	strb	r2, [r3, #1]
 8002230:	e00f      	b.n	8002252 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	b2da      	uxtb	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_PCD_EP_ClrStall+0x86>
 800226e:	2302      	movs	r3, #2
 8002270:	e00e      	b.n	8002290 <HAL_PCD_EP_ClrStall+0xa4>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68f9      	ldr	r1, [r7, #12]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fa0a 	bl	800469a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	3338      	adds	r3, #56	; 0x38
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d901      	bls.n	80022d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e06c      	b.n	80023aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d902      	bls.n	80022ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	3303      	adds	r3, #3
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022f4:	e02b      	b.n	800234e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	429a      	cmp	r2, r3
 800230a:	d902      	bls.n	8002312 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3303      	adds	r3, #3
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800232a:	b2db      	uxtb	r3, r3
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	4603      	mov	r3, r0
 8002330:	6978      	ldr	r0, [r7, #20]
 8002332:	f002 f8ae 	bl	8004492 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	441a      	add	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	441a      	add	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	b29b      	uxth	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	429a      	cmp	r2, r3
 8002362:	d809      	bhi.n	8002378 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800236c:	429a      	cmp	r2, r3
 800236e:	d203      	bcs.n	8002378 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1be      	bne.n	80022f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	429a      	cmp	r2, r3
 8002382:	d811      	bhi.n	80023a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	2201      	movs	r2, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	43db      	mvns	r3, r3
 800239e:	6939      	ldr	r1, [r7, #16]
 80023a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023a4:	4013      	ands	r3, r2
 80023a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	333c      	adds	r3, #60	; 0x3c
 80023cc:	3304      	adds	r3, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	f040 80a0 	bne.w	800252c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d015      	beq.n	8002422 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4a72      	ldr	r2, [pc, #456]	; (80025c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	f240 80dd 	bls.w	80025ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80d7 	beq.w	80025ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800241e:	6093      	str	r3, [r2, #8]
 8002420:	e0cb      	b.n	80025ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002438:	461a      	mov	r2, r3
 800243a:	2320      	movs	r3, #32
 800243c:	6093      	str	r3, [r2, #8]
 800243e:	e0bc      	b.n	80025ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 80b7 	bne.w	80025ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4a5d      	ldr	r2, [pc, #372]	; (80025c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d90f      	bls.n	8002474 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246a:	461a      	mov	r2, r3
 800246c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002470:	6093      	str	r3, [r2, #8]
 8002472:	e0a2      	b.n	80025ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002486:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	0159      	lsls	r1, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	440b      	add	r3, r1
 8002490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800249a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4403      	add	r3, r0
 80024aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024c2:	6819      	ldr	r1, [r3, #0]
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4403      	add	r3, r0
 80024d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4419      	add	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4403      	add	r3, r0
 80024e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d114      	bne.n	800251e <PCD_EP_OutXfrComplete_int+0x16a>
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d108      	bne.n	800251e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002516:	461a      	mov	r2, r3
 8002518:	2101      	movs	r1, #1
 800251a:	f002 fa51 	bl	80049c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	4619      	mov	r1, r3
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f003 ff71 	bl	800640c <HAL_PCD_DataOutStageCallback>
 800252a:	e046      	b.n	80025ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a26      	ldr	r2, [pc, #152]	; (80025c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d124      	bne.n	800257e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254a:	461a      	mov	r2, r3
 800254c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002550:	6093      	str	r3, [r2, #8]
 8002552:	e032      	b.n	80025ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256a:	461a      	mov	r2, r3
 800256c:	2320      	movs	r3, #32
 800256e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4619      	mov	r1, r3
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f003 ff48 	bl	800640c <HAL_PCD_DataOutStageCallback>
 800257c:	e01d      	b.n	80025ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d114      	bne.n	80025ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d108      	bne.n	80025ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025a6:	461a      	mov	r2, r3
 80025a8:	2100      	movs	r1, #0
 80025aa:	f002 fa09 	bl	80049c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4619      	mov	r1, r3
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f003 ff29 	bl	800640c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	4f54300a 	.word	0x4f54300a
 80025c8:	4f54310a 	.word	0x4f54310a

080025cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	333c      	adds	r3, #60	; 0x3c
 80025e4:	3304      	adds	r3, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <PCD_EP_OutSetupPacket_int+0x88>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d90e      	bls.n	8002620 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	461a      	mov	r2, r3
 800261a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f003 fee1 	bl	80063e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <PCD_EP_OutSetupPacket_int+0x88>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d90c      	bls.n	8002648 <PCD_EP_OutSetupPacket_int+0x7c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d108      	bne.n	8002648 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002640:	461a      	mov	r2, r3
 8002642:	2101      	movs	r1, #1
 8002644:	f002 f9bc 	bl	80049c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	4f54300a 	.word	0x4f54300a

08002658 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
 8002664:	4613      	mov	r3, r2
 8002666:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d107      	bne.n	8002686 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002676:	883b      	ldrh	r3, [r7, #0]
 8002678:	0419      	lsls	r1, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	430a      	orrs	r2, r1
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
 8002684:	e028      	b.n	80026d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	4413      	add	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e00d      	b.n	80026b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	3340      	adds	r3, #64	; 0x40
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	4413      	add	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	3301      	adds	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	429a      	cmp	r2, r3
 80026be:	d3ec      	bcc.n	800269a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026c0:	883b      	ldrh	r3, [r7, #0]
 80026c2:	0418      	lsls	r0, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	4302      	orrs	r2, r0
 80026d0:	3340      	adds	r3, #64	; 0x40
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e264      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d075      	beq.n	800282a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800273e:	4ba3      	ldr	r3, [pc, #652]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b04      	cmp	r3, #4
 8002748:	d00c      	beq.n	8002764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274a:	4ba0      	ldr	r3, [pc, #640]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002752:	2b08      	cmp	r3, #8
 8002754:	d112      	bne.n	800277c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002756:	4b9d      	ldr	r3, [pc, #628]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002762:	d10b      	bne.n	800277c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	4b99      	ldr	r3, [pc, #612]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d05b      	beq.n	8002828 <HAL_RCC_OscConfig+0x108>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d157      	bne.n	8002828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e23f      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x74>
 8002786:	4b91      	ldr	r3, [pc, #580]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a90      	ldr	r2, [pc, #576]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01d      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x98>
 800279e:	4b8b      	ldr	r3, [pc, #556]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a8a      	ldr	r2, [pc, #552]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a87      	ldr	r2, [pc, #540]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 80027b8:	4b84      	ldr	r3, [pc, #528]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a83      	ldr	r2, [pc, #524]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b81      	ldr	r3, [pc, #516]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a80      	ldr	r2, [pc, #512]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fb3e 	bl	8000e58 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e0:	f7fe fb3a 	bl	8000e58 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e204      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b76      	ldr	r3, [pc, #472]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0xc0>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fb2a 	bl	8000e58 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe fb26 	bl	8000e58 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e1f0      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	4b6c      	ldr	r3, [pc, #432]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0xe8>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d063      	beq.n	80028fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002836:	4b65      	ldr	r3, [pc, #404]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b62      	ldr	r3, [pc, #392]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800284a:	2b08      	cmp	r3, #8
 800284c:	d11c      	bne.n	8002888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b5f      	ldr	r3, [pc, #380]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x152>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e1c4      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b56      	ldr	r3, [pc, #344]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4952      	ldr	r1, [pc, #328]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	e03a      	b.n	80028fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002890:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <HAL_RCC_OscConfig+0x2b0>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fadf 	bl	8000e58 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289e:	f7fe fadb 	bl	8000e58 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1a5      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4b46      	ldr	r3, [pc, #280]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4940      	ldr	r1, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_OscConfig+0x2b0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fabe 	bl	8000e58 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe faba 	bl	8000e58 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e184      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d030      	beq.n	800296c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <HAL_RCC_OscConfig+0x2b4>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7fe fa9e 	bl	8000e58 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002920:	f7fe fa9a 	bl	8000e58 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e164      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	4b26      	ldr	r3, [pc, #152]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x200>
 800293e:	e015      	b.n	800296c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002940:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_RCC_OscConfig+0x2b4>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7fe fa87 	bl	8000e58 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294e:	f7fe fa83 	bl	8000e58 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e14d      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a0 	beq.w	8002aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_OscConfig+0x2b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d121      	bne.n	80029fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_RCC_OscConfig+0x2b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_RCC_OscConfig+0x2b8>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fa49 	bl	8000e58 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e011      	b.n	80029ee <HAL_RCC_OscConfig+0x2ce>
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	42470000 	.word	0x42470000
 80029d4:	42470e80 	.word	0x42470e80
 80029d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029dc:	f7fe fa3c 	bl	8000e58 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e106      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b85      	ldr	r3, [pc, #532]	; (8002c04 <HAL_RCC_OscConfig+0x4e4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2f0>
 8002a02:	4b81      	ldr	r3, [pc, #516]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a80      	ldr	r2, [pc, #512]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	e01c      	b.n	8002a4a <HAL_RCC_OscConfig+0x32a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x312>
 8002a18:	4b7b      	ldr	r3, [pc, #492]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a7a      	ldr	r2, [pc, #488]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
 8002a24:	4b78      	ldr	r3, [pc, #480]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a77      	ldr	r2, [pc, #476]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a30:	e00b      	b.n	8002a4a <HAL_RCC_OscConfig+0x32a>
 8002a32:	4b75      	ldr	r3, [pc, #468]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a74      	ldr	r2, [pc, #464]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	4b72      	ldr	r3, [pc, #456]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a71      	ldr	r2, [pc, #452]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7fe fa01 	bl	8000e58 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe f9fd 	bl	8000e58 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0c5      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	4b65      	ldr	r3, [pc, #404]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ee      	beq.n	8002a5a <HAL_RCC_OscConfig+0x33a>
 8002a7c:	e014      	b.n	8002aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe f9eb 	bl	8000e58 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe f9e7 	bl	8000e58 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0af      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ee      	bne.n	8002a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aae:	4b56      	ldr	r3, [pc, #344]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a55      	ldr	r2, [pc, #340]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 809b 	beq.w	8002bfa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac4:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d05c      	beq.n	8002b8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d141      	bne.n	8002b5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <HAL_RCC_OscConfig+0x4ec>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe f9bb 	bl	8000e58 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe f9b7 	bl	8000e58 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e081      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af8:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	019b      	lsls	r3, r3, #6
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	4937      	ldr	r1, [pc, #220]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_RCC_OscConfig+0x4ec>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe f990 	bl	8000e58 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe f98c 	bl	8000e58 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e056      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x41c>
 8002b5a:	e04e      	b.n	8002bfa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <HAL_RCC_OscConfig+0x4ec>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe f979 	bl	8000e58 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe f975 	bl	8000e58 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e03f      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x44a>
 8002b88:	e037      	b.n	8002bfa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e032      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_RCC_OscConfig+0x4e8>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d028      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d121      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d11a      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d111      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	3b01      	subs	r3, #1
 8002be0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40007000 	.word	0x40007000
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	42470060 	.word	0x42470060

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0cc      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b68      	ldr	r3, [pc, #416]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d90c      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b65      	ldr	r3, [pc, #404]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494d      	ldr	r1, [pc, #308]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d044      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d119      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e067      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4934      	ldr	r1, [pc, #208]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7fe f8aa 	bl	8000e58 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe f8a6 	bl	8000e58 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e04f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d20c      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4916      	ldr	r1, [pc, #88]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490e      	ldr	r1, [pc, #56]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f821 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	490a      	ldr	r1, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	5ccb      	ldrb	r3, [r1, r3]
 8002daa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe f80a 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	080069e8 	.word	0x080069e8
 8002dd4:	20000004 	.word	0x20000004
 8002dd8:	20000008 	.word	0x20000008

08002ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b5b0      	push	{r4, r5, r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002de2:	2100      	movs	r1, #0
 8002de4:	6079      	str	r1, [r7, #4]
 8002de6:	2100      	movs	r1, #0
 8002de8:	60f9      	str	r1, [r7, #12]
 8002dea:	2100      	movs	r1, #0
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002dee:	2100      	movs	r1, #0
 8002df0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df2:	4952      	ldr	r1, [pc, #328]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002df4:	6889      	ldr	r1, [r1, #8]
 8002df6:	f001 010c 	and.w	r1, r1, #12
 8002dfa:	2908      	cmp	r1, #8
 8002dfc:	d00d      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x3e>
 8002dfe:	2908      	cmp	r1, #8
 8002e00:	f200 8094 	bhi.w	8002f2c <HAL_RCC_GetSysClockFreq+0x150>
 8002e04:	2900      	cmp	r1, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0x32>
 8002e08:	2904      	cmp	r1, #4
 8002e0a:	d003      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x38>
 8002e0c:	e08e      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e0e:	4b4c      	ldr	r3, [pc, #304]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x164>)
 8002e10:	60bb      	str	r3, [r7, #8]
       break;
 8002e12:	e08e      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e14:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002e16:	60bb      	str	r3, [r7, #8]
      break;
 8002e18:	e08b      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e1a:	4948      	ldr	r1, [pc, #288]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e1c:	6849      	ldr	r1, [r1, #4]
 8002e1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002e22:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e24:	4945      	ldr	r1, [pc, #276]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e26:	6849      	ldr	r1, [r1, #4]
 8002e28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002e2c:	2900      	cmp	r1, #0
 8002e2e:	d024      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e30:	4942      	ldr	r1, [pc, #264]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e32:	6849      	ldr	r1, [r1, #4]
 8002e34:	0989      	lsrs	r1, r1, #6
 8002e36:	4608      	mov	r0, r1
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002e40:	f04f 0500 	mov.w	r5, #0
 8002e44:	ea00 0204 	and.w	r2, r0, r4
 8002e48:	ea01 0305 	and.w	r3, r1, r5
 8002e4c:	493d      	ldr	r1, [pc, #244]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002e4e:	fb01 f003 	mul.w	r0, r1, r3
 8002e52:	2100      	movs	r1, #0
 8002e54:	fb01 f102 	mul.w	r1, r1, r2
 8002e58:	1844      	adds	r4, r0, r1
 8002e5a:	493a      	ldr	r1, [pc, #232]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002e5c:	fba2 0101 	umull	r0, r1, r2, r1
 8002e60:	1863      	adds	r3, r4, r1
 8002e62:	4619      	mov	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	f7fd f9b4 	bl	80001d8 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4613      	mov	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e04a      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	461a      	mov	r2, r3
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	ea02 0400 	and.w	r4, r2, r0
 8002e92:	ea03 0501 	and.w	r5, r3, r1
 8002e96:	4620      	mov	r0, r4
 8002e98:	4629      	mov	r1, r5
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	014b      	lsls	r3, r1, #5
 8002ea4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ea8:	0142      	lsls	r2, r0, #5
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	1b00      	subs	r0, r0, r4
 8002eb0:	eb61 0105 	sbc.w	r1, r1, r5
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	018b      	lsls	r3, r1, #6
 8002ebe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ec2:	0182      	lsls	r2, r0, #6
 8002ec4:	1a12      	subs	r2, r2, r0
 8002ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	00d9      	lsls	r1, r3, #3
 8002ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed8:	00d0      	lsls	r0, r2, #3
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	1912      	adds	r2, r2, r4
 8002ee0:	eb45 0303 	adc.w	r3, r5, r3
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	0299      	lsls	r1, r3, #10
 8002eee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ef2:	0290      	lsls	r0, r2, #10
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f7fd f968 	bl	80001d8 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	60bb      	str	r3, [r7, #8]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f2e:	60bb      	str	r3, [r7, #8]
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	68bb      	ldr	r3, [r7, #8]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	017d7840 	.word	0x017d7840

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000004 	.word	0x20000004

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f64:	f7ff fff0 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	080069f8 	.word	0x080069f8

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f8c:	f7ff ffdc 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0b5b      	lsrs	r3, r3, #13
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	080069f8 	.word	0x080069f8

08002fb0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e047      	b.n	8003052 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd fe18 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	; 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f831 	bl	800305c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003018:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0208 	orr.w	r2, r2, #8
 8003028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003060:	b09f      	sub	sp, #124	; 0x7c
 8003062:	af00      	add	r7, sp, #0
 8003064:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	68d9      	ldr	r1, [r3, #12]
 8003074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	ea40 0301 	orr.w	r3, r0, r1
 800307c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800307e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	431a      	orrs	r2, r3
 8003088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	431a      	orrs	r2, r3
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4313      	orrs	r3, r2
 8003094:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030a0:	f021 010c 	bic.w	r1, r1, #12
 80030a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030aa:	430b      	orrs	r3, r1
 80030ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ba:	6999      	ldr	r1, [r3, #24]
 80030bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	ea40 0301 	orr.w	r3, r0, r1
 80030c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4bc5      	ldr	r3, [pc, #788]	; (80033e0 <UART_SetConfig+0x384>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d004      	beq.n	80030da <UART_SetConfig+0x7e>
 80030d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4bc3      	ldr	r3, [pc, #780]	; (80033e4 <UART_SetConfig+0x388>)
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d103      	bne.n	80030e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030da:	f7ff ff55 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 80030de:	6778      	str	r0, [r7, #116]	; 0x74
 80030e0:	e002      	b.n	80030e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030e2:	f7ff ff3d 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 80030e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f0:	f040 80b6 	bne.w	8003260 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f6:	461c      	mov	r4, r3
 80030f8:	f04f 0500 	mov.w	r5, #0
 80030fc:	4622      	mov	r2, r4
 80030fe:	462b      	mov	r3, r5
 8003100:	1891      	adds	r1, r2, r2
 8003102:	6439      	str	r1, [r7, #64]	; 0x40
 8003104:	415b      	adcs	r3, r3
 8003106:	647b      	str	r3, [r7, #68]	; 0x44
 8003108:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800310c:	1912      	adds	r2, r2, r4
 800310e:	eb45 0303 	adc.w	r3, r5, r3
 8003112:	f04f 0000 	mov.w	r0, #0
 8003116:	f04f 0100 	mov.w	r1, #0
 800311a:	00d9      	lsls	r1, r3, #3
 800311c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003120:	00d0      	lsls	r0, r2, #3
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	1911      	adds	r1, r2, r4
 8003128:	6639      	str	r1, [r7, #96]	; 0x60
 800312a:	416b      	adcs	r3, r5
 800312c:	667b      	str	r3, [r7, #100]	; 0x64
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	1891      	adds	r1, r2, r2
 800313a:	63b9      	str	r1, [r7, #56]	; 0x38
 800313c:	415b      	adcs	r3, r3
 800313e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003144:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003148:	f7fd f846 	bl	80001d8 <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4ba5      	ldr	r3, [pc, #660]	; (80033e8 <UART_SetConfig+0x38c>)
 8003152:	fba3 2302 	umull	r2, r3, r3, r2
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	011e      	lsls	r6, r3, #4
 800315a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315c:	461c      	mov	r4, r3
 800315e:	f04f 0500 	mov.w	r5, #0
 8003162:	4622      	mov	r2, r4
 8003164:	462b      	mov	r3, r5
 8003166:	1891      	adds	r1, r2, r2
 8003168:	6339      	str	r1, [r7, #48]	; 0x30
 800316a:	415b      	adcs	r3, r3
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
 800316e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003172:	1912      	adds	r2, r2, r4
 8003174:	eb45 0303 	adc.w	r3, r5, r3
 8003178:	f04f 0000 	mov.w	r0, #0
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	00d9      	lsls	r1, r3, #3
 8003182:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003186:	00d0      	lsls	r0, r2, #3
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	1911      	adds	r1, r2, r4
 800318e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003190:	416b      	adcs	r3, r5
 8003192:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	461a      	mov	r2, r3
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80031a2:	415b      	adcs	r3, r3
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031ae:	f7fd f813 	bl	80001d8 <__aeabi_uldivmod>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <UART_SetConfig+0x38c>)
 80031b8:	fba3 1302 	umull	r1, r3, r3, r2
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	2164      	movs	r1, #100	; 0x64
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	3332      	adds	r3, #50	; 0x32
 80031ca:	4a87      	ldr	r2, [pc, #540]	; (80033e8 <UART_SetConfig+0x38c>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031d8:	441e      	add	r6, r3
 80031da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031dc:	4618      	mov	r0, r3
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	1894      	adds	r4, r2, r2
 80031e8:	623c      	str	r4, [r7, #32]
 80031ea:	415b      	adcs	r3, r3
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031f2:	1812      	adds	r2, r2, r0
 80031f4:	eb41 0303 	adc.w	r3, r1, r3
 80031f8:	f04f 0400 	mov.w	r4, #0
 80031fc:	f04f 0500 	mov.w	r5, #0
 8003200:	00dd      	lsls	r5, r3, #3
 8003202:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003206:	00d4      	lsls	r4, r2, #3
 8003208:	4622      	mov	r2, r4
 800320a:	462b      	mov	r3, r5
 800320c:	1814      	adds	r4, r2, r0
 800320e:	653c      	str	r4, [r7, #80]	; 0x50
 8003210:	414b      	adcs	r3, r1
 8003212:	657b      	str	r3, [r7, #84]	; 0x54
 8003214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	461a      	mov	r2, r3
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	1891      	adds	r1, r2, r2
 8003220:	61b9      	str	r1, [r7, #24]
 8003222:	415b      	adcs	r3, r3
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800322e:	f7fc ffd3 	bl	80001d8 <__aeabi_uldivmod>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4b6c      	ldr	r3, [pc, #432]	; (80033e8 <UART_SetConfig+0x38c>)
 8003238:	fba3 1302 	umull	r1, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	2164      	movs	r1, #100	; 0x64
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	3332      	adds	r3, #50	; 0x32
 800324a:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <UART_SetConfig+0x38c>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	f003 0207 	and.w	r2, r3, #7
 8003256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4432      	add	r2, r6
 800325c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800325e:	e0b9      	b.n	80033d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003262:	461c      	mov	r4, r3
 8003264:	f04f 0500 	mov.w	r5, #0
 8003268:	4622      	mov	r2, r4
 800326a:	462b      	mov	r3, r5
 800326c:	1891      	adds	r1, r2, r2
 800326e:	6139      	str	r1, [r7, #16]
 8003270:	415b      	adcs	r3, r3
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003278:	1912      	adds	r2, r2, r4
 800327a:	eb45 0303 	adc.w	r3, r5, r3
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	00d9      	lsls	r1, r3, #3
 8003288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800328c:	00d0      	lsls	r0, r2, #3
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	eb12 0804 	adds.w	r8, r2, r4
 8003296:	eb43 0905 	adc.w	r9, r3, r5
 800329a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4618      	mov	r0, r3
 80032a0:	f04f 0100 	mov.w	r1, #0
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	008b      	lsls	r3, r1, #2
 80032ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032b2:	0082      	lsls	r2, r0, #2
 80032b4:	4640      	mov	r0, r8
 80032b6:	4649      	mov	r1, r9
 80032b8:	f7fc ff8e 	bl	80001d8 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <UART_SetConfig+0x38c>)
 80032c2:	fba3 2302 	umull	r2, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	011e      	lsls	r6, r3, #4
 80032ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032cc:	4618      	mov	r0, r3
 80032ce:	f04f 0100 	mov.w	r1, #0
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	1894      	adds	r4, r2, r2
 80032d8:	60bc      	str	r4, [r7, #8]
 80032da:	415b      	adcs	r3, r3
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032e2:	1812      	adds	r2, r2, r0
 80032e4:	eb41 0303 	adc.w	r3, r1, r3
 80032e8:	f04f 0400 	mov.w	r4, #0
 80032ec:	f04f 0500 	mov.w	r5, #0
 80032f0:	00dd      	lsls	r5, r3, #3
 80032f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032f6:	00d4      	lsls	r4, r2, #3
 80032f8:	4622      	mov	r2, r4
 80032fa:	462b      	mov	r3, r5
 80032fc:	1814      	adds	r4, r2, r0
 80032fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003300:	414b      	adcs	r3, r1
 8003302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4618      	mov	r0, r3
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	008b      	lsls	r3, r1, #2
 8003318:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800331c:	0082      	lsls	r2, r0, #2
 800331e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003322:	f7fc ff59 	bl	80001d8 <__aeabi_uldivmod>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <UART_SetConfig+0x38c>)
 800332c:	fba3 1302 	umull	r1, r3, r3, r2
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2164      	movs	r1, #100	; 0x64
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	3332      	adds	r3, #50	; 0x32
 800333e:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <UART_SetConfig+0x38c>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800334a:	441e      	add	r6, r3
 800334c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334e:	4618      	mov	r0, r3
 8003350:	f04f 0100 	mov.w	r1, #0
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	1894      	adds	r4, r2, r2
 800335a:	603c      	str	r4, [r7, #0]
 800335c:	415b      	adcs	r3, r3
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003364:	1812      	adds	r2, r2, r0
 8003366:	eb41 0303 	adc.w	r3, r1, r3
 800336a:	f04f 0400 	mov.w	r4, #0
 800336e:	f04f 0500 	mov.w	r5, #0
 8003372:	00dd      	lsls	r5, r3, #3
 8003374:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003378:	00d4      	lsls	r4, r2, #3
 800337a:	4622      	mov	r2, r4
 800337c:	462b      	mov	r3, r5
 800337e:	eb12 0a00 	adds.w	sl, r2, r0
 8003382:	eb43 0b01 	adc.w	fp, r3, r1
 8003386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4618      	mov	r0, r3
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	008b      	lsls	r3, r1, #2
 800339a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800339e:	0082      	lsls	r2, r0, #2
 80033a0:	4650      	mov	r0, sl
 80033a2:	4659      	mov	r1, fp
 80033a4:	f7fc ff18 	bl	80001d8 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <UART_SetConfig+0x38c>)
 80033ae:	fba3 1302 	umull	r1, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2164      	movs	r1, #100	; 0x64
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	3332      	adds	r3, #50	; 0x32
 80033c0:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <UART_SetConfig+0x38c>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	f003 020f 	and.w	r2, r3, #15
 80033cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4432      	add	r2, r6
 80033d2:	609a      	str	r2, [r3, #8]
}
 80033d4:	bf00      	nop
 80033d6:	377c      	adds	r7, #124	; 0x7c
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033de:	bf00      	nop
 80033e0:	40011000 	.word	0x40011000
 80033e4:	40011400 	.word	0x40011400
 80033e8:	51eb851f 	.word	0x51eb851f

080033ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033ec:	b084      	sub	sp, #16
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	f107 001c 	add.w	r0, r7, #28
 80033fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2b01      	cmp	r3, #1
 8003402:	d122      	bne.n	800344a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800342c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f001 fb1c 	bl	8004a7c <USB_CoreReset>
 8003444:	4603      	mov	r3, r0
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e01a      	b.n	8003480 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 fb10 	bl	8004a7c <USB_CoreReset>
 800345c:	4603      	mov	r3, r0
 800345e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
 8003472:	e005      	b.n	8003480 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10b      	bne.n	800349e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f043 0206 	orr.w	r2, r3, #6
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034aa:	b004      	add	sp, #16
 80034ac:	4770      	bx	lr
	...

080034b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d165      	bne.n	8003590 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4a41      	ldr	r2, [pc, #260]	; (80035cc <USB_SetTurnaroundTime+0x11c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d906      	bls.n	80034da <USB_SetTurnaroundTime+0x2a>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a40      	ldr	r2, [pc, #256]	; (80035d0 <USB_SetTurnaroundTime+0x120>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d202      	bcs.n	80034da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034d4:	230f      	movs	r3, #15
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e062      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <USB_SetTurnaroundTime+0x120>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d306      	bcc.n	80034f0 <USB_SetTurnaroundTime+0x40>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4a3b      	ldr	r2, [pc, #236]	; (80035d4 <USB_SetTurnaroundTime+0x124>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d202      	bcs.n	80034f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034ea:	230e      	movs	r3, #14
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e057      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a38      	ldr	r2, [pc, #224]	; (80035d4 <USB_SetTurnaroundTime+0x124>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d306      	bcc.n	8003506 <USB_SetTurnaroundTime+0x56>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a37      	ldr	r2, [pc, #220]	; (80035d8 <USB_SetTurnaroundTime+0x128>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d202      	bcs.n	8003506 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003500:	230d      	movs	r3, #13
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e04c      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a33      	ldr	r2, [pc, #204]	; (80035d8 <USB_SetTurnaroundTime+0x128>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d306      	bcc.n	800351c <USB_SetTurnaroundTime+0x6c>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a32      	ldr	r2, [pc, #200]	; (80035dc <USB_SetTurnaroundTime+0x12c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d802      	bhi.n	800351c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003516:	230c      	movs	r3, #12
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e041      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <USB_SetTurnaroundTime+0x12c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d906      	bls.n	8003532 <USB_SetTurnaroundTime+0x82>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <USB_SetTurnaroundTime+0x130>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d802      	bhi.n	8003532 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800352c:	230b      	movs	r3, #11
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e036      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <USB_SetTurnaroundTime+0x130>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d906      	bls.n	8003548 <USB_SetTurnaroundTime+0x98>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <USB_SetTurnaroundTime+0x134>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d802      	bhi.n	8003548 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003542:	230a      	movs	r3, #10
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e02b      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a26      	ldr	r2, [pc, #152]	; (80035e4 <USB_SetTurnaroundTime+0x134>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d906      	bls.n	800355e <USB_SetTurnaroundTime+0xae>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <USB_SetTurnaroundTime+0x138>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d202      	bcs.n	800355e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003558:	2309      	movs	r3, #9
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e020      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <USB_SetTurnaroundTime+0x138>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d306      	bcc.n	8003574 <USB_SetTurnaroundTime+0xc4>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4a20      	ldr	r2, [pc, #128]	; (80035ec <USB_SetTurnaroundTime+0x13c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d802      	bhi.n	8003574 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800356e:	2308      	movs	r3, #8
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e015      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <USB_SetTurnaroundTime+0x13c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d906      	bls.n	800358a <USB_SetTurnaroundTime+0xda>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <USB_SetTurnaroundTime+0x140>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d202      	bcs.n	800358a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003584:	2307      	movs	r3, #7
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e00a      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800358a:	2306      	movs	r3, #6
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e007      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003596:	2309      	movs	r3, #9
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e001      	b.n	80035a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800359c:	2309      	movs	r3, #9
 800359e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	029b      	lsls	r3, r3, #10
 80035b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	00d8acbf 	.word	0x00d8acbf
 80035d0:	00e4e1c0 	.word	0x00e4e1c0
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	01067380 	.word	0x01067380
 80035dc:	011a499f 	.word	0x011a499f
 80035e0:	01312cff 	.word	0x01312cff
 80035e4:	014ca43f 	.word	0x014ca43f
 80035e8:	016e3600 	.word	0x016e3600
 80035ec:	01a6ab1f 	.word	0x01a6ab1f
 80035f0:	01e84800 	.word	0x01e84800

080035f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0201 	bic.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d115      	bne.n	8003686 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003666:	2001      	movs	r0, #1
 8003668:	f7fd fc02 	bl	8000e70 <HAL_Delay>
      ms++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3301      	adds	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f001 f972 	bl	800495c <USB_GetMode>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d01e      	beq.n	80036bc <USB_SetCurrentMode+0x84>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b31      	cmp	r3, #49	; 0x31
 8003682:	d9f0      	bls.n	8003666 <USB_SetCurrentMode+0x2e>
 8003684:	e01a      	b.n	80036bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d115      	bne.n	80036b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003698:	2001      	movs	r0, #1
 800369a:	f7fd fbe9 	bl	8000e70 <HAL_Delay>
      ms++;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3301      	adds	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f001 f959 	bl	800495c <USB_GetMode>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <USB_SetCurrentMode+0x84>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b31      	cmp	r3, #49	; 0x31
 80036b4:	d9f0      	bls.n	8003698 <USB_SetCurrentMode+0x60>
 80036b6:	e001      	b.n	80036bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e005      	b.n	80036c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b32      	cmp	r3, #50	; 0x32
 80036c0:	d101      	bne.n	80036c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036d0:	b084      	sub	sp, #16
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	e009      	b.n	8003704 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	3340      	adds	r3, #64	; 0x40
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	2200      	movs	r2, #0
 80036fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	3301      	adds	r3, #1
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b0e      	cmp	r3, #14
 8003708:	d9f2      	bls.n	80036f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d11c      	bne.n	800374a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800371e:	f043 0302 	orr.w	r3, r3, #2
 8003722:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
 8003748:	e00b      	b.n	8003762 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003768:	461a      	mov	r2, r3
 800376a:	2300      	movs	r3, #0
 800376c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003774:	4619      	mov	r1, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	461a      	mov	r2, r3
 800377e:	680b      	ldr	r3, [r1, #0]
 8003780:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	2b01      	cmp	r3, #1
 8003786:	d10c      	bne.n	80037a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d104      	bne.n	8003798 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800378e:	2100      	movs	r1, #0
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f945 	bl	8003a20 <USB_SetDevSpeed>
 8003796:	e008      	b.n	80037aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003798:	2101      	movs	r1, #1
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f940 	bl	8003a20 <USB_SetDevSpeed>
 80037a0:	e003      	b.n	80037aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037a2:	2103      	movs	r1, #3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f93b 	bl	8003a20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037aa:	2110      	movs	r1, #16
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8f3 	bl	8003998 <USB_FlushTxFifo>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f90f 	bl	80039e0 <USB_FlushRxFifo>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d2:	461a      	mov	r2, r3
 80037d4:	2300      	movs	r3, #0
 80037d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037de:	461a      	mov	r2, r3
 80037e0:	2300      	movs	r3, #0
 80037e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	461a      	mov	r2, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	e043      	b.n	800387e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800380c:	d118      	bne.n	8003840 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003820:	461a      	mov	r2, r3
 8003822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e013      	b.n	8003852 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	461a      	mov	r2, r3
 8003838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e008      	b.n	8003852 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384c:	461a      	mov	r2, r3
 800384e:	2300      	movs	r3, #0
 8003850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385e:	461a      	mov	r2, r3
 8003860:	2300      	movs	r3, #0
 8003862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003870:	461a      	mov	r2, r3
 8003872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	3301      	adds	r3, #1
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	429a      	cmp	r2, r3
 8003884:	d3b7      	bcc.n	80037f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e043      	b.n	8003914 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800389e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038a2:	d118      	bne.n	80038d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b6:	461a      	mov	r2, r3
 80038b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e013      	b.n	80038e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	e008      	b.n	80038e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	2300      	movs	r3, #0
 80038e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	2300      	movs	r3, #0
 80038f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003906:	461a      	mov	r2, r3
 8003908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800390c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	3301      	adds	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	d3b7      	bcc.n	800388c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800392a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800392e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800393c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f043 0210 	orr.w	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699a      	ldr	r2, [r3, #24]
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <USB_DevInit+0x2c4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f043 0208 	orr.w	r2, r3, #8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800396e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003984:	7dfb      	ldrb	r3, [r7, #23]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003990:	b004      	add	sp, #16
 8003992:	4770      	bx	lr
 8003994:	803c3800 	.word	0x803c3800

08003998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3301      	adds	r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	4a08      	ldr	r2, [pc, #32]	; (80039dc <USB_FlushTxFifo+0x44>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e006      	b.n	80039d0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d0f1      	beq.n	80039b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	00030d40 	.word	0x00030d40

080039e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2210      	movs	r2, #16
 80039f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3301      	adds	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <USB_FlushRxFifo+0x3c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e006      	b.n	8003a10 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d0f1      	beq.n	80039f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	00030d40 	.word	0x00030d40

08003a20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b087      	sub	sp, #28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0306 	and.w	r3, r3, #6
 8003a6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]
 8003a76:	e00a      	b.n	8003a8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d002      	beq.n	8003a84 <USB_GetDevSpeed+0x32>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b06      	cmp	r3, #6
 8003a82:	d102      	bne.n	8003a8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a84:	2302      	movs	r3, #2
 8003a86:	75fb      	strb	r3, [r7, #23]
 8003a88:	e001      	b.n	8003a8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a8a:	230f      	movs	r3, #15
 8003a8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d13a      	bne.n	8003b2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	68f9      	ldr	r1, [r7, #12]
 8003ad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d155      	bne.n	8003b9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	78db      	ldrb	r3, [r3, #3]
 8003b0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	059b      	lsls	r3, r3, #22
 8003b12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b14:	4313      	orrs	r3, r2
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	0151      	lsls	r1, r2, #5
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	440a      	add	r2, r1
 8003b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e036      	b.n	8003b9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	68f9      	ldr	r1, [r7, #12]
 8003b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11a      	bne.n	8003b9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	78db      	ldrb	r3, [r3, #3]
 8003b80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b82:	430b      	orrs	r3, r1
 8003b84:	4313      	orrs	r3, r2
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	0151      	lsls	r1, r2, #5
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	440a      	add	r2, r1
 8003b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	785b      	ldrb	r3, [r3, #1]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d161      	bne.n	8003c8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bde:	d11f      	bne.n	8003c20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	0151      	lsls	r1, r2, #5
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	0151      	lsls	r1, r2, #5
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	440a      	add	r2, r1
 8003c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	2101      	movs	r1, #1
 8003c32:	fa01 f303 	lsl.w	r3, r1, r3
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	68f9      	ldr	r1, [r7, #12]
 8003c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c40:	4013      	ands	r3, r2
 8003c42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	2101      	movs	r1, #1
 8003c56:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c64:	4013      	ands	r3, r2
 8003c66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	0159      	lsls	r1, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	440b      	add	r3, r1
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c82:	4619      	mov	r1, r3
 8003c84:	4b35      	ldr	r3, [pc, #212]	; (8003d5c <USB_DeactivateEndpoint+0x1b0>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
 8003c8a:	e060      	b.n	8003d4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ca2:	d11f      	bne.n	8003ce4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	0151      	lsls	r1, r2, #5
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	440a      	add	r2, r1
 8003cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ce2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d04:	4013      	ands	r3, r2
 8003d06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	43db      	mvns	r3, r3
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	0159      	lsls	r1, r3, #5
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	440b      	add	r3, r1
 8003d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d46:	4619      	mov	r1, r3
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <USB_DeactivateEndpoint+0x1b4>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	ec337800 	.word	0xec337800
 8003d60:	eff37800 	.word	0xeff37800

08003d64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	; 0x28
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	f040 815c 	bne.w	800403e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d132      	bne.n	8003df4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003db0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	0151      	lsls	r1, r2, #5
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	440a      	add	r2, r1
 8003de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dec:	0cdb      	lsrs	r3, r3, #19
 8003dee:	04db      	lsls	r3, r3, #19
 8003df0:	6113      	str	r3, [r2, #16]
 8003df2:	e074      	b.n	8003ede <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0e:	0cdb      	lsrs	r3, r3, #19
 8003e10:	04db      	lsls	r3, r3, #19
 8003e12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	0151      	lsls	r1, r2, #5
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	440a      	add	r2, r1
 8003e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6959      	ldr	r1, [r3, #20]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	440b      	add	r3, r1
 8003e50:	1e59      	subs	r1, r3, #1
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e5c:	4b9d      	ldr	r3, [pc, #628]	; (80040d4 <USB_EPStartXfer+0x370>)
 8003e5e:	400b      	ands	r3, r1
 8003e60:	69b9      	ldr	r1, [r7, #24]
 8003e62:	0148      	lsls	r0, r1, #5
 8003e64:	69f9      	ldr	r1, [r7, #28]
 8003e66:	4401      	add	r1, r0
 8003e68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e86:	69b9      	ldr	r1, [r7, #24]
 8003e88:	0148      	lsls	r0, r1, #5
 8003e8a:	69f9      	ldr	r1, [r7, #28]
 8003e8c:	4401      	add	r1, r0
 8003e8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e92:	4313      	orrs	r3, r2
 8003e94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	78db      	ldrb	r3, [r3, #3]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d11f      	bne.n	8003ede <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	0151      	lsls	r1, r2, #5
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	440a      	add	r2, r1
 8003eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ebc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	0151      	lsls	r1, r2, #5
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	440a      	add	r2, r1
 8003ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003edc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d14b      	bne.n	8003f7c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	78db      	ldrb	r3, [r3, #3]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d128      	bne.n	8003f5a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d110      	bne.n	8003f3a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	0151      	lsls	r1, r2, #5
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	440a      	add	r2, r1
 8003f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	e00f      	b.n	8003f5a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e12f      	b.n	80041dc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	0151      	lsls	r1, r2, #5
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	440a      	add	r2, r1
 8003f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	78db      	ldrb	r3, [r3, #3]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d015      	beq.n	8003fd0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8117 	beq.w	80041dc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	69f9      	ldr	r1, [r7, #28]
 8003fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	634b      	str	r3, [r1, #52]	; 0x34
 8003fce:	e105      	b.n	80041dc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d110      	bne.n	8004002 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e00f      	b.n	8004022 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	68d9      	ldr	r1, [r3, #12]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	b298      	uxth	r0, r3
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4603      	mov	r3, r0
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fa2b 	bl	8004492 <USB_WritePacket>
 800403c:	e0ce      	b.n	80041dc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004058:	0cdb      	lsrs	r3, r3, #19
 800405a:	04db      	lsls	r3, r3, #19
 800405c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	0151      	lsls	r1, r2, #5
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	440a      	add	r2, r1
 8004074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004078:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800407c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004080:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d126      	bne.n	80040d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	0148      	lsls	r0, r1, #5
 80040a4:	69f9      	ldr	r1, [r7, #28]
 80040a6:	4401      	add	r1, r0
 80040a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040ac:	4313      	orrs	r3, r2
 80040ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040ce:	6113      	str	r3, [r2, #16]
 80040d0:	e036      	b.n	8004140 <USB_EPStartXfer+0x3dc>
 80040d2:	bf00      	nop
 80040d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4413      	add	r3, r2
 80040e2:	1e5a      	subs	r2, r3, #1
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	8afb      	ldrh	r3, [r7, #22]
 80040fe:	04d9      	lsls	r1, r3, #19
 8004100:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <USB_EPStartXfer+0x484>)
 8004102:	400b      	ands	r3, r1
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	0148      	lsls	r0, r1, #5
 8004108:	69f9      	ldr	r1, [r7, #28]
 800410a:	4401      	add	r1, r0
 800410c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	8af9      	ldrh	r1, [r7, #22]
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004130:	69b9      	ldr	r1, [r7, #24]
 8004132:	0148      	lsls	r0, r1, #5
 8004134:	69f9      	ldr	r1, [r7, #28]
 8004136:	4401      	add	r1, r0
 8004138:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800413c:	4313      	orrs	r3, r2
 800413e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10d      	bne.n	8004162 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	68d9      	ldr	r1, [r3, #12]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	460a      	mov	r2, r1
 8004160:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	78db      	ldrb	r3, [r3, #3]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d128      	bne.n	80041bc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d110      	bne.n	800419c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004194:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e00f      	b.n	80041bc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	1ff80000 	.word	0x1ff80000

080041ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 80cd 	bne.w	80043a8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d132      	bne.n	800427c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004230:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004234:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004238:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004258:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004274:	0cdb      	lsrs	r3, r3, #19
 8004276:	04db      	lsls	r3, r3, #19
 8004278:	6113      	str	r3, [r2, #16]
 800427a:	e04e      	b.n	800431a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004296:	0cdb      	lsrs	r3, r3, #19
 8004298:	04db      	lsls	r3, r3, #19
 800429a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d903      	bls.n	80042d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430a:	6939      	ldr	r1, [r7, #16]
 800430c:	0148      	lsls	r0, r1, #5
 800430e:	6979      	ldr	r1, [r7, #20]
 8004310:	4401      	add	r1, r0
 8004312:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004316:	4313      	orrs	r3, r2
 8004318:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d11e      	bne.n	800435e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	440a      	add	r2, r1
 8004352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	e092      	b.n	8004484 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004378:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800437c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d07e      	beq.n	8004484 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	6979      	ldr	r1, [r7, #20]
 800439e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a2:	4313      	orrs	r3, r2
 80043a4:	634b      	str	r3, [r1, #52]	; 0x34
 80043a6:	e06d      	b.n	8004484 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c2:	0cdb      	lsrs	r3, r3, #19
 80043c4:	04db      	lsls	r3, r3, #19
 80043c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043ea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800441a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004432:	6939      	ldr	r1, [r7, #16]
 8004434:	0148      	lsls	r0, r1, #5
 8004436:	6979      	ldr	r1, [r7, #20]
 8004438:	4401      	add	r1, r0
 800443a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d10d      	bne.n	8004464 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	68d9      	ldr	r1, [r3, #12]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	460a      	mov	r2, r1
 8004462:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800447e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004482:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004492:	b480      	push	{r7}
 8004494:	b089      	sub	sp, #36	; 0x24
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	4611      	mov	r1, r2
 800449e:	461a      	mov	r2, r3
 80044a0:	460b      	mov	r3, r1
 80044a2:	71fb      	strb	r3, [r7, #7]
 80044a4:	4613      	mov	r3, r2
 80044a6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80044b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d123      	bne.n	8004500 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044b8:	88bb      	ldrh	r3, [r7, #4]
 80044ba:	3303      	adds	r3, #3
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e018      	b.n	80044f8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	031a      	lsls	r2, r3, #12
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d2:	461a      	mov	r2, r3
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3301      	adds	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	3301      	adds	r3, #1
 80044e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3301      	adds	r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	3301      	adds	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	3301      	adds	r3, #1
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d3e2      	bcc.n	80044c6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3724      	adds	r7, #36	; 0x24
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800450e:	b480      	push	{r7}
 8004510:	b08b      	sub	sp, #44	; 0x2c
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	4613      	mov	r3, r2
 800451a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	b29b      	uxth	r3, r3
 800452a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004534:	2300      	movs	r3, #0
 8004536:	623b      	str	r3, [r7, #32]
 8004538:	e014      	b.n	8004564 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	601a      	str	r2, [r3, #0]
    pDest++;
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	3301      	adds	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	3301      	adds	r3, #1
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	3301      	adds	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	3301      	adds	r3, #1
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	3301      	adds	r3, #1
 8004562:	623b      	str	r3, [r7, #32]
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	429a      	cmp	r2, r3
 800456a:	d3e6      	bcc.n	800453a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800456c:	8bfb      	ldrh	r3, [r7, #30]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01e      	beq.n	80045b0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457c:	461a      	mov	r2, r3
 800457e:	f107 0310 	add.w	r3, r7, #16
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	fa22 f303 	lsr.w	r3, r2, r3
 8004592:	b2da      	uxtb	r2, r3
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	701a      	strb	r2, [r3, #0]
      i++;
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	3301      	adds	r3, #1
 800459c:	623b      	str	r3, [r7, #32]
      pDest++;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	3301      	adds	r3, #1
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80045a4:	8bfb      	ldrh	r3, [r7, #30]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80045aa:	8bfb      	ldrh	r3, [r7, #30]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ea      	bne.n	8004586 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	372c      	adds	r7, #44	; 0x2c
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	785b      	ldrb	r3, [r3, #1]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d12c      	bne.n	8004634 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db12      	blt.n	8004612 <USB_EPSetStall+0x54>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00f      	beq.n	8004612 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004610:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e02b      	b.n	800468c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	db12      	blt.n	800466c <USB_EPSetStall+0xae>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00f      	beq.n	800466c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	440a      	add	r2, r1
 8004662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004666:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800466a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	0151      	lsls	r1, r2, #5
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	440a      	add	r2, r1
 8004682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004686:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800468a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d128      	bne.n	8004708 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	78db      	ldrb	r3, [r3, #3]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d003      	beq.n	80046e6 <USB_EPClearStall+0x4c>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	78db      	ldrb	r3, [r3, #3]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d138      	bne.n	8004758 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e027      	b.n	8004758 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004726:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	78db      	ldrb	r3, [r3, #3]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d003      	beq.n	8004738 <USB_EPClearStall+0x9e>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	78db      	ldrb	r3, [r3, #3]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d10f      	bne.n	8004758 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004756:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004784:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004788:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a0:	4313      	orrs	r3, r2
 80047a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047cc:	f023 0303 	bic.w	r3, r3, #3
 80047d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e0:	f023 0302 	bic.w	r3, r3, #2
 80047e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800480e:	f023 0303 	bic.w	r3, r3, #3
 8004812:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004822:	f043 0302 	orr.w	r3, r3, #2
 8004826:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4013      	ands	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800484e:	68fb      	ldr	r3, [r7, #12]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	0c1b      	lsrs	r3, r3, #16
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4013      	ands	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	b29b      	uxth	r3, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048f2:	68bb      	ldr	r3, [r7, #8]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004922:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	01db      	lsls	r3, r3, #7
 8004932:	b2db      	uxtb	r3, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4013      	ands	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800494e:	68bb      	ldr	r3, [r7, #8]
}
 8004950:	4618      	mov	r0, r3
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0301 	and.w	r3, r3, #1
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004992:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004996:	f023 0307 	bic.w	r3, r3, #7
 800499a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	460b      	mov	r3, r1
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	333c      	adds	r3, #60	; 0x3c
 80049d6:	3304      	adds	r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <USB_EP0_OutStart+0xb8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d90a      	bls.n	80049fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f4:	d101      	bne.n	80049fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e037      	b.n	8004a6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	461a      	mov	r2, r3
 8004a02:	2300      	movs	r3, #0
 8004a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a28:	f043 0318 	orr.w	r3, r3, #24
 8004a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a42:	7afb      	ldrb	r3, [r7, #11]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10f      	bne.n	8004a68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	4f54300a 	.word	0x4f54300a

08004a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <USB_CoreReset+0x60>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e01a      	b.n	8004ace <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	daf3      	bge.n	8004a88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f043 0201 	orr.w	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	4a09      	ldr	r2, [pc, #36]	; (8004adc <USB_CoreReset+0x60>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e006      	b.n	8004ace <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d0f1      	beq.n	8004ab0 <USB_CoreReset+0x34>

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	00030d40 	.word	0x00030d40

08004ae0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004aec:	2010      	movs	r0, #16
 8004aee:	f001 fedb 	bl	80068a8 <USBD_static_malloc>
 8004af2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d105      	bne.n	8004b06 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004b02:	2302      	movs	r3, #2
 8004b04:	e01b      	b.n	8004b3e <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	7c1b      	ldrb	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2207      	movs	r2, #7
 8004b1a:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004b1c:	e002      	b.n	8004b24 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	220a      	movs	r2, #10
 8004b22:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004b24:	2304      	movs	r3, #4
 8004b26:	2203      	movs	r2, #3
 8004b28:	2181      	movs	r1, #129	; 0x81
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f001 fdab 	bl	8006686 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004b52:	2181      	movs	r1, #129	; 0x81
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f001 fdbc 	bl	80066d2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b76:	4618      	mov	r0, r3
 8004b78:	f001 fea4 	bl	80068c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ba0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e0e8      	b.n	8004d86 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d046      	beq.n	8004c4e <USBD_HID_Setup+0xbe>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	f040 80d8 	bne.w	8004d76 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	3b02      	subs	r3, #2
 8004bcc:	2b09      	cmp	r3, #9
 8004bce:	d836      	bhi.n	8004c3e <USBD_HID_Setup+0xae>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <USBD_HID_Setup+0x48>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004c2f 	.word	0x08004c2f
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c3f 	.word	0x08004c3f
 8004be4:	08004c3f 	.word	0x08004c3f
 8004be8:	08004c3f 	.word	0x08004c3f
 8004bec:	08004c3f 	.word	0x08004c3f
 8004bf0:	08004c3f 	.word	0x08004c3f
 8004bf4:	08004c3f 	.word	0x08004c3f
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c01 	.word	0x08004c01
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	885b      	ldrh	r3, [r3, #2]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	601a      	str	r2, [r3, #0]
          break;
 8004c0c:	e01e      	b.n	8004c4c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f001 f9fa 	bl	800600e <USBD_CtlSendData>
          break;
 8004c1a:	e017      	b.n	8004c4c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	885b      	ldrh	r3, [r3, #2]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	605a      	str	r2, [r3, #4]
          break;
 8004c2c:	e00e      	b.n	8004c4c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3304      	adds	r3, #4
 8004c32:	2201      	movs	r2, #1
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f001 f9e9 	bl	800600e <USBD_CtlSendData>
          break;
 8004c3c:	e006      	b.n	8004c4c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 f973 	bl	8005f2c <USBD_CtlError>
          ret = USBD_FAIL;
 8004c46:	2303      	movs	r3, #3
 8004c48:	75fb      	strb	r3, [r7, #23]
          break;
 8004c4a:	bf00      	nop
      }
      break;
 8004c4c:	e09a      	b.n	8004d84 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	2b0b      	cmp	r3, #11
 8004c54:	f200 8086 	bhi.w	8004d64 <USBD_HID_Setup+0x1d4>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <USBD_HID_Setup+0xd0>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c91 	.word	0x08004c91
 8004c64:	08004d73 	.word	0x08004d73
 8004c68:	08004d65 	.word	0x08004d65
 8004c6c:	08004d65 	.word	0x08004d65
 8004c70:	08004d65 	.word	0x08004d65
 8004c74:	08004d65 	.word	0x08004d65
 8004c78:	08004cbb 	.word	0x08004cbb
 8004c7c:	08004d65 	.word	0x08004d65
 8004c80:	08004d65 	.word	0x08004d65
 8004c84:	08004d65 	.word	0x08004d65
 8004c88:	08004d13 	.word	0x08004d13
 8004c8c:	08004d3d 	.word	0x08004d3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d107      	bne.n	8004cac <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c9c:	f107 030a 	add.w	r3, r7, #10
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 f9b2 	bl	800600e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004caa:	e063      	b.n	8004d74 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f001 f93c 	bl	8005f2c <USBD_CtlError>
            ret = USBD_FAIL;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	75fb      	strb	r3, [r7, #23]
          break;
 8004cb8:	e05c      	b.n	8004d74 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	885b      	ldrh	r3, [r3, #2]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b22      	cmp	r3, #34	; 0x22
 8004cc4:	d108      	bne.n	8004cd8 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	88db      	ldrh	r3, [r3, #6]
 8004cca:	2b4a      	cmp	r3, #74	; 0x4a
 8004ccc:	bf28      	it	cs
 8004cce:	234a      	movcs	r3, #74	; 0x4a
 8004cd0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004cd2:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <USBD_HID_Setup+0x200>)
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	e015      	b.n	8004d04 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	885b      	ldrh	r3, [r3, #2]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b21      	cmp	r3, #33	; 0x21
 8004ce2:	d108      	bne.n	8004cf6 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8004ce4:	4b2b      	ldr	r3, [pc, #172]	; (8004d94 <USBD_HID_Setup+0x204>)
 8004ce6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	88db      	ldrh	r3, [r3, #6]
 8004cec:	2b09      	cmp	r3, #9
 8004cee:	bf28      	it	cs
 8004cf0:	2309      	movcs	r3, #9
 8004cf2:	82bb      	strh	r3, [r7, #20]
 8004cf4:	e006      	b.n	8004d04 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f001 f917 	bl	8005f2c <USBD_CtlError>
            ret = USBD_FAIL;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	75fb      	strb	r3, [r7, #23]
            break;
 8004d02:	e037      	b.n	8004d74 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d04:	8abb      	ldrh	r3, [r7, #20]
 8004d06:	461a      	mov	r2, r3
 8004d08:	6939      	ldr	r1, [r7, #16]
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 f97f 	bl	800600e <USBD_CtlSendData>
          break;
 8004d10:	e030      	b.n	8004d74 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d107      	bne.n	8004d2e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3308      	adds	r3, #8
 8004d22:	2201      	movs	r2, #1
 8004d24:	4619      	mov	r1, r3
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f001 f971 	bl	800600e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d2c:	e022      	b.n	8004d74 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 f8fb 	bl	8005f2c <USBD_CtlError>
            ret = USBD_FAIL;
 8004d36:	2303      	movs	r3, #3
 8004d38:	75fb      	strb	r3, [r7, #23]
          break;
 8004d3a:	e01b      	b.n	8004d74 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d106      	bne.n	8004d56 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	885b      	ldrh	r3, [r3, #2]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d54:	e00e      	b.n	8004d74 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f001 f8e7 	bl	8005f2c <USBD_CtlError>
            ret = USBD_FAIL;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	75fb      	strb	r3, [r7, #23]
          break;
 8004d62:	e007      	b.n	8004d74 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f001 f8e0 	bl	8005f2c <USBD_CtlError>
          ret = USBD_FAIL;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	75fb      	strb	r3, [r7, #23]
          break;
 8004d70:	e000      	b.n	8004d74 <USBD_HID_Setup+0x1e4>
          break;
 8004d72:	bf00      	nop
      }
      break;
 8004d74:	e006      	b.n	8004d84 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8004d76:	6839      	ldr	r1, [r7, #0]
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f001 f8d7 	bl	8005f2c <USBD_CtlError>
      ret = USBD_FAIL;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	75fb      	strb	r3, [r7, #23]
      break;
 8004d82:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	200000cc 	.word	0x200000cc
 8004d94:	200000b4 	.word	0x200000b4

08004d98 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2222      	movs	r2, #34	; 0x22
 8004da4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004da6:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000048 	.word	0x20000048

08004db8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2222      	movs	r2, #34	; 0x22
 8004dc4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004dc6:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	2000006c 	.word	0x2000006c

08004dd8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2222      	movs	r2, #34	; 0x22
 8004de4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004de6:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	20000090 	.word	0x20000090

08004df8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	220a      	movs	r2, #10
 8004e28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004e2a:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	200000c0 	.word	0x200000c0

08004e3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e01f      	b.n	8004e94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	79fa      	ldrb	r2, [r7, #7]
 8004e86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f001 fb95 	bl	80065b8 <USBD_LL_Init>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e016      	b.n	8004ee2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f107 020e 	add.w	r2, r7, #14
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4798      	blx	r3
 8004ed8:	4602      	mov	r2, r0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f001 fbac 	bl	8006650 <USBD_LL_Start>
 8004ef8:	4603      	mov	r3, r0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f24:	2303      	movs	r3, #3
 8004f26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	4611      	mov	r1, r2
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
  }

  return USBD_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 ff90 	bl	8005eb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d01a      	beq.n	8004ff2 <USBD_LL_SetupStage+0x72>
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d822      	bhi.n	8005006 <USBD_LL_SetupStage+0x86>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <USBD_LL_SetupStage+0x4a>
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d00a      	beq.n	8004fde <USBD_LL_SetupStage+0x5e>
 8004fc8:	e01d      	b.n	8005006 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa62 	bl	800549c <USBD_StdDevReq>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
      break;
 8004fdc:	e020      	b.n	8005020 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fac6 	bl	8005578 <USBD_StdItfReq>
 8004fec:	4603      	mov	r3, r0
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e016      	b.n	8005020 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fb05 	bl	800560a <USBD_StdEPReq>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
      break;
 8005004:	e00c      	b.n	8005020 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800500c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005010:	b2db      	uxtb	r3, r3
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fb7b 	bl	8006710 <USBD_LL_StallEP>
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]
      break;
 800501e:	bf00      	nop
  }

  return ret;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	460b      	mov	r3, r1
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005038:	7afb      	ldrb	r3, [r7, #11]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d138      	bne.n	80050b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005044:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800504c:	2b03      	cmp	r3, #3
 800504e:	d14a      	bne.n	80050e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	429a      	cmp	r2, r3
 800505a:	d913      	bls.n	8005084 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	1ad2      	subs	r2, r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	4293      	cmp	r3, r2
 8005074:	bf28      	it	cs
 8005076:	4613      	movcs	r3, r2
 8005078:	461a      	mov	r2, r3
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fff2 	bl	8006066 <USBD_CtlContinueRx>
 8005082:	e030      	b.n	80050e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b03      	cmp	r3, #3
 800508e:	d10b      	bne.n	80050a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 ffed 	bl	8006088 <USBD_CtlSendStatus>
 80050ae:	e01a      	b.n	80050e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d114      	bne.n	80050e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	7afa      	ldrb	r2, [r7, #11]
 80050d2:	4611      	mov	r1, r2
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	4798      	blx	r3
 80050d8:	4603      	mov	r3, r0
 80050da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	e000      	b.n	80050e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	460b      	mov	r3, r1
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80050fe:	7afb      	ldrb	r3, [r7, #11]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d16b      	bne.n	80051dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3314      	adds	r3, #20
 8005108:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005110:	2b02      	cmp	r3, #2
 8005112:	d156      	bne.n	80051c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	429a      	cmp	r2, r3
 800511e:	d914      	bls.n	800514a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	1ad2      	subs	r2, r2, r3
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	461a      	mov	r2, r3
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 ff84 	bl	8006044 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800513c:	2300      	movs	r3, #0
 800513e:	2200      	movs	r2, #0
 8005140:	2100      	movs	r1, #0
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f001 fb8e 	bl	8006864 <USBD_LL_PrepareReceive>
 8005148:	e03b      	b.n	80051c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d11c      	bne.n	8005190 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800515e:	429a      	cmp	r2, r3
 8005160:	d316      	bcc.n	8005190 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800516c:	429a      	cmp	r2, r3
 800516e:	d20f      	bcs.n	8005190 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005170:	2200      	movs	r2, #0
 8005172:	2100      	movs	r1, #0
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 ff65 	bl	8006044 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005182:	2300      	movs	r3, #0
 8005184:	2200      	movs	r2, #0
 8005186:	2100      	movs	r1, #0
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f001 fb6b 	bl	8006864 <USBD_LL_PrepareReceive>
 800518e:	e018      	b.n	80051c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b03      	cmp	r3, #3
 800519a:	d10b      	bne.n	80051b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80051b4:	2180      	movs	r1, #128	; 0x80
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f001 faaa 	bl	8006710 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 ff76 	bl	80060ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d122      	bne.n	8005212 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff fe98 	bl	8004f02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051da:	e01a      	b.n	8005212 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d114      	bne.n	8005212 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00e      	beq.n	8005212 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	7afa      	ldrb	r2, [r7, #11]
 80051fe:	4611      	mov	r1, r2
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	4798      	blx	r3
 8005204:	4603      	mov	r3, r0
 8005206:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	e000      	b.n	8005214 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800524c:	2303      	movs	r3, #3
 800524e:	e02f      	b.n	80052b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00f      	beq.n	800527a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6852      	ldr	r2, [r2, #4]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	4611      	mov	r1, r2
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800527a:	2340      	movs	r3, #64	; 0x40
 800527c:	2200      	movs	r2, #0
 800527e:	2100      	movs	r1, #0
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 fa00 	bl	8006686 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2240      	movs	r2, #64	; 0x40
 8005292:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005296:	2340      	movs	r3, #64	; 0x40
 8005298:	2200      	movs	r2, #0
 800529a:	2180      	movs	r1, #128	; 0x80
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 f9f2 	bl	8006686 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2240      	movs	r2, #64	; 0x40
 80052ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b04      	cmp	r3, #4
 8005316:	d106      	bne.n	8005326 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800531e:	b2da      	uxtb	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005346:	2303      	movs	r3, #3
 8005348:	e012      	b.n	8005370 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b03      	cmp	r3, #3
 8005354:	d10b      	bne.n	800536e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800538e:	2303      	movs	r3, #3
 8005390:	e014      	b.n	80053bc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b03      	cmp	r3, #3
 800539c:	d10d      	bne.n	80053ba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	4611      	mov	r1, r2
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80053da:	2303      	movs	r3, #3
 80053dc:	e014      	b.n	8005408 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d10d      	bne.n	8005406 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	4611      	mov	r1, r2
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d009      	beq.n	8005454 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6852      	ldr	r2, [r2, #4]
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	4611      	mov	r1, r2
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
  }

  return USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	3301      	adds	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800547c:	8a3b      	ldrh	r3, [r7, #16]
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	b21a      	sxth	r2, r3
 8005482:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005486:	4313      	orrs	r3, r2
 8005488:	b21b      	sxth	r3, r3
 800548a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800548c:	89fb      	ldrh	r3, [r7, #14]
}
 800548e:	4618      	mov	r0, r3
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d005      	beq.n	80054c2 <USBD_StdDevReq+0x26>
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d853      	bhi.n	8005562 <USBD_StdDevReq+0xc6>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <USBD_StdDevReq+0x3a>
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d14f      	bne.n	8005562 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	4798      	blx	r3
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]
      break;
 80054d4:	e04a      	b.n	800556c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	2b09      	cmp	r3, #9
 80054dc:	d83b      	bhi.n	8005556 <USBD_StdDevReq+0xba>
 80054de:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <USBD_StdDevReq+0x48>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	08005539 	.word	0x08005539
 80054e8:	0800554d 	.word	0x0800554d
 80054ec:	08005557 	.word	0x08005557
 80054f0:	08005543 	.word	0x08005543
 80054f4:	08005557 	.word	0x08005557
 80054f8:	08005517 	.word	0x08005517
 80054fc:	0800550d 	.word	0x0800550d
 8005500:	08005557 	.word	0x08005557
 8005504:	0800552f 	.word	0x0800552f
 8005508:	08005521 	.word	0x08005521
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f9de 	bl	80058d0 <USBD_GetDescriptor>
          break;
 8005514:	e024      	b.n	8005560 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fb43 	bl	8005ba4 <USBD_SetAddress>
          break;
 800551e:	e01f      	b.n	8005560 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fb82 	bl	8005c2c <USBD_SetConfig>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
          break;
 800552c:	e018      	b.n	8005560 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fc21 	bl	8005d78 <USBD_GetConfig>
          break;
 8005536:	e013      	b.n	8005560 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fc52 	bl	8005de4 <USBD_GetStatus>
          break;
 8005540:	e00e      	b.n	8005560 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fc81 	bl	8005e4c <USBD_SetFeature>
          break;
 800554a:	e009      	b.n	8005560 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fc90 	bl	8005e74 <USBD_ClrFeature>
          break;
 8005554:	e004      	b.n	8005560 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fce7 	bl	8005f2c <USBD_CtlError>
          break;
 800555e:	bf00      	nop
      }
      break;
 8005560:	e004      	b.n	800556c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fce1 	bl	8005f2c <USBD_CtlError>
      break;
 800556a:	bf00      	nop
  }

  return ret;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop

08005578 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d005      	beq.n	800559e <USBD_StdItfReq+0x26>
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d82f      	bhi.n	80055f6 <USBD_StdItfReq+0x7e>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <USBD_StdItfReq+0x26>
 800559a:	2b20      	cmp	r3, #32
 800559c:	d12b      	bne.n	80055f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d81d      	bhi.n	80055e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	889b      	ldrh	r3, [r3, #4]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d813      	bhi.n	80055de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	6839      	ldr	r1, [r7, #0]
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
 80055c4:	4603      	mov	r3, r0
 80055c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	88db      	ldrh	r3, [r3, #6]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d110      	bne.n	80055f2 <USBD_StdItfReq+0x7a>
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10d      	bne.n	80055f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fd56 	bl	8006088 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80055dc:	e009      	b.n	80055f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fca3 	bl	8005f2c <USBD_CtlError>
          break;
 80055e6:	e004      	b.n	80055f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fc9e 	bl	8005f2c <USBD_CtlError>
          break;
 80055f0:	e000      	b.n	80055f4 <USBD_StdItfReq+0x7c>
          break;
 80055f2:	bf00      	nop
      }
      break;
 80055f4:	e004      	b.n	8005600 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fc97 	bl	8005f2c <USBD_CtlError>
      break;
 80055fe:	bf00      	nop
  }

  return ret;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	889b      	ldrh	r3, [r3, #4]
 800561c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d007      	beq.n	800563a <USBD_StdEPReq+0x30>
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	f200 8145 	bhi.w	80058ba <USBD_StdEPReq+0x2b0>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00c      	beq.n	800564e <USBD_StdEPReq+0x44>
 8005634:	2b20      	cmp	r3, #32
 8005636:	f040 8140 	bne.w	80058ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	4798      	blx	r3
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e13a      	b.n	80058c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	2b03      	cmp	r3, #3
 8005654:	d007      	beq.n	8005666 <USBD_StdEPReq+0x5c>
 8005656:	2b03      	cmp	r3, #3
 8005658:	f300 8129 	bgt.w	80058ae <USBD_StdEPReq+0x2a4>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d07f      	beq.n	8005760 <USBD_StdEPReq+0x156>
 8005660:	2b01      	cmp	r3, #1
 8005662:	d03c      	beq.n	80056de <USBD_StdEPReq+0xd4>
 8005664:	e123      	b.n	80058ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d002      	beq.n	8005678 <USBD_StdEPReq+0x6e>
 8005672:	2b03      	cmp	r3, #3
 8005674:	d016      	beq.n	80056a4 <USBD_StdEPReq+0x9a>
 8005676:	e02c      	b.n	80056d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005678:	7bbb      	ldrb	r3, [r7, #14]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00d      	beq.n	800569a <USBD_StdEPReq+0x90>
 800567e:	7bbb      	ldrb	r3, [r7, #14]
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d00a      	beq.n	800569a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 f841 	bl	8006710 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800568e:	2180      	movs	r1, #128	; 0x80
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 f83d 	bl	8006710 <USBD_LL_StallEP>
 8005696:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005698:	e020      	b.n	80056dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fc45 	bl	8005f2c <USBD_CtlError>
              break;
 80056a2:	e01b      	b.n	80056dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	885b      	ldrh	r3, [r3, #2]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10e      	bne.n	80056ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <USBD_StdEPReq+0xc0>
 80056b2:	7bbb      	ldrb	r3, [r7, #14]
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d008      	beq.n	80056ca <USBD_StdEPReq+0xc0>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	88db      	ldrh	r3, [r3, #6]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 f823 	bl	8006710 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fcdc 	bl	8006088 <USBD_CtlSendStatus>

              break;
 80056d0:	e004      	b.n	80056dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fc29 	bl	8005f2c <USBD_CtlError>
              break;
 80056da:	bf00      	nop
          }
          break;
 80056dc:	e0ec      	b.n	80058b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d002      	beq.n	80056f0 <USBD_StdEPReq+0xe6>
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d016      	beq.n	800571c <USBD_StdEPReq+0x112>
 80056ee:	e030      	b.n	8005752 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056f0:	7bbb      	ldrb	r3, [r7, #14]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <USBD_StdEPReq+0x108>
 80056f6:	7bbb      	ldrb	r3, [r7, #14]
 80056f8:	2b80      	cmp	r3, #128	; 0x80
 80056fa:	d00a      	beq.n	8005712 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80056fc:	7bbb      	ldrb	r3, [r7, #14]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 f805 	bl	8006710 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005706:	2180      	movs	r1, #128	; 0x80
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 f801 	bl	8006710 <USBD_LL_StallEP>
 800570e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005710:	e025      	b.n	800575e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fc09 	bl	8005f2c <USBD_CtlError>
              break;
 800571a:	e020      	b.n	800575e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	885b      	ldrh	r3, [r3, #2]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d11b      	bne.n	800575c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005724:	7bbb      	ldrb	r3, [r7, #14]
 8005726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800572e:	7bbb      	ldrb	r3, [r7, #14]
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 f80b 	bl	800674e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fca5 	bl	8006088 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
 800574c:	4603      	mov	r3, r0
 800574e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005750:	e004      	b.n	800575c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fbe9 	bl	8005f2c <USBD_CtlError>
              break;
 800575a:	e000      	b.n	800575e <USBD_StdEPReq+0x154>
              break;
 800575c:	bf00      	nop
          }
          break;
 800575e:	e0ab      	b.n	80058b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d002      	beq.n	8005772 <USBD_StdEPReq+0x168>
 800576c:	2b03      	cmp	r3, #3
 800576e:	d032      	beq.n	80057d6 <USBD_StdEPReq+0x1cc>
 8005770:	e097      	b.n	80058a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005772:	7bbb      	ldrb	r3, [r7, #14]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <USBD_StdEPReq+0x17e>
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	2b80      	cmp	r3, #128	; 0x80
 800577c:	d004      	beq.n	8005788 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fbd3 	bl	8005f2c <USBD_CtlError>
                break;
 8005786:	e091      	b.n	80058ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800578c:	2b00      	cmp	r3, #0
 800578e:	da0b      	bge.n	80057a8 <USBD_StdEPReq+0x19e>
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	3310      	adds	r3, #16
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	4413      	add	r3, r2
 80057a4:	3304      	adds	r3, #4
 80057a6:	e00b      	b.n	80057c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80057a8:	7bbb      	ldrb	r3, [r7, #14]
 80057aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	3304      	adds	r3, #4
 80057c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2202      	movs	r2, #2
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fc1d 	bl	800600e <USBD_CtlSendData>
              break;
 80057d4:	e06a      	b.n	80058ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80057d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	da11      	bge.n	8005802 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057de:	7bbb      	ldrb	r3, [r7, #14]
 80057e0:	f003 020f 	and.w	r2, r3, #15
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	3324      	adds	r3, #36	; 0x24
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d117      	bne.n	8005828 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fb96 	bl	8005f2c <USBD_CtlError>
                  break;
 8005800:	e054      	b.n	80058ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005802:	7bbb      	ldrb	r3, [r7, #14]
 8005804:	f003 020f 	and.w	r2, r3, #15
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	4613      	mov	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fb83 	bl	8005f2c <USBD_CtlError>
                  break;
 8005826:	e041      	b.n	80058ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800582c:	2b00      	cmp	r3, #0
 800582e:	da0b      	bge.n	8005848 <USBD_StdEPReq+0x23e>
 8005830:	7bbb      	ldrb	r3, [r7, #14]
 8005832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	3310      	adds	r3, #16
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4413      	add	r3, r2
 8005844:	3304      	adds	r3, #4
 8005846:	e00b      	b.n	8005860 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	3304      	adds	r3, #4
 8005860:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005862:	7bbb      	ldrb	r3, [r7, #14]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <USBD_StdEPReq+0x264>
 8005868:	7bbb      	ldrb	r3, [r7, #14]
 800586a:	2b80      	cmp	r3, #128	; 0x80
 800586c:	d103      	bne.n	8005876 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e00e      	b.n	8005894 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 ff86 	bl	800678c <USBD_LL_IsStallEP>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2201      	movs	r2, #1
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	e002      	b.n	8005894 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2202      	movs	r2, #2
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fbb7 	bl	800600e <USBD_CtlSendData>
              break;
 80058a0:	e004      	b.n	80058ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fb41 	bl	8005f2c <USBD_CtlError>
              break;
 80058aa:	bf00      	nop
          }
          break;
 80058ac:	e004      	b.n	80058b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fb3b 	bl	8005f2c <USBD_CtlError>
          break;
 80058b6:	bf00      	nop
      }
      break;
 80058b8:	e004      	b.n	80058c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fb35 	bl	8005f2c <USBD_CtlError>
      break;
 80058c2:	bf00      	nop
  }

  return ret;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	2b06      	cmp	r3, #6
 80058f2:	f200 8128 	bhi.w	8005b46 <USBD_GetDescriptor+0x276>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <USBD_GetDescriptor+0x2c>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005919 	.word	0x08005919
 8005900:	08005931 	.word	0x08005931
 8005904:	08005971 	.word	0x08005971
 8005908:	08005b47 	.word	0x08005b47
 800590c:	08005b47 	.word	0x08005b47
 8005910:	08005ae7 	.word	0x08005ae7
 8005914:	08005b13 	.word	0x08005b13
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	7c12      	ldrb	r2, [r2, #16]
 8005924:	f107 0108 	add.w	r1, r7, #8
 8005928:	4610      	mov	r0, r2
 800592a:	4798      	blx	r3
 800592c:	60f8      	str	r0, [r7, #12]
      break;
 800592e:	e112      	b.n	8005b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7c1b      	ldrb	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10d      	bne.n	8005954 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	f107 0208 	add.w	r2, r7, #8
 8005944:	4610      	mov	r0, r2
 8005946:	4798      	blx	r3
 8005948:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3301      	adds	r3, #1
 800594e:	2202      	movs	r2, #2
 8005950:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005952:	e100      	b.n	8005b56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	f107 0208 	add.w	r2, r7, #8
 8005960:	4610      	mov	r0, r2
 8005962:	4798      	blx	r3
 8005964:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	2202      	movs	r2, #2
 800596c:	701a      	strb	r2, [r3, #0]
      break;
 800596e:	e0f2      	b.n	8005b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	885b      	ldrh	r3, [r3, #2]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b05      	cmp	r3, #5
 8005978:	f200 80ac 	bhi.w	8005ad4 <USBD_GetDescriptor+0x204>
 800597c:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <USBD_GetDescriptor+0xb4>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	0800599d 	.word	0x0800599d
 8005988:	080059d1 	.word	0x080059d1
 800598c:	08005a05 	.word	0x08005a05
 8005990:	08005a39 	.word	0x08005a39
 8005994:	08005a6d 	.word	0x08005a6d
 8005998:	08005aa1 	.word	0x08005aa1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00b      	beq.n	80059c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	7c12      	ldrb	r2, [r2, #16]
 80059b4:	f107 0108 	add.w	r1, r7, #8
 80059b8:	4610      	mov	r0, r2
 80059ba:	4798      	blx	r3
 80059bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059be:	e091      	b.n	8005ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fab2 	bl	8005f2c <USBD_CtlError>
            err++;
 80059c8:	7afb      	ldrb	r3, [r7, #11]
 80059ca:	3301      	adds	r3, #1
 80059cc:	72fb      	strb	r3, [r7, #11]
          break;
 80059ce:	e089      	b.n	8005ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	7c12      	ldrb	r2, [r2, #16]
 80059e8:	f107 0108 	add.w	r1, r7, #8
 80059ec:	4610      	mov	r0, r2
 80059ee:	4798      	blx	r3
 80059f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059f2:	e077      	b.n	8005ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa98 	bl	8005f2c <USBD_CtlError>
            err++;
 80059fc:	7afb      	ldrb	r3, [r7, #11]
 80059fe:	3301      	adds	r3, #1
 8005a00:	72fb      	strb	r3, [r7, #11]
          break;
 8005a02:	e06f      	b.n	8005ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	7c12      	ldrb	r2, [r2, #16]
 8005a1c:	f107 0108 	add.w	r1, r7, #8
 8005a20:	4610      	mov	r0, r2
 8005a22:	4798      	blx	r3
 8005a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a26:	e05d      	b.n	8005ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa7e 	bl	8005f2c <USBD_CtlError>
            err++;
 8005a30:	7afb      	ldrb	r3, [r7, #11]
 8005a32:	3301      	adds	r3, #1
 8005a34:	72fb      	strb	r3, [r7, #11]
          break;
 8005a36:	e055      	b.n	8005ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	7c12      	ldrb	r2, [r2, #16]
 8005a50:	f107 0108 	add.w	r1, r7, #8
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a5a:	e043      	b.n	8005ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa64 	bl	8005f2c <USBD_CtlError>
            err++;
 8005a64:	7afb      	ldrb	r3, [r7, #11]
 8005a66:	3301      	adds	r3, #1
 8005a68:	72fb      	strb	r3, [r7, #11]
          break;
 8005a6a:	e03b      	b.n	8005ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	7c12      	ldrb	r2, [r2, #16]
 8005a84:	f107 0108 	add.w	r1, r7, #8
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
 8005a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a8e:	e029      	b.n	8005ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa4a 	bl	8005f2c <USBD_CtlError>
            err++;
 8005a98:	7afb      	ldrb	r3, [r7, #11]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005a9e:	e021      	b.n	8005ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00b      	beq.n	8005ac4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	7c12      	ldrb	r2, [r2, #16]
 8005ab8:	f107 0108 	add.w	r1, r7, #8
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
 8005ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ac2:	e00f      	b.n	8005ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa30 	bl	8005f2c <USBD_CtlError>
            err++;
 8005acc:	7afb      	ldrb	r3, [r7, #11]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ad2:	e007      	b.n	8005ae4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa28 	bl	8005f2c <USBD_CtlError>
          err++;
 8005adc:	7afb      	ldrb	r3, [r7, #11]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005ae2:	bf00      	nop
      }
      break;
 8005ae4:	e037      	b.n	8005b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	7c1b      	ldrb	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af6:	f107 0208 	add.w	r2, r7, #8
 8005afa:	4610      	mov	r0, r2
 8005afc:	4798      	blx	r3
 8005afe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b00:	e029      	b.n	8005b56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa11 	bl	8005f2c <USBD_CtlError>
        err++;
 8005b0a:	7afb      	ldrb	r3, [r7, #11]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8005b10:	e021      	b.n	8005b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	7c1b      	ldrb	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10d      	bne.n	8005b36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f107 0208 	add.w	r2, r7, #8
 8005b26:	4610      	mov	r0, r2
 8005b28:	4798      	blx	r3
 8005b2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	2207      	movs	r2, #7
 8005b32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b34:	e00f      	b.n	8005b56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f9f7 	bl	8005f2c <USBD_CtlError>
        err++;
 8005b3e:	7afb      	ldrb	r3, [r7, #11]
 8005b40:	3301      	adds	r3, #1
 8005b42:	72fb      	strb	r3, [r7, #11]
      break;
 8005b44:	e007      	b.n	8005b56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f9ef 	bl	8005f2c <USBD_CtlError>
      err++;
 8005b4e:	7afb      	ldrb	r3, [r7, #11]
 8005b50:	3301      	adds	r3, #1
 8005b52:	72fb      	strb	r3, [r7, #11]
      break;
 8005b54:	bf00      	nop
  }

  if (err != 0U)
 8005b56:	7afb      	ldrb	r3, [r7, #11]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d11e      	bne.n	8005b9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	88db      	ldrh	r3, [r3, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d016      	beq.n	8005b92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005b64:	893b      	ldrh	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00e      	beq.n	8005b88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	88da      	ldrh	r2, [r3, #6]
 8005b6e:	893b      	ldrh	r3, [r7, #8]
 8005b70:	4293      	cmp	r3, r2
 8005b72:	bf28      	it	cs
 8005b74:	4613      	movcs	r3, r2
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b7a:	893b      	ldrh	r3, [r7, #8]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa44 	bl	800600e <USBD_CtlSendData>
 8005b86:	e009      	b.n	8005b9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f9ce 	bl	8005f2c <USBD_CtlError>
 8005b90:	e004      	b.n	8005b9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa78 	bl	8006088 <USBD_CtlSendStatus>
 8005b98:	e000      	b.n	8005b9c <USBD_GetDescriptor+0x2cc>
    return;
 8005b9a:	bf00      	nop
  }
}
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop

08005ba4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	889b      	ldrh	r3, [r3, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d131      	bne.n	8005c1a <USBD_SetAddress+0x76>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	88db      	ldrh	r3, [r3, #6]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d12d      	bne.n	8005c1a <USBD_SetAddress+0x76>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	885b      	ldrh	r3, [r3, #2]
 8005bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc4:	d829      	bhi.n	8005c1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	885b      	ldrh	r3, [r3, #2]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d104      	bne.n	8005be8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f9a3 	bl	8005f2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be6:	e01d      	b.n	8005c24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	7bfa      	ldrb	r2, [r7, #15]
 8005bec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fdf5 	bl	80067e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa44 	bl	8006088 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c0e:	e009      	b.n	8005c24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c18:	e004      	b.n	8005c24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f985 	bl	8005f2c <USBD_CtlError>
  }
}
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	885b      	ldrh	r3, [r3, #2]
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	4b4c      	ldr	r3, [pc, #304]	; (8005d74 <USBD_SetConfig+0x148>)
 8005c42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c44:	4b4b      	ldr	r3, [pc, #300]	; (8005d74 <USBD_SetConfig+0x148>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d905      	bls.n	8005c58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f96c 	bl	8005f2c <USBD_CtlError>
    return USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e088      	b.n	8005d6a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d002      	beq.n	8005c6a <USBD_SetConfig+0x3e>
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d025      	beq.n	8005cb4 <USBD_SetConfig+0x88>
 8005c68:	e071      	b.n	8005d4e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005c6a:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <USBD_SetConfig+0x148>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01c      	beq.n	8005cac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005c72:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <USBD_SetConfig+0x148>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c7c:	4b3d      	ldr	r3, [pc, #244]	; (8005d74 <USBD_SetConfig+0x148>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff f948 	bl	8004f18 <USBD_SetClassConfig>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005c92:	6839      	ldr	r1, [r7, #0]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f949 	bl	8005f2c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005c9a:	e065      	b.n	8005d68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f9f3 	bl	8006088 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005caa:	e05d      	b.n	8005d68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f9eb 	bl	8006088 <USBD_CtlSendStatus>
      break;
 8005cb2:	e059      	b.n	8005d68 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005cb4:	4b2f      	ldr	r3, [pc, #188]	; (8005d74 <USBD_SetConfig+0x148>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d112      	bne.n	8005ce2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005cc4:	4b2b      	ldr	r3, [pc, #172]	; (8005d74 <USBD_SetConfig+0x148>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cce:	4b29      	ldr	r3, [pc, #164]	; (8005d74 <USBD_SetConfig+0x148>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff f93b 	bl	8004f50 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f9d4 	bl	8006088 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ce0:	e042      	b.n	8005d68 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005ce2:	4b24      	ldr	r3, [pc, #144]	; (8005d74 <USBD_SetConfig+0x148>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d02a      	beq.n	8005d46 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff f929 	bl	8004f50 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <USBD_SetConfig+0x148>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d08:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <USBD_SetConfig+0x148>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff f902 	bl	8004f18 <USBD_SetClassConfig>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00f      	beq.n	8005d3e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f903 	bl	8005f2c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff f90e 	bl	8004f50 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005d3c:	e014      	b.n	8005d68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9a2 	bl	8006088 <USBD_CtlSendStatus>
      break;
 8005d44:	e010      	b.n	8005d68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f99e 	bl	8006088 <USBD_CtlSendStatus>
      break;
 8005d4c:	e00c      	b.n	8005d68 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f8eb 	bl	8005f2c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <USBD_SetConfig+0x148>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff f8f7 	bl	8004f50 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	73fb      	strb	r3, [r7, #15]
      break;
 8005d66:	bf00      	nop
  }

  return ret;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000187 	.word	0x20000187

08005d78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	88db      	ldrh	r3, [r3, #6]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d004      	beq.n	8005d94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8cd 	bl	8005f2c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005d92:	e023      	b.n	8005ddc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	dc02      	bgt.n	8005da6 <USBD_GetConfig+0x2e>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	dc03      	bgt.n	8005dac <USBD_GetConfig+0x34>
 8005da4:	e015      	b.n	8005dd2 <USBD_GetConfig+0x5a>
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d00b      	beq.n	8005dc2 <USBD_GetConfig+0x4a>
 8005daa:	e012      	b.n	8005dd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3308      	adds	r3, #8
 8005db6:	2201      	movs	r2, #1
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f927 	bl	800600e <USBD_CtlSendData>
        break;
 8005dc0:	e00c      	b.n	8005ddc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f91f 	bl	800600e <USBD_CtlSendData>
        break;
 8005dd0:	e004      	b.n	8005ddc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f8a9 	bl	8005f2c <USBD_CtlError>
        break;
 8005dda:	bf00      	nop
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d81e      	bhi.n	8005e3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	88db      	ldrh	r3, [r3, #6]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d004      	beq.n	8005e0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f890 	bl	8005f2c <USBD_CtlError>
        break;
 8005e0c:	e01a      	b.n	8005e44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f043 0202 	orr.w	r2, r3, #2
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	2202      	movs	r2, #2
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f8eb 	bl	800600e <USBD_CtlSendData>
      break;
 8005e38:	e004      	b.n	8005e44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f875 	bl	8005f2c <USBD_CtlError>
      break;
 8005e42:	bf00      	nop
  }
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	885b      	ldrh	r3, [r3, #2]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d106      	bne.n	8005e6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f90e 	bl	8006088 <USBD_CtlSendStatus>
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d80b      	bhi.n	8005ea4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	885b      	ldrh	r3, [r3, #2]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d10c      	bne.n	8005eae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f8f3 	bl	8006088 <USBD_CtlSendStatus>
      }
      break;
 8005ea2:	e004      	b.n	8005eae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f840 	bl	8005f2c <USBD_CtlError>
      break;
 8005eac:	e000      	b.n	8005eb0 <USBD_ClrFeature+0x3c>
      break;
 8005eae:	bf00      	nop
  }
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	781a      	ldrb	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7ff fabb 	bl	800545e <SWAPBYTE>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7ff faae 	bl	800545e <SWAPBYTE>
 8005f02:	4603      	mov	r3, r0
 8005f04:	461a      	mov	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff faa1 	bl	800545e <SWAPBYTE>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	80da      	strh	r2, [r3, #6]
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fbe9 	bl	8006710 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fbe5 	bl	8006710 <USBD_LL_StallEP>
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d036      	beq.n	8005fd2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005f68:	6938      	ldr	r0, [r7, #16]
 8005f6a:	f000 f836 	bl	8005fda <USBD_GetLen>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	3301      	adds	r3, #1
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	7812      	ldrb	r2, [r2, #0]
 8005f86:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	4413      	add	r3, r2
 8005f94:	2203      	movs	r2, #3
 8005f96:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005f9e:	e013      	b.n	8005fc8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	613b      	str	r3, [r7, #16]
    idx++;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
    idx++;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e7      	bne.n	8005fa0 <USBD_GetString+0x52>
 8005fd0:	e000      	b.n	8005fd4 <USBD_GetString+0x86>
    return;
 8005fd2:	bf00      	nop
  }
}
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005fea:	e005      	b.n	8005ff8 <USBD_GetLen+0x1e>
  {
    len++;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f5      	bne.n	8005fec <USBD_GetLen+0x12>
  }

  return len;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2202      	movs	r2, #2
 800601e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	2100      	movs	r1, #0
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fbf4 	bl	8006822 <USBD_LL_Transmit>

  return USBD_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	2100      	movs	r1, #0
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 fbe3 	bl	8006822 <USBD_LL_Transmit>

  return USBD_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	2100      	movs	r1, #0
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fbf3 	bl	8006864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2204      	movs	r2, #4
 8006094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006098:	2300      	movs	r3, #0
 800609a:	2200      	movs	r2, #0
 800609c:	2100      	movs	r1, #0
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fbbf 	bl	8006822 <USBD_LL_Transmit>

  return USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2205      	movs	r2, #5
 80060ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060be:	2300      	movs	r3, #0
 80060c0:	2200      	movs	r2, #0
 80060c2:	2100      	movs	r1, #0
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fbcd 	bl	8006864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80060d8:	2200      	movs	r2, #0
 80060da:	490e      	ldr	r1, [pc, #56]	; (8006114 <MX_USB_DEVICE_Init+0x40>)
 80060dc:	480e      	ldr	r0, [pc, #56]	; (8006118 <MX_USB_DEVICE_Init+0x44>)
 80060de:	f7fe fead 	bl	8004e3c <USBD_Init>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80060e8:	f7fa fd63 	bl	8000bb2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80060ec:	490b      	ldr	r1, [pc, #44]	; (800611c <MX_USB_DEVICE_Init+0x48>)
 80060ee:	480a      	ldr	r0, [pc, #40]	; (8006118 <MX_USB_DEVICE_Init+0x44>)
 80060f0:	f7fe fed4 	bl	8004e9c <USBD_RegisterClass>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80060fa:	f7fa fd5a 	bl	8000bb2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060fe:	4806      	ldr	r0, [pc, #24]	; (8006118 <MX_USB_DEVICE_Init+0x44>)
 8006100:	f7fe fef3 	bl	8004eea <USBD_Start>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800610a:	f7fa fd52 	bl	8000bb2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800610e:	bf00      	nop
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000118 	.word	0x20000118
 8006118:	200001e4 	.word	0x200001e4
 800611c:	20000010 	.word	0x20000010

08006120 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	6039      	str	r1, [r7, #0]
 800612a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2212      	movs	r2, #18
 8006130:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006132:	4b03      	ldr	r3, [pc, #12]	; (8006140 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	20000134 	.word	0x20000134

08006144 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	6039      	str	r1, [r7, #0]
 800614e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2204      	movs	r2, #4
 8006154:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006156:	4b03      	ldr	r3, [pc, #12]	; (8006164 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	20000148 	.word	0x20000148

08006168 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	6039      	str	r1, [r7, #0]
 8006172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d105      	bne.n	8006186 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	4907      	ldr	r1, [pc, #28]	; (800619c <USBD_FS_ProductStrDescriptor+0x34>)
 800617e:	4808      	ldr	r0, [pc, #32]	; (80061a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006180:	f7ff fee5 	bl	8005f4e <USBD_GetString>
 8006184:	e004      	b.n	8006190 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	4904      	ldr	r1, [pc, #16]	; (800619c <USBD_FS_ProductStrDescriptor+0x34>)
 800618a:	4805      	ldr	r0, [pc, #20]	; (80061a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800618c:	f7ff fedf 	bl	8005f4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006190:	4b02      	ldr	r3, [pc, #8]	; (800619c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200004b4 	.word	0x200004b4
 80061a0:	080069a0 	.word	0x080069a0

080061a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	4603      	mov	r3, r0
 80061ac:	6039      	str	r1, [r7, #0]
 80061ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	4904      	ldr	r1, [pc, #16]	; (80061c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80061b4:	4804      	ldr	r0, [pc, #16]	; (80061c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80061b6:	f7ff feca 	bl	8005f4e <USBD_GetString>
  return USBD_StrDesc;
 80061ba:	4b02      	ldr	r3, [pc, #8]	; (80061c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	200004b4 	.word	0x200004b4
 80061c8:	080069b8 	.word	0x080069b8

080061cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	221a      	movs	r2, #26
 80061dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80061de:	f000 f843 	bl	8006268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80061e2:	4b02      	ldr	r3, [pc, #8]	; (80061ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	2000014c 	.word	0x2000014c

080061f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	6039      	str	r1, [r7, #0]
 80061fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d105      	bne.n	800620e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	4907      	ldr	r1, [pc, #28]	; (8006224 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006206:	4808      	ldr	r0, [pc, #32]	; (8006228 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006208:	f7ff fea1 	bl	8005f4e <USBD_GetString>
 800620c:	e004      	b.n	8006218 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	4904      	ldr	r1, [pc, #16]	; (8006224 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006212:	4805      	ldr	r0, [pc, #20]	; (8006228 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006214:	f7ff fe9b 	bl	8005f4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006218:	4b02      	ldr	r3, [pc, #8]	; (8006224 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	200004b4 	.word	0x200004b4
 8006228:	080069cc 	.word	0x080069cc

0800622c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	6039      	str	r1, [r7, #0]
 8006236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d105      	bne.n	800624a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	4907      	ldr	r1, [pc, #28]	; (8006260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006242:	4808      	ldr	r0, [pc, #32]	; (8006264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006244:	f7ff fe83 	bl	8005f4e <USBD_GetString>
 8006248:	e004      	b.n	8006254 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	4904      	ldr	r1, [pc, #16]	; (8006260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800624e:	4805      	ldr	r0, [pc, #20]	; (8006264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006250:	f7ff fe7d 	bl	8005f4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006254:	4b02      	ldr	r3, [pc, #8]	; (8006260 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	200004b4 	.word	0x200004b4
 8006264:	080069d8 	.word	0x080069d8

08006268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800626e:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <Get_SerialNum+0x44>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006274:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <Get_SerialNum+0x48>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800627a:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <Get_SerialNum+0x4c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800628e:	2208      	movs	r2, #8
 8006290:	4909      	ldr	r1, [pc, #36]	; (80062b8 <Get_SerialNum+0x50>)
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f814 	bl	80062c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006298:	2204      	movs	r2, #4
 800629a:	4908      	ldr	r1, [pc, #32]	; (80062bc <Get_SerialNum+0x54>)
 800629c:	68b8      	ldr	r0, [r7, #8]
 800629e:	f000 f80f 	bl	80062c0 <IntToUnicode>
  }
}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	1fff7a10 	.word	0x1fff7a10
 80062b0:	1fff7a14 	.word	0x1fff7a14
 80062b4:	1fff7a18 	.word	0x1fff7a18
 80062b8:	2000014e 	.word	0x2000014e
 80062bc:	2000015e 	.word	0x2000015e

080062c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	75fb      	strb	r3, [r7, #23]
 80062d6:	e027      	b.n	8006328 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	0f1b      	lsrs	r3, r3, #28
 80062dc:	2b09      	cmp	r3, #9
 80062de:	d80b      	bhi.n	80062f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	0f1b      	lsrs	r3, r3, #28
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	4619      	mov	r1, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	440b      	add	r3, r1
 80062f0:	3230      	adds	r2, #48	; 0x30
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	e00a      	b.n	800630e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	0f1b      	lsrs	r3, r3, #28
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	4619      	mov	r1, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	440b      	add	r3, r1
 8006308:	3237      	adds	r2, #55	; 0x37
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	3301      	adds	r3, #1
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4413      	add	r3, r2
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	3301      	adds	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
 8006328:	7dfa      	ldrb	r2, [r7, #23]
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	429a      	cmp	r2, r3
 800632e:	d3d3      	bcc.n	80062d8 <IntToUnicode+0x18>
  }
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
	...

08006340 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	; 0x28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006348:	f107 0314 	add.w	r3, r7, #20
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	609a      	str	r2, [r3, #8]
 8006354:	60da      	str	r2, [r3, #12]
 8006356:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006360:	d13a      	bne.n	80063d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006362:	2300      	movs	r3, #0
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	4b1e      	ldr	r3, [pc, #120]	; (80063e0 <HAL_PCD_MspInit+0xa0>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	4a1d      	ldr	r2, [pc, #116]	; (80063e0 <HAL_PCD_MspInit+0xa0>)
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	6313      	str	r3, [r2, #48]	; 0x30
 8006372:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <HAL_PCD_MspInit+0xa0>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800637e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006384:	2302      	movs	r3, #2
 8006386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006388:	2300      	movs	r3, #0
 800638a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800638c:	2303      	movs	r3, #3
 800638e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006390:	230a      	movs	r3, #10
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006394:	f107 0314 	add.w	r3, r7, #20
 8006398:	4619      	mov	r1, r3
 800639a:	4812      	ldr	r0, [pc, #72]	; (80063e4 <HAL_PCD_MspInit+0xa4>)
 800639c:	f7fa fe9e 	bl	80010dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80063a0:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <HAL_PCD_MspInit+0xa0>)
 80063a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a4:	4a0e      	ldr	r2, [pc, #56]	; (80063e0 <HAL_PCD_MspInit+0xa0>)
 80063a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063aa:	6353      	str	r3, [r2, #52]	; 0x34
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_PCD_MspInit+0xa0>)
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	4a0a      	ldr	r2, [pc, #40]	; (80063e0 <HAL_PCD_MspInit+0xa0>)
 80063b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ba:	6453      	str	r3, [r2, #68]	; 0x44
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <HAL_PCD_MspInit+0xa0>)
 80063be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	2043      	movs	r0, #67	; 0x43
 80063ce:	f7fa fe4e 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80063d2:	2043      	movs	r0, #67	; 0x43
 80063d4:	f7fa fe67 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80063d8:	bf00      	nop
 80063da:	3728      	adds	r7, #40	; 0x28
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40020000 	.word	0x40020000

080063e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f7fe fdbe 	bl	8004f80 <USBD_LL_SetupStage>
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800641e:	78fa      	ldrb	r2, [r7, #3]
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	4619      	mov	r1, r3
 8006436:	f7fe fdf8 	bl	800502a <USBD_LL_DataOutStage>
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	460b      	mov	r3, r1
 800644c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006454:	78fa      	ldrb	r2, [r7, #3]
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	4613      	mov	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	3348      	adds	r3, #72	; 0x48
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	4619      	mov	r1, r3
 800646a:	f7fe fe41 	bl	80050f0 <USBD_LL_DataInStage>
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe ff55 	bl	8005334 <USBD_LL_SOF>
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d001      	beq.n	80064aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80064a6:	f7fa fb84 	bl	8000bb2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064b0:	7bfa      	ldrb	r2, [r7, #15]
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe feff 	bl	80052b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe feab 	bl	800521c <USBD_LL_Reset>
}
 80064c6:	bf00      	nop
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fefa 	bl	80052d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <HAL_PCD_SuspendCallback+0x48>)
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	4a03      	ldr	r2, [pc, #12]	; (8006518 <HAL_PCD_SuspendCallback+0x48>)
 800650a:	f043 0306 	orr.w	r3, r3, #6
 800650e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	e000ed00 	.word	0xe000ed00

0800651c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe feea 	bl	8005304 <USBD_LL_Resume>
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	4611      	mov	r1, r2
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe ff38 	bl	80053c4 <USBD_LL_IsoOUTIncomplete>
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800656e:	78fa      	ldrb	r2, [r7, #3]
 8006570:	4611      	mov	r1, r2
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe ff00 	bl	8005378 <USBD_LL_IsoINIncomplete>
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe ff3e 	bl	8005410 <USBD_LL_DevConnected>
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe ff3b 	bl	8005426 <USBD_LL_DevDisconnected>
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d13c      	bne.n	8006642 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80065c8:	4a20      	ldr	r2, [pc, #128]	; (800664c <USBD_LL_Init+0x94>)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a1e      	ldr	r2, [pc, #120]	; (800664c <USBD_LL_Init+0x94>)
 80065d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80065d8:	4b1c      	ldr	r3, [pc, #112]	; (800664c <USBD_LL_Init+0x94>)
 80065da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80065de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80065e0:	4b1a      	ldr	r3, [pc, #104]	; (800664c <USBD_LL_Init+0x94>)
 80065e2:	2204      	movs	r2, #4
 80065e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80065e6:	4b19      	ldr	r3, [pc, #100]	; (800664c <USBD_LL_Init+0x94>)
 80065e8:	2202      	movs	r2, #2
 80065ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <USBD_LL_Init+0x94>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80065f2:	4b16      	ldr	r3, [pc, #88]	; (800664c <USBD_LL_Init+0x94>)
 80065f4:	2202      	movs	r2, #2
 80065f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80065f8:	4b14      	ldr	r3, [pc, #80]	; (800664c <USBD_LL_Init+0x94>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80065fe:	4b13      	ldr	r3, [pc, #76]	; (800664c <USBD_LL_Init+0x94>)
 8006600:	2200      	movs	r2, #0
 8006602:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006604:	4b11      	ldr	r3, [pc, #68]	; (800664c <USBD_LL_Init+0x94>)
 8006606:	2200      	movs	r2, #0
 8006608:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <USBD_LL_Init+0x94>)
 800660c:	2200      	movs	r2, #0
 800660e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006610:	4b0e      	ldr	r3, [pc, #56]	; (800664c <USBD_LL_Init+0x94>)
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006616:	480d      	ldr	r0, [pc, #52]	; (800664c <USBD_LL_Init+0x94>)
 8006618:	f7fa ff16 	bl	8001448 <HAL_PCD_Init>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006622:	f7fa fac6 	bl	8000bb2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006626:	2180      	movs	r1, #128	; 0x80
 8006628:	4808      	ldr	r0, [pc, #32]	; (800664c <USBD_LL_Init+0x94>)
 800662a:	f7fc f85c 	bl	80026e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800662e:	2240      	movs	r2, #64	; 0x40
 8006630:	2100      	movs	r1, #0
 8006632:	4806      	ldr	r0, [pc, #24]	; (800664c <USBD_LL_Init+0x94>)
 8006634:	f7fc f810 	bl	8002658 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006638:	2280      	movs	r2, #128	; 0x80
 800663a:	2101      	movs	r1, #1
 800663c:	4803      	ldr	r0, [pc, #12]	; (800664c <USBD_LL_Init+0x94>)
 800663e:	f7fc f80b 	bl	8002658 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	200006b4 	.word	0x200006b4

08006650 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006666:	4618      	mov	r0, r3
 8006668:	f7fb f80b 	bl	8001682 <HAL_PCD_Start>
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f930 	bl	80068d8 <USBD_Get_USB_Status>
 8006678:	4603      	mov	r3, r0
 800667a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800667c:	7bbb      	ldrb	r3, [r7, #14]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	4608      	mov	r0, r1
 8006690:	4611      	mov	r1, r2
 8006692:	461a      	mov	r2, r3
 8006694:	4603      	mov	r3, r0
 8006696:	70fb      	strb	r3, [r7, #3]
 8006698:	460b      	mov	r3, r1
 800669a:	70bb      	strb	r3, [r7, #2]
 800669c:	4613      	mov	r3, r2
 800669e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80066ae:	78bb      	ldrb	r3, [r7, #2]
 80066b0:	883a      	ldrh	r2, [r7, #0]
 80066b2:	78f9      	ldrb	r1, [r7, #3]
 80066b4:	f7fb fbef 	bl	8001e96 <HAL_PCD_EP_Open>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f90a 	bl	80068d8 <USBD_Get_USB_Status>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	4611      	mov	r1, r2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fb fc38 	bl	8001f66 <HAL_PCD_EP_Close>
 80066f6:	4603      	mov	r3, r0
 80066f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f8eb 	bl	80068d8 <USBD_Get_USB_Status>
 8006702:	4603      	mov	r3, r0
 8006704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006706:	7bbb      	ldrb	r3, [r7, #14]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800672a:	78fa      	ldrb	r2, [r7, #3]
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f7fb fcf8 	bl	8002124 <HAL_PCD_EP_SetStall>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f8cc 	bl	80068d8 <USBD_Get_USB_Status>
 8006740:	4603      	mov	r3, r0
 8006742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006744:	7bbb      	ldrb	r3, [r7, #14]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006768:	78fa      	ldrb	r2, [r7, #3]
 800676a:	4611      	mov	r1, r2
 800676c:	4618      	mov	r0, r3
 800676e:	f7fb fd3d 	bl	80021ec <HAL_PCD_EP_ClrStall>
 8006772:	4603      	mov	r3, r0
 8006774:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	4618      	mov	r0, r3
 800677a:	f000 f8ad 	bl	80068d8 <USBD_Get_USB_Status>
 800677e:	4603      	mov	r3, r0
 8006780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006782:	7bbb      	ldrb	r3, [r7, #14]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800679e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80067a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da0b      	bge.n	80067c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	4613      	mov	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	333e      	adds	r3, #62	; 0x3e
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	e00b      	b.n	80067d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	4613      	mov	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	4611      	mov	r1, r2
 8006802:	4618      	mov	r0, r3
 8006804:	f7fb fb22 	bl	8001e4c <HAL_PCD_SetAddress>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f862 	bl	80068d8 <USBD_Get_USB_Status>
 8006814:	4603      	mov	r3, r0
 8006816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006818:	7bbb      	ldrb	r3, [r7, #14]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
 800682e:	460b      	mov	r3, r1
 8006830:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006840:	7af9      	ldrb	r1, [r7, #11]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	f7fb fc23 	bl	8002090 <HAL_PCD_EP_Transmit>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	4618      	mov	r0, r3
 8006852:	f000 f841 	bl	80068d8 <USBD_Get_USB_Status>
 8006856:	4603      	mov	r3, r0
 8006858:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800685a:	7dbb      	ldrb	r3, [r7, #22]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	460b      	mov	r3, r1
 8006872:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006882:	7af9      	ldrb	r1, [r7, #11]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	f7fb fbb7 	bl	8001ffa <HAL_PCD_EP_Receive>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 f820 	bl	80068d8 <USBD_Get_USB_Status>
 8006898:	4603      	mov	r3, r0
 800689a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800689c:	7dbb      	ldrb	r3, [r7, #22]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80068b0:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <USBD_static_malloc+0x18>)
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000188 	.word	0x20000188

080068c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]

}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068e6:	79fb      	ldrb	r3, [r7, #7]
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d817      	bhi.n	800691c <USBD_Get_USB_Status+0x44>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <USBD_Get_USB_Status+0x1c>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006905 	.word	0x08006905
 80068f8:	0800690b 	.word	0x0800690b
 80068fc:	08006911 	.word	0x08006911
 8006900:	08006917 	.word	0x08006917
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	73fb      	strb	r3, [r7, #15]
    break;
 8006908:	e00b      	b.n	8006922 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800690a:	2303      	movs	r3, #3
 800690c:	73fb      	strb	r3, [r7, #15]
    break;
 800690e:	e008      	b.n	8006922 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
    break;
 8006914:	e005      	b.n	8006922 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006916:	2303      	movs	r3, #3
 8006918:	73fb      	strb	r3, [r7, #15]
    break;
 800691a:	e002      	b.n	8006922 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	73fb      	strb	r3, [r7, #15]
    break;
 8006920:	bf00      	nop
  }
  return usb_status;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <__libc_init_array>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	4d0d      	ldr	r5, [pc, #52]	; (8006968 <__libc_init_array+0x38>)
 8006934:	4c0d      	ldr	r4, [pc, #52]	; (800696c <__libc_init_array+0x3c>)
 8006936:	1b64      	subs	r4, r4, r5
 8006938:	10a4      	asrs	r4, r4, #2
 800693a:	2600      	movs	r6, #0
 800693c:	42a6      	cmp	r6, r4
 800693e:	d109      	bne.n	8006954 <__libc_init_array+0x24>
 8006940:	4d0b      	ldr	r5, [pc, #44]	; (8006970 <__libc_init_array+0x40>)
 8006942:	4c0c      	ldr	r4, [pc, #48]	; (8006974 <__libc_init_array+0x44>)
 8006944:	f000 f820 	bl	8006988 <_init>
 8006948:	1b64      	subs	r4, r4, r5
 800694a:	10a4      	asrs	r4, r4, #2
 800694c:	2600      	movs	r6, #0
 800694e:	42a6      	cmp	r6, r4
 8006950:	d105      	bne.n	800695e <__libc_init_array+0x2e>
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	f855 3b04 	ldr.w	r3, [r5], #4
 8006958:	4798      	blx	r3
 800695a:	3601      	adds	r6, #1
 800695c:	e7ee      	b.n	800693c <__libc_init_array+0xc>
 800695e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006962:	4798      	blx	r3
 8006964:	3601      	adds	r6, #1
 8006966:	e7f2      	b.n	800694e <__libc_init_array+0x1e>
 8006968:	08006a08 	.word	0x08006a08
 800696c:	08006a08 	.word	0x08006a08
 8006970:	08006a08 	.word	0x08006a08
 8006974:	08006a0c 	.word	0x08006a0c

08006978 <memset>:
 8006978:	4402      	add	r2, r0
 800697a:	4603      	mov	r3, r0
 800697c:	4293      	cmp	r3, r2
 800697e:	d100      	bne.n	8006982 <memset+0xa>
 8006980:	4770      	bx	lr
 8006982:	f803 1b01 	strb.w	r1, [r3], #1
 8006986:	e7f9      	b.n	800697c <memset+0x4>

08006988 <_init>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	bf00      	nop
 800698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698e:	bc08      	pop	{r3}
 8006990:	469e      	mov	lr, r3
 8006992:	4770      	bx	lr

08006994 <_fini>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr
