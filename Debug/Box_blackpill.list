
Box_blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba0  08007ba0  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ba8  08007ba8  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bac  08007bac  00017bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08007bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000978  2000014c  08007cfc  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  08007cfc  00020ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ac2  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346d  00000000  00000000  00036c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  0003a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  0003aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001936e  00000000  00000000  0003bb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128a1  00000000  00000000  00054ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7f8  00000000  00000000  00067777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1f6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d8  00000000  00000000  000f1fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000014c 	.word	0x2000014c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b28 	.word	0x08007b28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000150 	.word	0x20000150
 80001d4:	08007b28 	.word	0x08007b28

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ReceiveCommand>:
*/

#include "COMMS.h"

void ReceiveCommand() // main communication function - reads incoming console message and replies accordingly
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  uint8_t command = ReceiveByte(); // read the first byte sent by the console
 80004d6:	f000 f901 	bl	80006dc <ReceiveByte>
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]

  switch (command)
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b41      	cmp	r3, #65	; 0x41
 80004e2:	d014      	beq.n	800050e <ReceiveCommand+0x3e>
 80004e4:	2b41      	cmp	r3, #65	; 0x41
 80004e6:	dc17      	bgt.n	8000518 <ReceiveCommand+0x48>
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d008      	beq.n	80004fe <ReceiveCommand+0x2e>
 80004ec:	2b40      	cmp	r3, #64	; 0x40
 80004ee:	d113      	bne.n	8000518 <ReceiveCommand+0x48>
  {
  case 0x40:	// Console asks for controller inputs
    ReceiveByte();       // get second command out of the way (useless byte)
 80004f0:	f000 f8f4 	bl	80006dc <ReceiveByte>
    ReceiveRumbleByte(); // get last 2 bits of 3rd command to check for rumble
 80004f4:	f000 f933 	bl	800075e <ReceiveRumbleByte>

    SendInputs();	// reply with controller inputs
 80004f8:	f000 f852 	bl	80005a0 <SendInputs>
    break;
 80004fc:	e00c      	b.n	8000518 <ReceiveCommand+0x48>

  case 0x00:	// console asks if a controller is plugged in
    modeUSB = 0;
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <ReceiveCommand+0x54>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
    FlushReceiveBuffer(); // flush UART buffer
 8000504:	f000 f9c2 	bl	800088c <FlushReceiveBuffer>
    SendPollResponse(); // reply to tell console that the controller is now plugged in
 8000508:	f000 f80e 	bl	8000528 <SendPollResponse>
    break;
 800050c:	e004      	b.n	8000518 <ReceiveCommand+0x48>

  case 0x41:	// console polls for controller origins
    FlushReceiveBuffer(); // flush UART buffer
 800050e:	f000 f9bd 	bl	800088c <FlushReceiveBuffer>
    SendOrigin(); // send origins
 8000512:	f000 f81c 	bl	800054e <SendOrigin>
    break;
 8000516:	bf00      	nop
  }
  FlushReceiveBuffer(); // flush UART buffer for good measure
 8000518:	f000 f9b8 	bl	800088c <FlushReceiveBuffer>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000000 	.word	0x20000000

08000528 <SendPollResponse>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SendPollResponse() // responds to console poll to check if a controller is plugged in (See GCN communication protocol guides)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  SetBaudSend(); // sets UART frame size to 6 (see function for details)
 800052c:	f000 f9cc 	bl	80008c8 <SetBaudSend>

  SendByte(0x09); // send expected poll response bytes
 8000530:	2009      	movs	r0, #9
 8000532:	f000 f893 	bl	800065c <SendByte>
  SendByte(0x00);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f890 	bl	800065c <SendByte>
  SendByte(0x03);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f88d 	bl	800065c <SendByte>
  SendStopBit(); // sends stop bit (duh)
 8000542:	f000 f99b 	bl	800087c <SendStopBit>

  SetBaudReceive(); // flushes buffer sets changes baud to 'receive mode' @1M baud (see function for details)
 8000546:	f000 f9cb 	bl	80008e0 <SetBaudReceive>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}

0800054e <SendOrigin>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SendOrigin() // responds to console poll for origin (See GCN communication protocol guides)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
  SetBaudSend(); // sets UART baud to 'send mode' @1.25M baud (see function for details)
 8000552:	f000 f9b9 	bl	80008c8 <SetBaudSend>

  SendByte((uint8_t)0x00); // Sends Start, Y, X, B, A and some overhead stuff, format is usually [0,0,0,St,Y,X,B,A]
 8000556:	2000      	movs	r0, #0
 8000558:	f000 f880 	bl	800065c <SendByte>
  SendByte((uint8_t)0x80); // Sends L, R, Z and Dpad inputs, format is usually [1,L,R,Z,Dup,Ddown,Dright,Dleft]
 800055c:	2080      	movs	r0, #128	; 0x80
 800055e:	f000 f87d 	bl	800065c <SendByte>

  SendByte((uint8_t)128); // control stick inputs
 8000562:	2080      	movs	r0, #128	; 0x80
 8000564:	f000 f87a 	bl	800065c <SendByte>
  SendByte((uint8_t)128);
 8000568:	2080      	movs	r0, #128	; 0x80
 800056a:	f000 f877 	bl	800065c <SendByte>

  SendByte((uint8_t)128); // c-stick inputs
 800056e:	2080      	movs	r0, #128	; 0x80
 8000570:	f000 f874 	bl	800065c <SendByte>
  SendByte((uint8_t)128);
 8000574:	2080      	movs	r0, #128	; 0x80
 8000576:	f000 f871 	bl	800065c <SendByte>

  SendByte((uint8_t)0x00); // analog L and R inputs
 800057a:	2000      	movs	r0, #0
 800057c:	f000 f86e 	bl	800065c <SendByte>
  SendByte((uint8_t)0x00);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 f86b 	bl	800065c <SendByte>

  SendByte((uint8_t)0x00); // null bytes (expected by console)
 8000586:	2000      	movs	r0, #0
 8000588:	f000 f868 	bl	800065c <SendByte>
  SendByte((uint8_t)0x00);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f865 	bl	800065c <SendByte>

  SendStopBit(); // stop bit
 8000592:	f000 f973 	bl	800087c <SendStopBit>

  SetBaudReceive(); // flushes buffer sets changes baud to 'receive mode' @1M baud (see function for details)
 8000596:	f000 f9a3 	bl	80008e0 <SetBaudReceive>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <SendInputs>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SendInputs() // sends inputs to console
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  SetBaudSend(); // sets UART baud to 'send mode' @1.25M baud (see function for details)
 80005a4:	f000 f990 	bl	80008c8 <SetBaudSend>

  SendByte(~(BTN_PIN) & BTN_StYXBA);                              // Sends Start, Y, X, B, A and some overhead stuff, format is usually [0,0,0,St,Y,X,B,A]
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <SendInputs+0x9c>)
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f003 031f 	and.w	r3, r3, #31
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f84f 	bl	800065c <SendByte>
  SendByte(((~(BTN_PIN) & BTN_LRZ) >> 1) | 0b10000000 | DPad); // Sends L, R, Z and Dpad inputs, format is usually [1,L,R,Z,Dup,Ddown,Dright,Dleft]
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SendInputs+0x9c>)
 80005c0:	691b      	ldr	r3, [r3, #16]
 80005c2:	43db      	mvns	r3, r3
 80005c4:	085b      	lsrs	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <SendInputs+0xa0>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f83c 	bl	800065c <SendByte>

  SendByte(ControlX); // control stick inputs
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <SendInputs+0xa4>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f836 	bl	800065c <SendByte>
  SendByte(ControlY);
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <SendInputs+0xa8>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f830 	bl	800065c <SendByte>

  SendByte(CstickX); // c-stick inputs
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <SendInputs+0xac>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f82a 	bl	800065c <SendByte>
  SendByte(CstickY);
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <SendInputs+0xb0>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f824 	bl	800065c <SendByte>

  SendByte(AnalogL); // analog L and R inputs
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <SendInputs+0xb4>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f81e 	bl	800065c <SendByte>
  SendByte(AnalogR);
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <SendInputs+0xb8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f818 	bl	800065c <SendByte>

  SendStopBit(); // stop bit
 800062c:	f000 f926 	bl	800087c <SendStopBit>

  FlushReceiveBuffer();
 8000630:	f000 f92c 	bl	800088c <FlushReceiveBuffer>

  SetBaudReceive(); // flushes buffer sets changes baud to 'receive mode' @1M baud (see function for details)
 8000634:	f000 f954 	bl	80008e0 <SetBaudReceive>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40020000 	.word	0x40020000
 8000640:	20000175 	.word	0x20000175
 8000644:	20000001 	.word	0x20000001
 8000648:	20000002 	.word	0x20000002
 800064c:	20000003 	.word	0x20000003
 8000650:	20000004 	.word	0x20000004
 8000654:	08007b85 	.word	0x08007b85
 8000658:	20000174 	.word	0x20000174

0800065c <SendByte>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SendByte(uint8_t dataByte) // Sends a full GC byte to the console in pairs of GC bits using 4 UART bytes (1.25M baud needed for sending)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  SendPair(Byte2GC((dataByte & 0b11000000) >> 6)); // splits byte into pairs, converts them to UART bytes and sends them
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	099b      	lsrs	r3, r3, #6
 800066a:	b2db      	uxtb	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f8b7 	bl	80007e0 <Byte2GC>
 8000672:	4603      	mov	r3, r0
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f887 	bl	8000788 <SendPair>
  SendPair(Byte2GC((dataByte & 0b00110000) >> 4));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	111b      	asrs	r3, r3, #4
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0303 	and.w	r3, r3, #3
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f8aa 	bl	80007e0 <Byte2GC>
 800068c:	4603      	mov	r3, r0
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f87a 	bl	8000788 <SendPair>
  SendPair(Byte2GC((dataByte & 0b00001100) >> 2));
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	109b      	asrs	r3, r3, #2
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0303 	and.w	r3, r3, #3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f89d 	bl	80007e0 <Byte2GC>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f86d 	bl	8000788 <SendPair>
  SendPair(Byte2GC(dataByte & 0b00000011));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 0303 	and.w	r3, r3, #3
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f892 	bl	80007e0 <Byte2GC>
 80006bc:	4603      	mov	r3, r0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f862 	bl	8000788 <SendPair>

  USART1->SR |= USART_SR_TC; // clear TRANSMIT_COMPLETE bit by writing a 1 to it (see STM32F411 datasheet)
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <SendByte+0x7c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <SendByte+0x7c>)
 80006ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40011000 	.word	0x40011000

080006dc <ReceiveByte>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t ReceiveByte() // Receives 1 full GC byte as 4 UART bytes (requires 1M baud for receiving)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  uint8_t first, second, third, last;

  first = ReceivePair(); // receive each pair of bytes
 80006e2:	f000 f869 	bl	80007b8 <ReceivePair>
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  second = ReceivePair();
 80006ea:	f000 f865 	bl	80007b8 <ReceivePair>
 80006ee:	4603      	mov	r3, r0
 80006f0:	71bb      	strb	r3, [r7, #6]
  third = ReceivePair();
 80006f2:	f000 f861 	bl	80007b8 <ReceivePair>
 80006f6:	4603      	mov	r3, r0
 80006f8:	717b      	strb	r3, [r7, #5]
  last = ReceivePair();
 80006fa:	f000 f85d 	bl	80007b8 <ReceivePair>
 80006fe:	4603      	mov	r3, r0
 8000700:	713b      	strb	r3, [r7, #4]

  first = GC2Byte(first); // convert UART bytes into GC bits
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f88d 	bl	8000824 <GC2Byte>
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  second = GC2Byte(second);
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f887 	bl	8000824 <GC2Byte>
 8000716:	4603      	mov	r3, r0
 8000718:	71bb      	strb	r3, [r7, #6]
  third = GC2Byte(third);
 800071a:	797b      	ldrb	r3, [r7, #5]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f881 	bl	8000824 <GC2Byte>
 8000722:	4603      	mov	r3, r0
 8000724:	717b      	strb	r3, [r7, #5]
  last = GC2Byte(last);
 8000726:	793b      	ldrb	r3, [r7, #4]
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f87b 	bl	8000824 <GC2Byte>
 800072e:	4603      	mov	r3, r0
 8000730:	713b      	strb	r3, [r7, #4]

  return (first << 6) | (second << 4) | (third << 2) | (last); // return GC byte
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	019b      	lsls	r3, r3, #6
 8000736:	b25a      	sxtb	r2, r3
 8000738:	79bb      	ldrb	r3, [r7, #6]
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	b25b      	sxtb	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b25a      	sxtb	r2, r3
 8000742:	797b      	ldrb	r3, [r7, #5]
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	b25b      	sxtb	r3, r3
 8000748:	4313      	orrs	r3, r2
 800074a:	b25a      	sxtb	r2, r3
 800074c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	b25b      	sxtb	r3, r3
 8000754:	b2db      	uxtb	r3, r3
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <ReceiveRumbleByte>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t ReceiveRumbleByte() // receives byte and checks last bit for rumble state
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  // uint8_t first, second, third, last;

  ReceivePair(); // skip first few bytes
 8000762:	f000 f829 	bl	80007b8 <ReceivePair>
  ReceivePair();
 8000766:	f000 f827 	bl	80007b8 <ReceivePair>
  ReceivePair();
 800076a:	f000 f825 	bl	80007b8 <ReceivePair>

  SetRumble(	     // reads UART and sets rumble based on the final console bit
 800076e:	f000 f823 	bl	80007b8 <ReceivePair>
 8000772:	4603      	mov	r3, r0
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f855 	bl	8000824 <GC2Byte>
 800077a:	4603      	mov	r3, r0
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f8c1 	bl	8000904 <SetRumble>
      GC2Byte(		// converts it to UART
	  ReceivePair())); // receives the last pair of bits
}
 8000782:	bf00      	nop
 8000784:	4618      	mov	r0, r3
 8000786:	bd80      	pop	{r7, pc}

08000788 <SendPair>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SendPair(uint8_t sent) // sends UART Byte via TX (needs 1.25M baud for sending)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  while (!(USART1->SR & USART_SR_TXE))
 8000792:	bf00      	nop
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <SendPair+0x2c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0f9      	beq.n	8000794 <SendPair+0xc>
    ;                // wait for TX buffer to be ready to send data

  USART1->DR = sent; // send data
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <SendPair+0x2c>)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	6053      	str	r3, [r2, #4]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40011000 	.word	0x40011000

080007b8 <ReceivePair>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t ReceivePair() // receives UART byte via RX (SHOULD USE 8-BIT FRAME)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  while (!(USART1->SR & USART_SR_RXNE))
 80007bc:	bf00      	nop
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <ReceivePair+0x24>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0320 	and.w	r3, r3, #32
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f9      	beq.n	80007be <ReceivePair+0x6>
    ; // wait for data to be received

  return USART1->DR; // read data
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <ReceivePair+0x24>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	b2db      	uxtb	r3, r3
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40011000 	.word	0x40011000

080007e0 <Byte2GC>:

uint8_t Byte2GC(uint8_t dataByte) // translates 2 GC bits into one UART byte - NAMED THIS WAY BECAUSE IT IS USED TO SEND DATA TO CONSOLES
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  switch (dataByte) // UART sends bits LSB first (unlike GC which sends them MSB first) so these have to be flipped
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d813      	bhi.n	8000818 <Byte2GC+0x38>
 80007f0:	a201      	add	r2, pc, #4	; (adr r2, 80007f8 <Byte2GC+0x18>)
 80007f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f6:	bf00      	nop
 80007f8:	08000809 	.word	0x08000809
 80007fc:	0800080d 	.word	0x0800080d
 8000800:	08000811 	.word	0x08000811
 8000804:	08000815 	.word	0x08000815
  {
    // start & stop bits in []
		  // GC bits      desired output            sent UART       	UART input
  case 0b00:
    return 0x08; // 0b00   ->    [0]00010000[1] -> (flip) -> [0]00001000[1]  ->  0x08
 8000808:	2308      	movs	r3, #8
 800080a:	e005      	b.n	8000818 <Byte2GC+0x38>
  case 0b01:
    return 0xE8; // 0b01   ->    [0]00010111[1] -> (flip) -> [0]11101000[1]  ->  0xE8
 800080c:	23e8      	movs	r3, #232	; 0xe8
 800080e:	e003      	b.n	8000818 <Byte2GC+0x38>
  case 0b10:
    return 0x0F; // 0b10   ->    [0]11110000[1] -> (flip) -> [0]00001111[1]  ->  0x0F
 8000810:	230f      	movs	r3, #15
 8000812:	e001      	b.n	8000818 <Byte2GC+0x38>
  case 0b11:
    return 0xEF; // 0b11   ->    [0]11110111[1] -> (flip) -> [0]11101111[1]  ->  0xEF
 8000814:	23ef      	movs	r3, #239	; 0xef
 8000816:	e7ff      	b.n	8000818 <Byte2GC+0x38>
  }
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <GC2Byte>:

uint8_t GC2Byte(uint8_t dataByte) // translates 1 UART byte to 2 GC bits - NAMED THIS WAY BECAUSE IT IS USED TO RECEIVE DATA FROM CONSOLES
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  dataByte &= 0b01010010; // we only care about checking the 2nd and 2nd-last in the UART since they correspond with the GC bits (possible values )
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 0352 	and.w	r3, r3, #82	; 0x52
 8000834:	71fb      	strb	r3, [r7, #7]
                          // the middle bit is checked to see if its a stop bit (1 if stop bit)

  switch (dataByte)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b52      	cmp	r3, #82	; 0x52
 800083a:	d016      	beq.n	800086a <GC2Byte+0x46>
 800083c:	2b52      	cmp	r3, #82	; 0x52
 800083e:	dc16      	bgt.n	800086e <GC2Byte+0x4a>
 8000840:	2b42      	cmp	r3, #66	; 0x42
 8000842:	d010      	beq.n	8000866 <GC2Byte+0x42>
 8000844:	2b42      	cmp	r3, #66	; 0x42
 8000846:	dc12      	bgt.n	800086e <GC2Byte+0x4a>
 8000848:	2b40      	cmp	r3, #64	; 0x40
 800084a:	d008      	beq.n	800085e <GC2Byte+0x3a>
 800084c:	2b40      	cmp	r3, #64	; 0x40
 800084e:	dc0e      	bgt.n	800086e <GC2Byte+0x4a>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <GC2Byte+0x36>
 8000854:	2b02      	cmp	r3, #2
 8000856:	d004      	beq.n	8000862 <GC2Byte+0x3e>
 8000858:	e009      	b.n	800086e <GC2Byte+0x4a>
  {
  case 0x00: 	// 0b 0000 0000
    return 0;
 800085a:	2300      	movs	r3, #0
 800085c:	e008      	b.n	8000870 <GC2Byte+0x4c>
  case 0x40:	// 0b 0100 0000
    return 1;
 800085e:	2301      	movs	r3, #1
 8000860:	e006      	b.n	8000870 <GC2Byte+0x4c>
  case 0x02:	// 0b 0000 0010
    return 2;
 8000862:	2302      	movs	r3, #2
 8000864:	e004      	b.n	8000870 <GC2Byte+0x4c>
  case 0x42:	// 0b 0100 0010
    return 3;
 8000866:	2303      	movs	r3, #3
 8000868:	e002      	b.n	8000870 <GC2Byte+0x4c>
  case 0x52:	// 0b 0101 0010
    return 255; // STOP bit if input is 0b 0101 0010
 800086a:	23ff      	movs	r3, #255	; 0xff
 800086c:	e000      	b.n	8000870 <GC2Byte+0x4c>
  default:
    return 0; // default to 00 if something goes wrong
 800086e:	2300      	movs	r3, #0
  }
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SendStopBit>:

void SendStopBit()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  SendPair(0xFF); // send (01111111) stop bit to tell console that your message is done
 8000880:	20ff      	movs	r0, #255	; 0xff
 8000882:	f7ff ff81 	bl	8000788 <SendPair>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <FlushReceiveBuffer>:

void FlushReceiveBuffer() // clear receiver buffer before changing frame size or awaiting new messages from the console
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  while (!(USART1->SR & USART_SR_TC)) // wait for transmitting to be done
 8000892:	bf00      	nop
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <FlushReceiveBuffer+0x38>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0f9      	beq.n	8000894 <FlushReceiveBuffer+0x8>
    ;
  uint32_t dummy;			// dummy variable

  while (USART1->SR & USART_SR_RXNE)
 80008a0:	e002      	b.n	80008a8 <FlushReceiveBuffer+0x1c>
    dummy = USART1->DR; // read data until no more data is in the buffer
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <FlushReceiveBuffer+0x38>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	607b      	str	r3, [r7, #4]
  while (USART1->SR & USART_SR_RXNE)
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <FlushReceiveBuffer+0x38>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f6      	bne.n	80008a2 <FlushReceiveBuffer+0x16>
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40011000 	.word	0x40011000

080008c8 <SetBaudSend>:

//SETTING BAUD RATE - console communication use 5ms bits for console->controller messages and 4ms bits for controller->console messages
//			therefore the baud needs to be adjusted for each case between sending/receiving messages

void SetBaudSend() // changes UART baud rate to 1.25M (after receiving a console command and before sending a controller message - this baud is used for sending)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  FlushReceiveBuffer();
 80008cc:	f7ff ffde 	bl	800088c <FlushReceiveBuffer>
  USART1->BRR = 0x095; // set baud to 1.25M
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <SetBaudSend+0x14>)
 80008d2:	2295      	movs	r2, #149	; 0x95
 80008d4:	609a      	str	r2, [r3, #8]
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40011000 	.word	0x40011000

080008e0 <SetBaudReceive>:

void SetBaudReceive() // changes UART Baud rate to 1M (after receiving sending a controller message - this is the default baud for receiving data from the console)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  FlushReceiveBuffer();
 80008e4:	f7ff ffd2 	bl	800088c <FlushReceiveBuffer>
  while (!(USART1->SR & USART_SR_TC))
 80008e8:	bf00      	nop
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <SetBaudReceive+0x20>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f9      	beq.n	80008ea <SetBaudReceive+0xa>
    ; // wait for transmit buffer to be clear (i.e. wait for the controller message to be sent)
  USART1->BRR = 0x0C0; // set baud to 1M
 80008f6:	4b02      	ldr	r3, [pc, #8]	; (8000900 <SetBaudReceive+0x20>)
 80008f8:	22c0      	movs	r2, #192	; 0xc0
 80008fa:	609a      	str	r2, [r3, #8]
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40011000 	.word	0x40011000

08000904 <SetRumble>:


void SetRumble(uint8_t command) // takes pair of console bits in the form of UART
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  RMBL_PIN &= ~RMBL_MASK;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <SetRumble+0x38>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <SetRumble+0x38>)
 8000914:	f023 0310 	bic.w	r3, r3, #16
 8000918:	6153      	str	r3, [r2, #20]
  RMBL_PIN |= (RMBL_MASK) * (command & 1);
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <SetRumble+0x38>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	f002 0201 	and.w	r2, r2, #1
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	4611      	mov	r1, r2
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <SetRumble+0x38>)
 800092a:	430b      	orrs	r3, r1
 800092c:	6153      	str	r3, [r2, #20]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40020400 	.word	0x40020400

08000940 <Digital_Analog_Conversion>:

//uint32_t PB; // debug only
//uint32_t PA;

void Digital_Analog_Conversion() // main DAC function, takes care of updating analog inputs and Dpad
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
//  PB = GPIOB->IDR; // debug
//  PA = GPIOA->IDR;

  ControlDAC(); // DAC for analog sticks + dpad
 8000944:	f000 f806 	bl	8000954 <ControlDAC>
  TriggersDAC(); // DAC for analog trigger presses
 8000948:	f000 fdfc 	bl	8001544 <TriggersDAC>

  UpdateAnalog(); // update control stick + dpad value
 800094c:	f000 fed4 	bl	80016f8 <UpdateAnalog>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <ControlDAC>:

void ControlDAC() // DAC for analog sticks + dpad - mostly based on Crane's DAC software in his fantastic firmware - https://github.com/Crane1195/CL-FW
{		  // some code here was orignially written for slower AVR chips, so its optimized for speed rather than human readability
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  posX = SOCD_TwoIPNoR((CTRL_PIN & CTRL_HORIZ), &Ctrl_SOCD_X);			// figure out SOCD for analog sticks
 800095a:	4ba9      	ldr	r3, [pc, #676]	; (8000c00 <ControlDAC+0x2ac>)
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	49a7      	ldr	r1, [pc, #668]	; (8000c04 <ControlDAC+0x2b0>)
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fe71 	bl	8001650 <SOCD_TwoIPNoR>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4ba5      	ldr	r3, [pc, #660]	; (8000c08 <ControlDAC+0x2b4>)
 8000974:	801a      	strh	r2, [r3, #0]
  posY = SOCD_TwoIPNoR((CTRL_PIN & CTRL_VERT) >> CTRL_UP, &Ctrl_SOCD_Y);	// SOCD used is TwoIPNoR
 8000976:	4ba2      	ldr	r3, [pc, #648]	; (8000c00 <ControlDAC+0x2ac>)
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	099b      	lsrs	r3, r3, #6
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	49a1      	ldr	r1, [pc, #644]	; (8000c0c <ControlDAC+0x2b8>)
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fe62 	bl	8001650 <SOCD_TwoIPNoR>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	4b9f      	ldr	r3, [pc, #636]	; (8000c10 <ControlDAC+0x2bc>)
 8000992:	801a      	strh	r2, [r3, #0]

  posCX = SOCD_TwoIPNoR((CSTK_PIN & CSTK_HORIZ) >> CSTK_RIGHT, &CStk_SOCD_X);
 8000994:	4b9a      	ldr	r3, [pc, #616]	; (8000c00 <ControlDAC+0x2ac>)
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	0b1b      	lsrs	r3, r3, #12
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	499c      	ldr	r1, [pc, #624]	; (8000c14 <ControlDAC+0x2c0>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fe53 	bl	8001650 <SOCD_TwoIPNoR>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b9a      	ldr	r3, [pc, #616]	; (8000c18 <ControlDAC+0x2c4>)
 80009b0:	801a      	strh	r2, [r3, #0]
  posCY = SOCD_TwoIPNoR((CSTK_PIN & CSTK_VERT) >> CSTK_UP, &CStk_SOCD_Y);
 80009b2:	4b93      	ldr	r3, [pc, #588]	; (8000c00 <ControlDAC+0x2ac>)
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	0b9b      	lsrs	r3, r3, #14
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4996      	ldr	r1, [pc, #600]	; (8000c1c <ControlDAC+0x2c8>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fe44 	bl	8001650 <SOCD_TwoIPNoR>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b94      	ldr	r3, [pc, #592]	; (8000c20 <ControlDAC+0x2cc>)
 80009ce:	801a      	strh	r2, [r3, #0]


  if (!dPad_on)
 80009d0:	4b94      	ldr	r3, [pc, #592]	; (8000c24 <ControlDAC+0x2d0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	f083 0301 	eor.w	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d019      	beq.n	8000a12 <ControlDAC+0xbe>
  {
    CstickX = NEUTRAL + (MAXOFFSET * posCX); // update C-stick values directly if Dpad mode is off
 80009de:	4b8e      	ldr	r3, [pc, #568]	; (8000c18 <ControlDAC+0x2c4>)
 80009e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	3b80      	subs	r3, #128	; 0x80
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b8c      	ldr	r3, [pc, #560]	; (8000c28 <ControlDAC+0x2d4>)
 80009f6:	701a      	strb	r2, [r3, #0]
    CstickY = NEUTRAL + (MAXOFFSET * posCY);
 80009f8:	4b89      	ldr	r3, [pc, #548]	; (8000c20 <ControlDAC+0x2cc>)
 80009fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	0092      	lsls	r2, r2, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	3b80      	subs	r3, #128	; 0x80
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b87      	ldr	r3, [pc, #540]	; (8000c2c <ControlDAC+0x2d8>)
 8000a10:	701a      	strb	r2, [r3, #0]
  }
  dPad_on = false;
 8000a12:	4b84      	ldr	r3, [pc, #528]	; (8000c24 <ControlDAC+0x2d0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]

  uint8_t mod = (CTRL_PIN & CTRL_MOD) >> CTRL_MX; // bit 0 is MODX and bit 1 is MODY
 8000a18:	4b79      	ldr	r3, [pc, #484]	; (8000c00 <ControlDAC+0x2ac>)
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	71bb      	strb	r3, [r7, #6]

  // check if input is horizontal (0b0001), vertical (0b0010) or diagonal (0b0100)
  uint8_t Direction = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	71fb      	strb	r3, [r7, #7]

  DAC_ControlX = NEUTRAL;
 8000a2a:	4b81      	ldr	r3, [pc, #516]	; (8000c30 <ControlDAC+0x2dc>)
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	701a      	strb	r2, [r3, #0]
  DAC_ControlY = NEUTRAL;
 8000a30:	4b80      	ldr	r3, [pc, #512]	; (8000c34 <ControlDAC+0x2e0>)
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	701a      	strb	r2, [r3, #0]

  if (posX)
 8000a36:	4b74      	ldr	r3, [pc, #464]	; (8000c08 <ControlDAC+0x2b4>)
 8000a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <ControlDAC+0xf4>
    Direction |= 0b00000001;
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	71fb      	strb	r3, [r7, #7]
  if (posY)
 8000a48:	4b71      	ldr	r3, [pc, #452]	; (8000c10 <ControlDAC+0x2bc>)
 8000a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <ControlDAC+0x106>
    Direction |= 0b00000010;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	71fb      	strb	r3, [r7, #7]
  if (Direction == 0b00000011)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d101      	bne.n	8000a64 <ControlDAC+0x110>
    Direction = 0b00000100;
 8000a60:	2304      	movs	r3, #4
 8000a62:	71fb      	strb	r3, [r7, #7]


  switch (mod) // check combination of ModX and ModY
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	f200 853c 	bhi.w	80014e4 <ControlDAC+0xb90>
 8000a6c:	a201      	add	r2, pc, #4	; (adr r2, 8000a74 <ControlDAC+0x120>)
 8000a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a72:	bf00      	nop
 8000a74:	080014df 	.word	0x080014df
 8000a78:	08001077 	.word	0x08001077
 8000a7c:	08000b8b 	.word	0x08000b8b
 8000a80:	08000a85 	.word	0x08000a85
  {
  case 0b00000011: // neither pressed ///////////////////////////////////////////////////////////////////////

    switch (Direction) // check direction
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d02c      	beq.n	8000ae4 <ControlDAC+0x190>
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	f300 8545 	bgt.w	800151a <ControlDAC+0xbc6>
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d003      	beq.n	8000a9c <ControlDAC+0x148>
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d013      	beq.n	8000ac0 <ControlDAC+0x16c>
      // ELSE
      DAC_ControlX += (DIAGONAL_X * posX);
      DAC_ControlY += (DIAGONAL_Y * posY);
      return;
    }
    return;
 8000a98:	f000 bd3f 	b.w	800151a <ControlDAC+0xbc6>
      DAC_ControlX += (MAXOFFSET * posX);
 8000a9c:	4b5a      	ldr	r3, [pc, #360]	; (8000c08 <ControlDAC+0x2b4>)
 8000a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b60      	ldr	r3, [pc, #384]	; (8000c30 <ControlDAC+0x2dc>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b5d      	ldr	r3, [pc, #372]	; (8000c30 <ControlDAC+0x2dc>)
 8000aba:	701a      	strb	r2, [r3, #0]
      return;
 8000abc:	f000 bd32 	b.w	8001524 <ControlDAC+0xbd0>
      DAC_ControlY += (MAXOFFSET * posY);
 8000ac0:	4b53      	ldr	r3, [pc, #332]	; (8000c10 <ControlDAC+0x2bc>)
 8000ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	0092      	lsls	r2, r2, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b58      	ldr	r3, [pc, #352]	; (8000c34 <ControlDAC+0x2e0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b55      	ldr	r3, [pc, #340]	; (8000c34 <ControlDAC+0x2e0>)
 8000ade:	701a      	strb	r2, [r3, #0]
      return;
 8000ae0:	f000 bd20 	b.w	8001524 <ControlDAC+0xbd0>
      if ((~BTN_PIN & BTN_LR) || (~SHIELD_PIN & SHIELD_MOD))
 8000ae4:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <ControlDAC+0x2e4>)
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d106      	bne.n	8000b00 <ControlDAC+0x1ac>
 8000af2:	4b51      	ldr	r3, [pc, #324]	; (8000c38 <ControlDAC+0x2e4>)
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d022      	beq.n	8000b46 <ControlDAC+0x1f2>
        DAC_ControlX += (DIAG_SHIELD_X * posX);
 8000b00:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <ControlDAC+0x2b4>)
 8000b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	00d2      	lsls	r2, r2, #3
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <ControlDAC+0x2dc>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <ControlDAC+0x2dc>)
 8000b1e:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (DIAG_SHIELD_Y * posY);
 8000b20:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <ControlDAC+0x2bc>)
 8000b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	00d2      	lsls	r2, r2, #3
 8000b2c:	1ad2      	subs	r2, r2, r3
 8000b2e:	00d2      	lsls	r2, r2, #3
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <ControlDAC+0x2e0>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	; (8000c34 <ControlDAC+0x2e0>)
 8000b40:	701a      	strb	r2, [r3, #0]
        return;
 8000b42:	f000 bcef 	b.w	8001524 <ControlDAC+0xbd0>
      DAC_ControlX += (DIAGONAL_X * posX);
 8000b46:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <ControlDAC+0x2b4>)
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	00d2      	lsls	r2, r2, #3
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <ControlDAC+0x2dc>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <ControlDAC+0x2dc>)
 8000b64:	701a      	strb	r2, [r3, #0]
      DAC_ControlY += (DIAGONAL_Y * posY);
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <ControlDAC+0x2bc>)
 8000b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	00d2      	lsls	r2, r2, #3
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <ControlDAC+0x2e0>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <ControlDAC+0x2e0>)
 8000b84:	701a      	strb	r2, [r3, #0]
      return;
 8000b86:	f000 bccd 	b.w	8001524 <ControlDAC+0xbd0>
  case 0b00000010: // modx pressed //////////////////////////////////////////////////////////////////////////////////
    switch (Direction) // check direction
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	f000 8086 	beq.w	8000c9e <ControlDAC+0x34a>
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	f300 824b 	bgt.w	800102e <ControlDAC+0x6da>
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d002      	beq.n	8000ba2 <ControlDAC+0x24e>
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d04d      	beq.n	8000c3c <ControlDAC+0x2e8>
 8000ba0:	e245      	b.n	800102e <ControlDAC+0x6da>
    {
    case (0b00000001):             // horizontal /////////////////////////////////
      if (~BTN_PIN & (1 << BTN_B)) // if B is pressed
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <ControlDAC+0x2e4>)
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d013      	beq.n	8000bd8 <ControlDAC+0x284>
      {
        DAC_ControlX += (MODX_H_B_X * posX); // side-b nerf
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <ControlDAC+0x2b4>)
 8000bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	0052      	lsls	r2, r2, #1
 8000bbc:	441a      	add	r2, r3
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	441a      	add	r2, r3
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <ControlDAC+0x2dc>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <ControlDAC+0x2dc>)
 8000bd4:	701a      	strb	r2, [r3, #0]
        break;
 8000bd6:	e22a      	b.n	800102e <ControlDAC+0x6da>
      }
      // ELSE
      DAC_ControlX += (MODX_H_X * posX);
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <ControlDAC+0x2b4>)
 8000bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	0052      	lsls	r2, r2, #1
 8000be4:	441a      	add	r2, r3
 8000be6:	0092      	lsls	r2, r2, #2
 8000be8:	441a      	add	r2, r3
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <ControlDAC+0x2dc>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <ControlDAC+0x2dc>)
 8000bfc:	701a      	strb	r2, [r3, #0]
      break;
 8000bfe:	e216      	b.n	800102e <ControlDAC+0x6da>
 8000c00:	40020400 	.word	0x40020400
 8000c04:	20000170 	.word	0x20000170
 8000c08:	20000168 	.word	0x20000168
 8000c0c:	20000171 	.word	0x20000171
 8000c10:	2000016a 	.word	0x2000016a
 8000c14:	20000172 	.word	0x20000172
 8000c18:	2000016c 	.word	0x2000016c
 8000c1c:	20000173 	.word	0x20000173
 8000c20:	2000016e 	.word	0x2000016e
 8000c24:	20000176 	.word	0x20000176
 8000c28:	20000003 	.word	0x20000003
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	20000196 	.word	0x20000196
 8000c34:	20000195 	.word	0x20000195
 8000c38:	40020000 	.word	0x40020000

    case (0b00000010):             // vertical /////////////////////////////////
      if (~BTN_PIN & (1 << BTN_B)) // if B is pressed
 8000c3c:	4ba2      	ldr	r3, [pc, #648]	; (8000ec8 <ControlDAC+0x574>)
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d014      	beq.n	8000c74 <ControlDAC+0x320>
      {
        DAC_ControlY += (MODX_V_B_Y * posY); // side-b nerf
 8000c4a:	4ba0      	ldr	r3, [pc, #640]	; (8000ecc <ControlDAC+0x578>)
 8000c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	0052      	lsls	r2, r2, #1
 8000c56:	441a      	add	r2, r3
 8000c58:	4611      	mov	r1, r2
 8000c5a:	00c9      	lsls	r1, r1, #3
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	0052      	lsls	r2, r2, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b9a      	ldr	r3, [pc, #616]	; (8000ed0 <ControlDAC+0x57c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b98      	ldr	r3, [pc, #608]	; (8000ed0 <ControlDAC+0x57c>)
 8000c70:	701a      	strb	r2, [r3, #0]
        break;
 8000c72:	e1dc      	b.n	800102e <ControlDAC+0x6da>
      }
      // ELSE
      DAC_ControlY += (MODX_V_Y * posY);
 8000c74:	4b95      	ldr	r3, [pc, #596]	; (8000ecc <ControlDAC+0x578>)
 8000c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	0052      	lsls	r2, r2, #1
 8000c80:	441a      	add	r2, r3
 8000c82:	4611      	mov	r1, r2
 8000c84:	00c9      	lsls	r1, r1, #3
 8000c86:	1a8a      	subs	r2, r1, r2
 8000c88:	0052      	lsls	r2, r2, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b90      	ldr	r3, [pc, #576]	; (8000ed0 <ControlDAC+0x57c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4413      	add	r3, r2
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b8d      	ldr	r3, [pc, #564]	; (8000ed0 <ControlDAC+0x57c>)
 8000c9a:	701a      	strb	r2, [r3, #0]
      break;
 8000c9c:	e1c7      	b.n	800102e <ControlDAC+0x6da>

    case (0b00000100):       // diagonal //////////////////////////////////
      if (~BTN_PIN & BTN_LR) // if L/R are pressed
 8000c9e:	4b8a      	ldr	r3, [pc, #552]	; (8000ec8 <ControlDAC+0x574>)
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d024      	beq.n	8000cf6 <ControlDAC+0x3a2>
      {
        DAC_ControlX += (MODX_D_SHIELD_X * posX); // MODX wavedash
 8000cac:	4b89      	ldr	r3, [pc, #548]	; (8000ed4 <ControlDAC+0x580>)
 8000cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	0052      	lsls	r2, r2, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	461a      	mov	r2, r3
 8000cbc:	0111      	lsls	r1, r2, #4
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b84      	ldr	r3, [pc, #528]	; (8000ed8 <ControlDAC+0x584>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4413      	add	r3, r2
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b81      	ldr	r3, [pc, #516]	; (8000ed8 <ControlDAC+0x584>)
 8000cd2:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODX_D_SHIELD_Y * posY);
 8000cd4:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <ControlDAC+0x578>)
 8000cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b7a      	ldr	r3, [pc, #488]	; (8000ed0 <ControlDAC+0x57c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4413      	add	r3, r2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b77      	ldr	r3, [pc, #476]	; (8000ed0 <ControlDAC+0x57c>)
 8000cf2:	701a      	strb	r2, [r3, #0]
        break;
 8000cf4:	e19b      	b.n	800102e <ControlDAC+0x6da>
      }

      // ELSE
      if (!(~CSTK_PIN & CSTK_CSTK)) // if Cstick buttons are NOT pressed
 8000cf6:	4b79      	ldr	r3, [pc, #484]	; (8000edc <ControlDAC+0x588>)
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d125      	bne.n	8000d50 <ControlDAC+0x3fc>
      {
        DAC_ControlX += (MODX_DIAG_X * posX); // MODX tilt
 8000d04:	4b73      	ldr	r3, [pc, #460]	; (8000ed4 <ControlDAC+0x580>)
 8000d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	1ad2      	subs	r2, r2, r3
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b6f      	ldr	r3, [pc, #444]	; (8000ed8 <ControlDAC+0x584>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4413      	add	r3, r2
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b6d      	ldr	r3, [pc, #436]	; (8000ed8 <ControlDAC+0x584>)
 8000d24:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODX_DIAG_Y * posY);
 8000d26:	4b69      	ldr	r3, [pc, #420]	; (8000ecc <ControlDAC+0x578>)
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	0091      	lsls	r1, r2, #2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b63      	ldr	r3, [pc, #396]	; (8000ed0 <ControlDAC+0x57c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b61      	ldr	r3, [pc, #388]	; (8000ed0 <ControlDAC+0x57c>)
 8000d4c:	701a      	strb	r2, [r3, #0]
        break;
 8000d4e:	e16e      	b.n	800102e <ControlDAC+0x6da>
      }

      // ELSE
      if (~BTN_PIN & (1 << BTN_B)) // if B is held for extended angles
 8000d50:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <ControlDAC+0x574>)
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 80c0 	beq.w	8000ee0 <ControlDAC+0x58c>
      {
        if (~CSTK_PIN & (1 << CSTK_DOWN))
 8000d60:	4b5e      	ldr	r3, [pc, #376]	; (8000edc <ControlDAC+0x588>)
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d023      	beq.n	8000db6 <ControlDAC+0x462>
        {
          DAC_ControlX += (MODX_D_CD_B_X * posX);
 8000d6e:	4b59      	ldr	r3, [pc, #356]	; (8000ed4 <ControlDAC+0x580>)
 8000d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	00d2      	lsls	r2, r2, #3
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <ControlDAC+0x584>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b51      	ldr	r3, [pc, #324]	; (8000ed8 <ControlDAC+0x584>)
 8000d92:	701a      	strb	r2, [r3, #0]
          DAC_ControlY += (MODX_D_CD_B_Y * posY);
 8000d94:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <ControlDAC+0x578>)
 8000d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b4a      	ldr	r3, [pc, #296]	; (8000ed0 <ControlDAC+0x57c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4413      	add	r3, r2
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <ControlDAC+0x57c>)
 8000db2:	701a      	strb	r2, [r3, #0]
          break;
 8000db4:	e13b      	b.n	800102e <ControlDAC+0x6da>
        }
        // ELSE
        if (~CSTK_PIN & (1 << CSTK_LEFT))
 8000db6:	4b49      	ldr	r3, [pc, #292]	; (8000edc <ControlDAC+0x588>)
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d023      	beq.n	8000e0c <ControlDAC+0x4b8>
        {
          DAC_ControlX += (MODX_D_CL_B_X * posX);
 8000dc4:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <ControlDAC+0x580>)
 8000dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <ControlDAC+0x584>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4413      	add	r3, r2
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <ControlDAC+0x584>)
 8000de2:	701a      	strb	r2, [r3, #0]
          DAC_ControlY += (MODX_D_CL_B_Y * posY);
 8000de4:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <ControlDAC+0x578>)
 8000de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	0052      	lsls	r2, r2, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	461a      	mov	r2, r3
 8000df4:	00d2      	lsls	r2, r2, #3
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <ControlDAC+0x57c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <ControlDAC+0x57c>)
 8000e08:	701a      	strb	r2, [r3, #0]
          break;
 8000e0a:	e110      	b.n	800102e <ControlDAC+0x6da>
        }
        // ELSE
        if (~CSTK_PIN & (1 << CSTK_UP))
 8000e0c:	4b33      	ldr	r3, [pc, #204]	; (8000edc <ControlDAC+0x588>)
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d025      	beq.n	8000e66 <ControlDAC+0x512>
        {
          DAC_ControlX += (MODX_D_CU_B_X * posX);
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <ControlDAC+0x580>)
 8000e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <ControlDAC+0x584>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <ControlDAC+0x584>)
 8000e3a:	701a      	strb	r2, [r3, #0]
          DAC_ControlY += (MODX_D_CU_B_Y * posY);
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <ControlDAC+0x578>)
 8000e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	0052      	lsls	r2, r2, #1
 8000e48:	441a      	add	r2, r3
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	00c9      	lsls	r1, r1, #3
 8000e4e:	1a8a      	subs	r2, r1, r2
 8000e50:	0052      	lsls	r2, r2, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <ControlDAC+0x57c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <ControlDAC+0x57c>)
 8000e62:	701a      	strb	r2, [r3, #0]
          break;
 8000e64:	e0e3      	b.n	800102e <ControlDAC+0x6da>
        }
        // ELSE
        if (~CSTK_PIN & (1 << CSTK_RIGHT))
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <ControlDAC+0x588>)
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d035      	beq.n	8000ee0 <ControlDAC+0x58c>
        {
          DAC_ControlX += (MODX_D_CR_B_X * posX);
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <ControlDAC+0x580>)
 8000e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	0052      	lsls	r2, r2, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	461a      	mov	r2, r3
 8000e84:	0111      	lsls	r1, r2, #4
 8000e86:	461a      	mov	r2, r3
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <ControlDAC+0x584>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <ControlDAC+0x584>)
 8000e9a:	701a      	strb	r2, [r3, #0]
          DAC_ControlY += (MODX_D_CR_B_Y * posY);
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <ControlDAC+0x578>)
 8000e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	0052      	lsls	r2, r2, #1
 8000ea8:	441a      	add	r2, r3
 8000eaa:	4611      	mov	r1, r2
 8000eac:	00c9      	lsls	r1, r1, #3
 8000eae:	1a8a      	subs	r2, r1, r2
 8000eb0:	0052      	lsls	r2, r2, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <ControlDAC+0x57c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <ControlDAC+0x57c>)
 8000ec2:	701a      	strb	r2, [r3, #0]
          break;
 8000ec4:	e0b3      	b.n	800102e <ControlDAC+0x6da>
 8000ec6:	bf00      	nop
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	2000016a 	.word	0x2000016a
 8000ed0:	20000195 	.word	0x20000195
 8000ed4:	20000168 	.word	0x20000168
 8000ed8:	20000196 	.word	0x20000196
 8000edc:	40020400 	.word	0x40020400
        }
      }

      if (~CSTK_PIN & (1 << CSTK_DOWN))
 8000ee0:	4bae      	ldr	r3, [pc, #696]	; (800119c <ControlDAC+0x848>)
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d021      	beq.n	8000f32 <ControlDAC+0x5de>
      {
        DAC_ControlX += (MODX_D_CD_X * posX);
 8000eee:	4bac      	ldr	r3, [pc, #688]	; (80011a0 <ControlDAC+0x84c>)
 8000ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4ba8      	ldr	r3, [pc, #672]	; (80011a4 <ControlDAC+0x850>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4413      	add	r3, r2
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4ba6      	ldr	r3, [pc, #664]	; (80011a4 <ControlDAC+0x850>)
 8000f0c:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODX_D_CD_Y * posY);
 8000f0e:	4ba6      	ldr	r3, [pc, #664]	; (80011a8 <ControlDAC+0x854>)
 8000f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	00d2      	lsls	r2, r2, #3
 8000f1a:	1ad2      	subs	r2, r2, r3
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4ba2      	ldr	r3, [pc, #648]	; (80011ac <ControlDAC+0x858>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b9f      	ldr	r3, [pc, #636]	; (80011ac <ControlDAC+0x858>)
 8000f2e:	701a      	strb	r2, [r3, #0]
        break;
 8000f30:	e07d      	b.n	800102e <ControlDAC+0x6da>
      }
      // ELSE
      if (~CSTK_PIN & (1 << CSTK_LEFT))
 8000f32:	4b9a      	ldr	r3, [pc, #616]	; (800119c <ControlDAC+0x848>)
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d020      	beq.n	8000f82 <ControlDAC+0x62e>
      {
        DAC_ControlX += (MODX_D_CL_X * posX);
 8000f40:	4b97      	ldr	r3, [pc, #604]	; (80011a0 <ControlDAC+0x84c>)
 8000f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	0192      	lsls	r2, r2, #6
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b94      	ldr	r3, [pc, #592]	; (80011a4 <ControlDAC+0x850>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b92      	ldr	r3, [pc, #584]	; (80011a4 <ControlDAC+0x850>)
 8000f5c:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODX_D_CL_Y * posY);
 8000f5e:	4b92      	ldr	r3, [pc, #584]	; (80011a8 <ControlDAC+0x854>)
 8000f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	441a      	add	r2, r3
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b8e      	ldr	r3, [pc, #568]	; (80011ac <ControlDAC+0x858>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b8b      	ldr	r3, [pc, #556]	; (80011ac <ControlDAC+0x858>)
 8000f7e:	701a      	strb	r2, [r3, #0]
        break;
 8000f80:	e055      	b.n	800102e <ControlDAC+0x6da>
      }
      // ELSE
      if (~CSTK_PIN & (1 << CSTK_UP))
 8000f82:	4b86      	ldr	r3, [pc, #536]	; (800119c <ControlDAC+0x848>)
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d021      	beq.n	8000fd4 <ControlDAC+0x680>
      {
        DAC_ControlX += (MODX_D_CU_X * posX);
 8000f90:	4b83      	ldr	r3, [pc, #524]	; (80011a0 <ControlDAC+0x84c>)
 8000f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	00d2      	lsls	r2, r2, #3
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b80      	ldr	r3, [pc, #512]	; (80011a4 <ControlDAC+0x850>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b7d      	ldr	r3, [pc, #500]	; (80011a4 <ControlDAC+0x850>)
 8000fae:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODX_D_CU_Y * posY);
 8000fb0:	4b7d      	ldr	r3, [pc, #500]	; (80011a8 <ControlDAC+0x854>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	441a      	add	r2, r3
 8000fbe:	00d2      	lsls	r2, r2, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b79      	ldr	r3, [pc, #484]	; (80011ac <ControlDAC+0x858>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b77      	ldr	r3, [pc, #476]	; (80011ac <ControlDAC+0x858>)
 8000fd0:	701a      	strb	r2, [r3, #0]
        break;
 8000fd2:	e02c      	b.n	800102e <ControlDAC+0x6da>
      }
      // ELSE
      if (~CSTK_PIN & (1 << CSTK_RIGHT))
 8000fd4:	4b71      	ldr	r3, [pc, #452]	; (800119c <ControlDAC+0x848>)
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d025      	beq.n	800102e <ControlDAC+0x6da>
      {
        DAC_ControlX += (MODX_D_CR_X * posX);
 8000fe2:	4b6f      	ldr	r3, [pc, #444]	; (80011a0 <ControlDAC+0x84c>)
 8000fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	00d2      	lsls	r2, r2, #3
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	00d2      	lsls	r2, r2, #3
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <ControlDAC+0x850>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4413      	add	r3, r2
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <ControlDAC+0x850>)
 8001004:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODX_D_CR_Y * posY);
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <ControlDAC+0x854>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	0052      	lsls	r2, r2, #1
 8001012:	4413      	add	r3, r2
 8001014:	461a      	mov	r2, r3
 8001016:	00d2      	lsls	r2, r2, #3
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b63      	ldr	r3, [pc, #396]	; (80011ac <ControlDAC+0x858>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4413      	add	r3, r2
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b60      	ldr	r3, [pc, #384]	; (80011ac <ControlDAC+0x858>)
 800102a:	701a      	strb	r2, [r3, #0]
        break;
 800102c:	bf00      	nop
      }
    }
    if (posCX)
 800102e:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <ControlDAC+0x85c>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 8272 	beq.w	800151e <ControlDAC+0xbca>
    {
      CstickX = NEUTRAL + (posCX * MODX_FSMASH_X);
 800103a:	4b5d      	ldr	r3, [pc, #372]	; (80011b0 <ControlDAC+0x85c>)
 800103c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3b80      	subs	r3, #128	; 0x80
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <ControlDAC+0x860>)
 8001052:	701a      	strb	r2, [r3, #0]
      CstickY = NEUTRAL + (posY * MODX_FSMASH_Y);
 8001054:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <ControlDAC+0x854>)
 8001056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	0052      	lsls	r2, r2, #1
 8001060:	4413      	add	r3, r2
 8001062:	461a      	mov	r2, r3
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3b80      	subs	r3, #128	; 0x80
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <ControlDAC+0x864>)
 8001072:	701a      	strb	r2, [r3, #0]
    }
    return;
 8001074:	e253      	b.n	800151e <ControlDAC+0xbca>

  case 0b00000001: // mody pressed
    switch (Direction) // check direction
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b04      	cmp	r3, #4
 800107a:	d067      	beq.n	800114c <ControlDAC+0x7f8>
 800107c:	2b04      	cmp	r3, #4
 800107e:	f300 8250 	bgt.w	8001522 <ControlDAC+0xbce>
 8001082:	2b01      	cmp	r3, #1
 8001084:	d002      	beq.n	800108c <ControlDAC+0x738>
 8001086:	2b02      	cmp	r3, #2
 8001088:	d02f      	beq.n	80010ea <ControlDAC+0x796>
        DAC_ControlX += (MODY_D_CR_X * posX);
        DAC_ControlY += (MODY_D_CR_Y * posY);
        return;
      }
    }
    return;
 800108a:	e24a      	b.n	8001522 <ControlDAC+0xbce>
      if (~BTN_PIN & 0b00000010) // if B is pressed
 800108c:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <ControlDAC+0x868>)
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d013      	beq.n	80010c2 <ControlDAC+0x76e>
        DAC_ControlX += (MODX_H_B_X * posX); // side-b nerf
 800109a:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <ControlDAC+0x84c>)
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	0052      	lsls	r2, r2, #1
 80010a6:	441a      	add	r2, r3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	441a      	add	r2, r3
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <ControlDAC+0x850>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <ControlDAC+0x850>)
 80010be:	701a      	strb	r2, [r3, #0]
        return;
 80010c0:	e230      	b.n	8001524 <ControlDAC+0xbd0>
      DAC_ControlX += (MODX_H_X * posX);
 80010c2:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <ControlDAC+0x84c>)
 80010c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	0052      	lsls	r2, r2, #1
 80010ce:	441a      	add	r2, r3
 80010d0:	0092      	lsls	r2, r2, #2
 80010d2:	441a      	add	r2, r3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <ControlDAC+0x850>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <ControlDAC+0x850>)
 80010e6:	701a      	strb	r2, [r3, #0]
      return;
 80010e8:	e21c      	b.n	8001524 <ControlDAC+0xbd0>
      if (~BTN_PIN & (1 << BTN_B)) // if B is pressed
 80010ea:	4b34      	ldr	r3, [pc, #208]	; (80011bc <ControlDAC+0x868>)
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d014      	beq.n	8001122 <ControlDAC+0x7ce>
        DAC_ControlY += (MODX_V_B_Y * posY); // side-b nerf
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <ControlDAC+0x854>)
 80010fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	0052      	lsls	r2, r2, #1
 8001104:	441a      	add	r2, r3
 8001106:	4611      	mov	r1, r2
 8001108:	00c9      	lsls	r1, r1, #3
 800110a:	1a8a      	subs	r2, r1, r2
 800110c:	0052      	lsls	r2, r2, #1
 800110e:	4413      	add	r3, r2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <ControlDAC+0x858>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4413      	add	r3, r2
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <ControlDAC+0x858>)
 800111e:	701a      	strb	r2, [r3, #0]
        return;
 8001120:	e200      	b.n	8001524 <ControlDAC+0xbd0>
      DAC_ControlY += (MODX_V_Y * posY);
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <ControlDAC+0x854>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	0052      	lsls	r2, r2, #1
 800112e:	441a      	add	r2, r3
 8001130:	4611      	mov	r1, r2
 8001132:	00c9      	lsls	r1, r1, #3
 8001134:	1a8a      	subs	r2, r1, r2
 8001136:	0052      	lsls	r2, r2, #1
 8001138:	4413      	add	r3, r2
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <ControlDAC+0x858>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4413      	add	r3, r2
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <ControlDAC+0x858>)
 8001148:	701a      	strb	r2, [r3, #0]
      return;
 800114a:	e1eb      	b.n	8001524 <ControlDAC+0xbd0>
      if (~BTN_PIN & BTN_LR) // if L/R are pressed
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <ControlDAC+0x868>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d032      	beq.n	80011c0 <ControlDAC+0x86c>
        DAC_ControlX += (MODY_D_SHIELD_X * posX); // MODY wavedash
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <ControlDAC+0x84c>)
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <ControlDAC+0x850>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4413      	add	r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <ControlDAC+0x850>)
 8001178:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODY_D_SHIELD_Y * posY);
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <ControlDAC+0x854>)
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <ControlDAC+0x858>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4413      	add	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <ControlDAC+0x858>)
 8001198:	701a      	strb	r2, [r3, #0]
        return;
 800119a:	e1c3      	b.n	8001524 <ControlDAC+0xbd0>
 800119c:	40020400 	.word	0x40020400
 80011a0:	20000168 	.word	0x20000168
 80011a4:	20000196 	.word	0x20000196
 80011a8:	2000016a 	.word	0x2000016a
 80011ac:	20000195 	.word	0x20000195
 80011b0:	2000016c 	.word	0x2000016c
 80011b4:	20000003 	.word	0x20000003
 80011b8:	20000004 	.word	0x20000004
 80011bc:	40020000 	.word	0x40020000
      if (!(~CSTK_PIN & CSTK_CSTK)) // if Cstick buttons are NOT pressed
 80011c0:	4baa      	ldr	r3, [pc, #680]	; (800146c <ControlDAC+0xb18>)
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d125      	bne.n	800121a <ControlDAC+0x8c6>
        DAC_ControlX += (MODY_DIAG_X * posX); // MODY tilt
 80011ce:	4ba8      	ldr	r3, [pc, #672]	; (8001470 <ControlDAC+0xb1c>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4413      	add	r3, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	0091      	lsls	r1, r2, #2
 80011e0:	461a      	mov	r2, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	4413      	add	r3, r2
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4ba2      	ldr	r3, [pc, #648]	; (8001474 <ControlDAC+0xb20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4ba0      	ldr	r3, [pc, #640]	; (8001474 <ControlDAC+0xb20>)
 80011f4:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODY_DIAG_Y * posY);
 80011f6:	4ba0      	ldr	r3, [pc, #640]	; (8001478 <ControlDAC+0xb24>)
 80011f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	1ad2      	subs	r2, r2, r3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b9c      	ldr	r3, [pc, #624]	; (800147c <ControlDAC+0xb28>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b99      	ldr	r3, [pc, #612]	; (800147c <ControlDAC+0xb28>)
 8001216:	701a      	strb	r2, [r3, #0]
        return;
 8001218:	e184      	b.n	8001524 <ControlDAC+0xbd0>
      if (~BTN_PIN & (1 << BTN_B)) // if B is held for extended angles
 800121a:	4b99      	ldr	r3, [pc, #612]	; (8001480 <ControlDAC+0xb2c>)
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a6 	beq.w	8001376 <ControlDAC+0xa22>
        if (~CSTK_PIN & (1 << CSTK_DOWN))
 800122a:	4b90      	ldr	r3, [pc, #576]	; (800146c <ControlDAC+0xb18>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d023      	beq.n	8001280 <ControlDAC+0x92c>
          DAC_ControlX += (MODY_D_CD_B_X * posX);
 8001238:	4b8d      	ldr	r3, [pc, #564]	; (8001470 <ControlDAC+0xb1c>)
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	00d2      	lsls	r2, r2, #3
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b8a      	ldr	r3, [pc, #552]	; (8001474 <ControlDAC+0xb20>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4413      	add	r3, r2
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b87      	ldr	r3, [pc, #540]	; (8001474 <ControlDAC+0xb20>)
 8001256:	701a      	strb	r2, [r3, #0]
          DAC_ControlY += (MODY_D_CD_B_Y * posY);
 8001258:	4b87      	ldr	r3, [pc, #540]	; (8001478 <ControlDAC+0xb24>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4413      	add	r3, r2
 8001266:	461a      	mov	r2, r3
 8001268:	00d2      	lsls	r2, r2, #3
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b82      	ldr	r3, [pc, #520]	; (800147c <ControlDAC+0xb28>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4413      	add	r3, r2
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b80      	ldr	r3, [pc, #512]	; (800147c <ControlDAC+0xb28>)
 800127c:	701a      	strb	r2, [r3, #0]
          return;
 800127e:	e151      	b.n	8001524 <ControlDAC+0xbd0>
        if (~CSTK_PIN & (1 << CSTK_LEFT))
 8001280:	4b7a      	ldr	r3, [pc, #488]	; (800146c <ControlDAC+0xb18>)
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d023      	beq.n	80012d6 <ControlDAC+0x982>
          DAC_ControlX += (MODY_D_CL_B_X * posX);
 800128e:	4b78      	ldr	r3, [pc, #480]	; (8001470 <ControlDAC+0xb1c>)
 8001290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	461a      	mov	r2, r3
 8001298:	0052      	lsls	r2, r2, #1
 800129a:	4413      	add	r3, r2
 800129c:	461a      	mov	r2, r3
 800129e:	00d2      	lsls	r2, r2, #3
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b73      	ldr	r3, [pc, #460]	; (8001474 <ControlDAC+0xb20>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b70      	ldr	r3, [pc, #448]	; (8001474 <ControlDAC+0xb20>)
 80012b2:	701a      	strb	r2, [r3, #0]
          DAC_ControlY += (MODY_D_CL_B_Y * posY);
 80012b4:	4b70      	ldr	r3, [pc, #448]	; (8001478 <ControlDAC+0xb24>)
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b6d      	ldr	r3, [pc, #436]	; (800147c <ControlDAC+0xb28>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4413      	add	r3, r2
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <ControlDAC+0xb28>)
 80012d2:	701a      	strb	r2, [r3, #0]
          return;
 80012d4:	e126      	b.n	8001524 <ControlDAC+0xbd0>
        if (~CSTK_PIN & (1 << CSTK_UP))
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <ControlDAC+0xb18>)
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01e      	beq.n	8001322 <ControlDAC+0x9ce>
          DAC_ControlX += (MODY_D_CU_B_X * posX);
 80012e4:	4b62      	ldr	r3, [pc, #392]	; (8001470 <ControlDAC+0xb1c>)
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	0052      	lsls	r2, r2, #1
 80012f0:	441a      	add	r2, r3
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b5e      	ldr	r3, [pc, #376]	; (8001474 <ControlDAC+0xb20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <ControlDAC+0xb20>)
 8001304:	701a      	strb	r2, [r3, #0]
          DAC_ControlY += (MODY_D_CU_B_Y * posY);
 8001306:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <ControlDAC+0xb24>)
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	019b      	lsls	r3, r3, #6
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b5a      	ldr	r3, [pc, #360]	; (800147c <ControlDAC+0xb28>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4413      	add	r3, r2
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b57      	ldr	r3, [pc, #348]	; (800147c <ControlDAC+0xb28>)
 800131e:	701a      	strb	r2, [r3, #0]
          return;
 8001320:	e100      	b.n	8001524 <ControlDAC+0xbd0>
        if (~CSTK_PIN & (1 << CSTK_RIGHT))
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <ControlDAC+0xb18>)
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d022      	beq.n	8001376 <ControlDAC+0xa22>
          DAC_ControlX += (MODY_D_CR_B_X * posX);
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <ControlDAC+0xb1c>)
 8001332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	0052      	lsls	r2, r2, #1
 800133c:	441a      	add	r2, r3
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <ControlDAC+0xb20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4413      	add	r3, r2
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b49      	ldr	r3, [pc, #292]	; (8001474 <ControlDAC+0xb20>)
 8001350:	701a      	strb	r2, [r3, #0]
          DAC_ControlY += (MODY_D_CR_B_Y * posY);
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <ControlDAC+0xb24>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	00d2      	lsls	r2, r2, #3
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	00d2      	lsls	r2, r2, #3
 8001362:	4413      	add	r3, r2
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b45      	ldr	r3, [pc, #276]	; (800147c <ControlDAC+0xb28>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4413      	add	r3, r2
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b42      	ldr	r3, [pc, #264]	; (800147c <ControlDAC+0xb28>)
 8001372:	701a      	strb	r2, [r3, #0]
          return;
 8001374:	e0d6      	b.n	8001524 <ControlDAC+0xbd0>
      if (~CSTK_PIN & (1 << CSTK_DOWN))
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <ControlDAC+0xb18>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d021      	beq.n	80013c8 <ControlDAC+0xa74>
        DAC_ControlX += (MODY_D_CD_X * posX);
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <ControlDAC+0xb1c>)
 8001386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	00d2      	lsls	r2, r2, #3
 8001390:	1ad2      	subs	r2, r2, r3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4413      	add	r3, r2
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <ControlDAC+0xb20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <ControlDAC+0xb20>)
 80013a4:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODY_D_CD_Y * posY);
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <ControlDAC+0xb24>)
 80013a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	00d2      	lsls	r2, r2, #3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <ControlDAC+0xb28>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <ControlDAC+0xb28>)
 80013c4:	701a      	strb	r2, [r3, #0]
        return;
 80013c6:	e0ad      	b.n	8001524 <ControlDAC+0xbd0>
      if (~CSTK_PIN & (1 << CSTK_LEFT))
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <ControlDAC+0xb18>)
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d020      	beq.n	8001418 <ControlDAC+0xac4>
        DAC_ControlX += (MODY_D_CL_X * posX);
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <ControlDAC+0xb1c>)
 80013d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	441a      	add	r2, r3
 80013e4:	00d2      	lsls	r2, r2, #3
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <ControlDAC+0xb20>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <ControlDAC+0xb20>)
 80013f6:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODY_D_CL_Y * posY);
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <ControlDAC+0xb24>)
 80013fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	0192      	lsls	r2, r2, #6
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <ControlDAC+0xb28>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <ControlDAC+0xb28>)
 8001414:	701a      	strb	r2, [r3, #0]
        return;
 8001416:	e085      	b.n	8001524 <ControlDAC+0xbd0>
      if (~CSTK_PIN & (1 << CSTK_UP))
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <ControlDAC+0xb18>)
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d02e      	beq.n	8001484 <ControlDAC+0xb30>
        DAC_ControlX += (MODY_D_CU_X * posX);
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <ControlDAC+0xb1c>)
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	0092      	lsls	r2, r2, #2
 8001432:	441a      	add	r2, r3
 8001434:	00d2      	lsls	r2, r2, #3
 8001436:	4413      	add	r3, r2
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <ControlDAC+0xb20>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <ControlDAC+0xb20>)
 8001446:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODY_D_CU_Y * posY);
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <ControlDAC+0xb24>)
 800144a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	00d2      	lsls	r2, r2, #3
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <ControlDAC+0xb28>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4413      	add	r3, r2
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <ControlDAC+0xb28>)
 8001466:	701a      	strb	r2, [r3, #0]
        return;
 8001468:	e05c      	b.n	8001524 <ControlDAC+0xbd0>
 800146a:	bf00      	nop
 800146c:	40020400 	.word	0x40020400
 8001470:	20000168 	.word	0x20000168
 8001474:	20000196 	.word	0x20000196
 8001478:	2000016a 	.word	0x2000016a
 800147c:	20000195 	.word	0x20000195
 8001480:	40020000 	.word	0x40020000
      if (~CSTK_PIN & (1 << CSTK_RIGHT))
 8001484:	4b29      	ldr	r3, [pc, #164]	; (800152c <ControlDAC+0xbd8>)
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d047      	beq.n	8001522 <ControlDAC+0xbce>
        DAC_ControlX += (MODY_D_CR_X * posX);
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <ControlDAC+0xbdc>)
 8001494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	0052      	lsls	r2, r2, #1
 800149e:	4413      	add	r3, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	0111      	lsls	r1, r2, #4
 80014a4:	461a      	mov	r2, r3
 80014a6:	460b      	mov	r3, r1
 80014a8:	4413      	add	r3, r2
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <ControlDAC+0xbe0>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <ControlDAC+0xbe0>)
 80014b8:	701a      	strb	r2, [r3, #0]
        DAC_ControlY += (MODY_D_CR_Y * posY);
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <ControlDAC+0xbe4>)
 80014bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	1ad2      	subs	r2, r2, r3
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <ControlDAC+0xbe8>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <ControlDAC+0xbe8>)
 80014da:	701a      	strb	r2, [r3, #0]
        return;
 80014dc:	e022      	b.n	8001524 <ControlDAC+0xbd0>

  case 0b00000000: // both pressed
    dPad_on = true;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <ControlDAC+0xbec>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
  }

  DAC_ControlX = NEUTRAL + (MAXOFFSET * posX);
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <ControlDAC+0xbdc>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3b80      	subs	r3, #128	; 0x80
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <ControlDAC+0xbe0>)
 80014fc:	701a      	strb	r2, [r3, #0]
  DAC_ControlY = NEUTRAL + (MAXOFFSET * posY);
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <ControlDAC+0xbe4>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4413      	add	r3, r2
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3b80      	subs	r3, #128	; 0x80
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <ControlDAC+0xbe8>)
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e004      	b.n	8001524 <ControlDAC+0xbd0>
    return;
 800151a:	bf00      	nop
 800151c:	e002      	b.n	8001524 <ControlDAC+0xbd0>
    return;
 800151e:	bf00      	nop
 8001520:	e000      	b.n	8001524 <ControlDAC+0xbd0>
    return;
 8001522:	bf00      	nop
}
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020400 	.word	0x40020400
 8001530:	20000168 	.word	0x20000168
 8001534:	20000196 	.word	0x20000196
 8001538:	2000016a 	.word	0x2000016a
 800153c:	20000195 	.word	0x20000195
 8001540:	20000176 	.word	0x20000176

08001544 <TriggersDAC>:
  CstickX = NEUTRAL + (MAXOFFSET * SOCD_TwoIPNoR((CSTK_PIN & CSTK_HORIZ), &CStk_SOCD_X));
  CstickY = NEUTRAL + (MAXOFFSET * SOCD_TwoIPNoR((CSTK_PIN & CSTK_VERT) >> 2, &CStk_SOCD_Y));
}

void TriggersDAC()
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  if ((SHIELD_PIN & SHIELD_MOD) == 768)
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <TriggersDAC+0x50>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001554:	d103      	bne.n	800155e <TriggersDAC+0x1a>
  {
    AnalogR = 0;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <TriggersDAC+0x54>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
    return;
 800155c:	e015      	b.n	800158a <TriggersDAC+0x46>
  }

  if (~SHIELD_PIN & (1 << SHIELD_MS))
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <TriggersDAC+0x50>)
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <TriggersDAC+0x30>
  {
    AnalogR = SHIELD_MID;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <TriggersDAC+0x54>)
 800156e:	225f      	movs	r2, #95	; 0x5f
 8001570:	701a      	strb	r2, [r3, #0]
    return;
 8001572:	e00a      	b.n	800158a <TriggersDAC+0x46>
  }

  if (~SHIELD_PIN & (1 << SHIELD_LS))
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <TriggersDAC+0x50>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <TriggersDAC+0x46>
  {
    AnalogR = SHIELD_LIGHT;
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <TriggersDAC+0x54>)
 8001584:	2232      	movs	r2, #50	; 0x32
 8001586:	701a      	strb	r2, [r3, #0]
    return;
 8001588:	bf00      	nop
  }
}
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40020000 	.word	0x40020000
 8001598:	20000174 	.word	0x20000174

0800159c <Cstick2Dpad>:

uint8_t Cstick2Dpad(uint8_t Stick)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  Stick = ~Stick;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	71fb      	strb	r3, [r7, #7]
  uint8_t Pad = (Stick & 0b00000101) << 1;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 030a 	and.w	r3, r3, #10
 80015b6:	73fb      	strb	r3, [r7, #15]
  Stick = (Stick & 0b00001010) >> 1;
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	105b      	asrs	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f003 0305 	and.w	r3, r3, #5
 80015c2:	71fb      	strb	r3, [r7, #7]
  return (Pad | Stick);
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b2db      	uxtb	r3, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <Dpad2HatSwitch>:

uint8_t Dpad2HatSwitch(uint8_t Pad)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
 switch (Pad)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b0a      	cmp	r3, #10
 80015e6:	d82b      	bhi.n	8001640 <Dpad2HatSwitch+0x68>
 80015e8:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <Dpad2HatSwitch+0x18>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	0800161d 	.word	0x0800161d
 80015f4:	08001639 	.word	0x08001639
 80015f8:	08001629 	.word	0x08001629
 80015fc:	08001641 	.word	0x08001641
 8001600:	08001631 	.word	0x08001631
 8001604:	08001635 	.word	0x08001635
 8001608:	0800162d 	.word	0x0800162d
 800160c:	08001641 	.word	0x08001641
 8001610:	08001621 	.word	0x08001621
 8001614:	0800163d 	.word	0x0800163d
 8001618:	08001625 	.word	0x08001625
  {
    case (0b0000):
      return 8;
 800161c:	2308      	movs	r3, #8
 800161e:	e010      	b.n	8001642 <Dpad2HatSwitch+0x6a>
    case (0b1000):
      return 0;
 8001620:	2300      	movs	r3, #0
 8001622:	e00e      	b.n	8001642 <Dpad2HatSwitch+0x6a>
    case (0b1010):
      return 1;
 8001624:	2301      	movs	r3, #1
 8001626:	e00c      	b.n	8001642 <Dpad2HatSwitch+0x6a>
    case (0b0010):
      return 2;
 8001628:	2302      	movs	r3, #2
 800162a:	e00a      	b.n	8001642 <Dpad2HatSwitch+0x6a>
    case (0b0110):
      return 3;
 800162c:	2303      	movs	r3, #3
 800162e:	e008      	b.n	8001642 <Dpad2HatSwitch+0x6a>
    case (0b0100):
      return 4;
 8001630:	2304      	movs	r3, #4
 8001632:	e006      	b.n	8001642 <Dpad2HatSwitch+0x6a>
    case (0b0101):
      return 5;
 8001634:	2305      	movs	r3, #5
 8001636:	e004      	b.n	8001642 <Dpad2HatSwitch+0x6a>
    case (0b0001):
      return 6;
 8001638:	2306      	movs	r3, #6
 800163a:	e002      	b.n	8001642 <Dpad2HatSwitch+0x6a>
    case (0b1001):
      return 7;
 800163c:	2307      	movs	r3, #7
 800163e:	e000      	b.n	8001642 <Dpad2HatSwitch+0x6a>
    default:
      return 8;
 8001640:	2308      	movs	r3, #8
  }
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <SOCD_TwoIPNoR>:

short int SOCD_TwoIPNoR(uint8_t input, uint8_t *SOCD) // input uses bits 0 and 1. 0 for Right/Up and 1 for Left/Down. // Activated inputs are low (e.g. 10 could be an 'up' input and 00 means both opposite inputs are pressed.)
{                                                     // SOCD uses bits 0, 1, 2 and 3. 0 and 1 to check what inputs were pressed; 3 and 4 to check if inputs are locked.
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
                                                      // this code is a bit difficult to understand because of the binary, but it is very similar to SOCD code found in other open-source box firmwares such as the Crane Firmware: https://github.com/Crane1195/CL-FW

  if (input == 0) // both opposite inputs are pressed
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d11e      	bne.n	80016a0 <SOCD_TwoIPNoR+0x50>
  {
    if (*SOCD & 0b00000001) // if R/U input was previously pressed
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <SOCD_TwoIPNoR+0x32>
    {
      *SOCD |= 0b00000100; // lock R/U input
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	b2da      	uxtb	r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	701a      	strb	r2, [r3, #0]
      return -1;           // return L/D input
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e034      	b.n	80016ec <SOCD_TwoIPNoR+0x9c>
    }
    if (*SOCD & 0b00000010) // if L/D input was previously pressed
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <SOCD_TwoIPNoR+0x50>
    {
      *SOCD |= 0b00001000; // lock L/D
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	b2da      	uxtb	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	701a      	strb	r2, [r3, #0]
      return 1;            // return R/U
 800169c:	2301      	movs	r3, #1
 800169e:	e025      	b.n	80016ec <SOCD_TwoIPNoR+0x9c>
    }
  }

  if (input == 0b00000010 && !(*SOCD & 0b00000100)) // R/U input is pressed and not locked
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d10a      	bne.n	80016bc <SOCD_TwoIPNoR+0x6c>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d104      	bne.n	80016bc <SOCD_TwoIPNoR+0x6c>
  {
    *SOCD = 0b00000001; // R/U was pressed, all is unlocked
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
    return 1;           // return R/U
 80016b8:	2301      	movs	r3, #1
 80016ba:	e017      	b.n	80016ec <SOCD_TwoIPNoR+0x9c>
  }

  if (input == 0b00000001 && !(*SOCD & 0b00001000))
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10b      	bne.n	80016da <SOCD_TwoIPNoR+0x8a>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <SOCD_TwoIPNoR+0x8a>
  {
    *SOCD = 0b00000010; // L/D was pressed, all is unlocked
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2202      	movs	r2, #2
 80016d2:	701a      	strb	r2, [r3, #0]
    return -1;          // return L/D
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
 80016d8:	e008      	b.n	80016ec <SOCD_TwoIPNoR+0x9c>
  }

  if (input == 0b00000011)
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d104      	bne.n	80016ea <SOCD_TwoIPNoR+0x9a>
  {
    *SOCD = 0; // nothing is pressed, all is unlocked
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
    return 0;  // return neutral
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <SOCD_TwoIPNoR+0x9c>
  }

  return 0; // when in doubt, return neutral
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <UpdateAnalog>:

void UpdateAnalog() // updates the Control stick values after DAC is done
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  ControlX = DAC_ControlX;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <UpdateAnalog+0x4c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <UpdateAnalog+0x50>)
 8001704:	701a      	strb	r2, [r3, #0]
  ControlY = DAC_ControlY;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <UpdateAnalog+0x54>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <UpdateAnalog+0x58>)
 800170e:	701a      	strb	r2, [r3, #0]

  if (dPad_on)
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <UpdateAnalog+0x5c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <UpdateAnalog+0x48>
  {
    DPad = Cstick2Dpad((CSTK_PIN & CSTK_CSTK) >> CSTK_RIGHT);
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <UpdateAnalog+0x60>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	0b1b      	lsrs	r3, r3, #12
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	b2db      	uxtb	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff38 	bl	800159c <Cstick2Dpad>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <UpdateAnalog+0x64>)
 8001732:	701a      	strb	r2, [r3, #0]
    CstickX = NEUTRAL;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <UpdateAnalog+0x68>)
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	701a      	strb	r2, [r3, #0]
    CstickY = NEUTRAL;
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <UpdateAnalog+0x6c>)
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	701a      	strb	r2, [r3, #0]
  }
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000196 	.word	0x20000196
 8001748:	20000001 	.word	0x20000001
 800174c:	20000195 	.word	0x20000195
 8001750:	20000002 	.word	0x20000002
 8001754:	20000176 	.word	0x20000176
 8001758:	40020400 	.word	0x40020400
 800175c:	20000175 	.word	0x20000175
 8001760:	20000003 	.word	0x20000003
 8001764:	20000004 	.word	0x20000004

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  ControllerInputs.reportID = 1;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <main+0x5c>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
  ControllerInputs.buttons = 0;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <main+0x5c>)
 8001774:	2200      	movs	r2, #0
 8001776:	705a      	strb	r2, [r3, #1]
  ControllerInputs.ctrl_x = 0;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <main+0x5c>)
 800177a:	2200      	movs	r2, #0
 800177c:	709a      	strb	r2, [r3, #2]
  ControllerInputs.ctrl_y = 0;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <main+0x5c>)
 8001780:	2200      	movs	r2, #0
 8001782:	70da      	strb	r2, [r3, #3]
  ControllerInputs.cstk_x = 0;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <main+0x5c>)
 8001786:	2200      	movs	r2, #0
 8001788:	711a      	strb	r2, [r3, #4]
  ControllerInputs.cstk_y = 0;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <main+0x5c>)
 800178c:	2200      	movs	r2, #0
 800178e:	715a      	strb	r2, [r3, #5]
  ControllerInputs.analog_l = 0;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <main+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	719a      	strb	r2, [r3, #6]
  ControllerInputs.analog_r = 0;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <main+0x5c>)
 8001798:	2200      	movs	r2, #0
 800179a:	71da      	strb	r2, [r3, #7]
  ControllerInputs.dpad = 0;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <main+0x5c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	721a      	strb	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a2:	f000 faa5 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a6:	f000 f811 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017aa:	f000 f8a3 	bl	80018f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80017ae:	f005 fd35 	bl	800721c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80017b2:	f000 f873 	bl	800189c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	  if (modeUSB == 1)
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <main+0x60>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d1fb      	bne.n	80017b6 <main+0x4e>
	  {
	      UpdateInputsUSB();
 80017be:	f000 f951 	bl	8001a64 <UpdateInputsUSB>
	  if (modeUSB == 1)
 80017c2:	e7f8      	b.n	80017b6 <main+0x4e>
 80017c4:	20000198 	.word	0x20000198
 80017c8:	20000000 	.word	0x20000000

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	; 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2230      	movs	r2, #48	; 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f006 f99c 	bl	8007b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <SystemClock_Config+0xc8>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a26      	ldr	r2, [pc, #152]	; (8001894 <SystemClock_Config+0xc8>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <SystemClock_Config+0xc8>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <SystemClock_Config+0xcc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a20      	ldr	r2, [pc, #128]	; (8001898 <SystemClock_Config+0xcc>)
 8001816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <SystemClock_Config+0xcc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001828:	2301      	movs	r3, #1
 800182a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800182c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001832:	2302      	movs	r3, #2
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800183c:	2319      	movs	r3, #25
 800183e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001840:	23c0      	movs	r3, #192	; 0xc0
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001844:	2302      	movs	r3, #2
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001848:	2304      	movs	r3, #4
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4618      	mov	r0, r3
 8001852:	f001 ff17 	bl	8003684 <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800185c:	f000 f95a 	bl	8001b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001864:	2302      	movs	r3, #2
 8001866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800186c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2103      	movs	r1, #3
 800187c:	4618      	mov	r0, r3
 800187e:	f002 f979 	bl	8003b74 <HAL_RCC_ClockConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001888:	f000 f944 	bl	8001b14 <Error_Handler>
  }
}
 800188c:	bf00      	nop
 800188e:	3750      	adds	r7, #80	; 0x50
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000

0800189c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <MX_USART1_UART_Init+0x50>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <MX_USART1_UART_Init+0x54>)
 80018aa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018c0:	220c      	movs	r2, #12
 80018c2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018d0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018d4:	f002 fb1e 	bl	8003f14 <HAL_HalfDuplex_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018de:	f000 f919 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001a4 	.word	0x200001a4
 80018ec:	40011000 	.word	0x40011000
 80018f0:	000f4240 	.word	0x000f4240

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b48      	ldr	r3, [pc, #288]	; (8001a30 <MX_GPIO_Init+0x13c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <MX_GPIO_Init+0x13c>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b45      	ldr	r3, [pc, #276]	; (8001a30 <MX_GPIO_Init+0x13c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <MX_GPIO_Init+0x13c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a40      	ldr	r2, [pc, #256]	; (8001a30 <MX_GPIO_Init+0x13c>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <MX_GPIO_Init+0x13c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <MX_GPIO_Init+0x13c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a39      	ldr	r2, [pc, #228]	; (8001a30 <MX_GPIO_Init+0x13c>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <MX_GPIO_Init+0x13c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <MX_GPIO_Init+0x13c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a32      	ldr	r2, [pc, #200]	; (8001a30 <MX_GPIO_Init+0x13c>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <MX_GPIO_Init+0x13c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001980:	482c      	ldr	r0, [pc, #176]	; (8001a34 <MX_GPIO_Init+0x140>)
 8001982:	f000 fce1 	bl	8002348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUMBLE_GPIO_Port, RUMBLE_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2110      	movs	r1, #16
 800198a:	482b      	ldr	r0, [pc, #172]	; (8001a38 <MX_GPIO_Init+0x144>)
 800198c:	f000 fcdc 	bl	8002348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4822      	ldr	r0, [pc, #136]	; (8001a34 <MX_GPIO_Init+0x140>)
 80019aa:	f000 fb49 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin X_Pin Y_Pin
                           START_Pin Z_Pin R_Pin L_Pin
                           MS_Pin LS_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|X_Pin|Y_Pin
 80019ae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80019b2:	617b      	str	r3, [r7, #20]
                          |START_Pin|Z_Pin|R_Pin|L_Pin
                          |MS_Pin|LS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	481e      	ldr	r0, [pc, #120]	; (8001a3c <MX_GPIO_Init+0x148>)
 80019c4:	f000 fb3c 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_Pin LEFT_Pin C_RIGHT_Pin C_LEFT_Pin
                           C_UP_Pin C_DOWN_Pin UP_Pin DOWN_Pin
                           MX_Pin MY_Pin */
  GPIO_InitStruct.Pin = RIGHT_Pin|LEFT_Pin|C_RIGHT_Pin|C_LEFT_Pin
 80019c8:	f24f 33c3 	movw	r3, #62403	; 0xf3c3
 80019cc:	617b      	str	r3, [r7, #20]
                          |C_UP_Pin|C_DOWN_Pin|UP_Pin|DOWN_Pin
                          |MX_Pin|MY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4816      	ldr	r0, [pc, #88]	; (8001a38 <MX_GPIO_Init+0x144>)
 80019de:	f000 fb2f 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_INT_Pin */
  GPIO_InitStruct.Pin = TX_INT_Pin;
 80019e2:	2308      	movs	r3, #8
 80019e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_INT_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4810      	ldr	r0, [pc, #64]	; (8001a38 <MX_GPIO_Init+0x144>)
 80019f8:	f000 fb22 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : RUMBLE_Pin */
  GPIO_InitStruct.Pin = RUMBLE_Pin;
 80019fc:	2310      	movs	r3, #16
 80019fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RUMBLE_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <MX_GPIO_Init+0x144>)
 8001a14:	f000 fb14 	bl	8002040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2009      	movs	r0, #9
 8001a1e:	f000 fad8 	bl	8001fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a22:	2009      	movs	r0, #9
 8001a24:	f000 faf1 	bl	800200a <HAL_NVIC_EnableIRQ>

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020000 	.word	0x40020000

08001a40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  //count_num++;
  Digital_Analog_Conversion();
 8001a4a:	f7fe ff79 	bl	8000940 <Digital_Analog_Conversion>
  ReceiveCommand(); // reads incoming message from console and replies accordingly
 8001a4e:	f7fe fd3f 	bl	80004d0 <ReceiveCommand>

  //count_num=count;
  //avg_count = count; // debugging
  //count = 0;

  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // clear interrupt flag
 8001a52:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x20>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	6153      	str	r3, [r2, #20]
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <UpdateInputsUSB>:

void UpdateInputsUSB()
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  Digital_Analog_Conversion();
 8001a68:	f7fe ff6a 	bl	8000940 <Digital_Analog_Conversion>

  ControllerInputs.buttons = ~BTN_PIN;
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <UpdateInputsUSB+0x8c>)
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <UpdateInputsUSB+0x90>)
 8001a78:	705a      	strb	r2, [r3, #1]

  ControllerInputs.ctrl_x = ControlX-128;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <UpdateInputsUSB+0x94>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	3b80      	subs	r3, #128	; 0x80
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <UpdateInputsUSB+0x90>)
 8001a88:	709a      	strb	r2, [r3, #2]
  ControllerInputs.ctrl_y = 128-ControlY;
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <UpdateInputsUSB+0x98>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	b25a      	sxtb	r2, r3
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <UpdateInputsUSB+0x90>)
 8001a9c:	70da      	strb	r2, [r3, #3]
  ControllerInputs.cstk_x = CstickX-128;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <UpdateInputsUSB+0x9c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3b80      	subs	r3, #128	; 0x80
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	b25a      	sxtb	r2, r3
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <UpdateInputsUSB+0x90>)
 8001aac:	711a      	strb	r2, [r3, #4]
  ControllerInputs.cstk_y = CstickY-128;
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <UpdateInputsUSB+0xa0>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3b80      	subs	r3, #128	; 0x80
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	b25a      	sxtb	r2, r3
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <UpdateInputsUSB+0x90>)
 8001abc:	715a      	strb	r2, [r3, #5]
  ControllerInputs.analog_l = AnalogL;
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <UpdateInputsUSB+0x90>)
 8001ac2:	719a      	strb	r2, [r3, #6]
  ControllerInputs.analog_r = AnalogR;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <UpdateInputsUSB+0xa4>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <UpdateInputsUSB+0x90>)
 8001acc:	71da      	strb	r2, [r3, #7]
  ControllerInputs.dpad = Dpad2HatSwitch(DPad);
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <UpdateInputsUSB+0xa8>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fd7f 	bl	80015d8 <Dpad2HatSwitch>
 8001ada:	4603      	mov	r3, r0
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <UpdateInputsUSB+0x90>)
 8001ae0:	721a      	strb	r2, [r3, #8]

  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &ControllerInputs, 9);
 8001ae2:	2209      	movs	r2, #9
 8001ae4:	4903      	ldr	r1, [pc, #12]	; (8001af4 <UpdateInputsUSB+0x90>)
 8001ae6:	480a      	ldr	r0, [pc, #40]	; (8001b10 <UpdateInputsUSB+0xac>)
 8001ae8:	f004 f93c 	bl	8005d64 <USBD_CUSTOM_HID_SendReport>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40020000 	.word	0x40020000
 8001af4:	20000198 	.word	0x20000198
 8001af8:	20000001 	.word	0x20000001
 8001afc:	20000002 	.word	0x20000002
 8001b00:	20000003 	.word	0x20000003
 8001b04:	20000004 	.word	0x20000004
 8001b08:	20000174 	.word	0x20000174
 8001b0c:	20000175 	.word	0x20000175
 8001b10:	200001ec 	.word	0x200001ec

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b1c:	e7fe      	b.n	8001b1c <Error_Handler+0x8>
	...

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_UART_MspInit+0x84>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12c      	bne.n	8001bec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001b9c:	f043 0310 	orr.w	r3, r3, #16
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd0:	2312      	movs	r3, #18
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <HAL_UART_MspInit+0x8c>)
 8001be8:	f000 fa2a 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020000 	.word	0x40020000

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <NMI_Handler+0x4>

08001c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <MemManage_Handler+0x4>

08001c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f000 f8a2 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Y_Pin);
 8001c58:	2008      	movs	r0, #8
 8001c5a:	f000 fb8f 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <OTG_FS_IRQHandler+0x10>)
 8001c6a:	f000 fcef 	bl	800264c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200006bc 	.word	0x200006bc

08001c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ca2:	490e      	ldr	r1, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cc6:	f7ff ffd7 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cca:	f005 ff01 	bl	8007ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cce:	f7ff fd4b 	bl	8001768 <main>
  bx  lr    
 8001cd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001ce0:	08007bb0 	.word	0x08007bb0
  ldr r2, =_sbss
 8001ce4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001ce8:	20000ac4 	.word	0x20000ac4

08001cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_Init+0x40>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <HAL_Init+0x40>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_Init+0x40>)
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_Init+0x40>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f000 f94f 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f000 f808 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d24:	f7ff fefc 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023c00 	.word	0x40023c00

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x54>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_InitTick+0x58>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f967 	bl	8002026 <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00e      	b.n	8001d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d80a      	bhi.n	8001d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f000 f92f 	bl	8001fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_InitTick+0x5c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	2000000c 	.word	0x2000000c

08001d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x20>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x24>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_IncTick+0x24>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000010 	.word	0x20000010
 8001db8:	200001e8 	.word	0x200001e8

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200001e8 	.word	0x200001e8

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff ffee 	bl	8001dbc <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffde 	bl	8001dbc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000010 	.word	0x20000010

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff29 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff3e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff8e 	bl	8001f10 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5d 	bl	8001ebc <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff31 	bl	8001e80 <__NVIC_EnableIRQ>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa2 	bl	8001f78 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e159      	b.n	8002310 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 8148 	bne.w	800230a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	2b02      	cmp	r3, #2
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a2 	beq.w	800230a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b57      	ldr	r3, [pc, #348]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a56      	ldr	r2, [pc, #344]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b54      	ldr	r3, [pc, #336]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_GPIO_Init+0x2ec>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a49      	ldr	r2, [pc, #292]	; (8002330 <HAL_GPIO_Init+0x2f0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x202>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a48      	ldr	r2, [pc, #288]	; (8002334 <HAL_GPIO_Init+0x2f4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x1fe>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a47      	ldr	r2, [pc, #284]	; (8002338 <HAL_GPIO_Init+0x2f8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x1fa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a46      	ldr	r2, [pc, #280]	; (800233c <HAL_GPIO_Init+0x2fc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x1f6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a45      	ldr	r2, [pc, #276]	; (8002340 <HAL_GPIO_Init+0x300>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x1f2>
 800222e:	2304      	movs	r3, #4
 8002230:	e008      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002232:	2307      	movs	r3, #7
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002236:	2303      	movs	r3, #3
 8002238:	e004      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223a:	2302      	movs	r3, #2
 800223c:	e002      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002242:	2300      	movs	r3, #0
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	f002 0203 	and.w	r2, r2, #3
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4093      	lsls	r3, r2
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002254:	4935      	ldr	r1, [pc, #212]	; (800232c <HAL_GPIO_Init+0x2ec>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002286:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_GPIO_Init+0x304>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b0:	4a24      	ldr	r2, [pc, #144]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b6:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022da:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002304:	4a0f      	ldr	r2, [pc, #60]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3301      	adds	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b0f      	cmp	r3, #15
 8002314:	f67f aea2 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40013800 	.word	0x40013800
 8002330:	40020000 	.word	0x40020000
 8002334:	40020400 	.word	0x40020400
 8002338:	40020800 	.word	0x40020800
 800233c:	40020c00 	.word	0x40020c00
 8002340:	40021000 	.word	0x40021000
 8002344:	40013c00 	.word	0x40013c00

08002348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
 8002354:	4613      	mov	r3, r2
 8002356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002364:	e003      	b.n	800236e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	041a      	lsls	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	619a      	str	r2, [r3, #24]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fb50 	bl	8001a40 <HAL_GPIO_EXTI_Callback>
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ae:	b08f      	sub	sp, #60	; 0x3c
 80023b0:	af0a      	add	r7, sp, #40	; 0x28
 80023b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e10f      	b.n	80025de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d106      	bne.n	80023de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f005 f881 	bl	80074e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 f8bc 	bl	800457a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	687e      	ldr	r6, [r7, #4]
 800240a:	466d      	mov	r5, sp
 800240c:	f106 0410 	add.w	r4, r6, #16
 8002410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800241c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002420:	1d33      	adds	r3, r6, #4
 8002422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002424:	6838      	ldr	r0, [r7, #0]
 8002426:	f001 ff93 	bl	8004350 <USB_CoreInit>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0d0      	b.n	80025de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f002 f8aa 	bl	800459c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e04a      	b.n	80024e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	333d      	adds	r3, #61	; 0x3d
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	333c      	adds	r3, #60	; 0x3c
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	b298      	uxth	r0, r3
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	3342      	adds	r3, #66	; 0x42
 800248a:	4602      	mov	r2, r0
 800248c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	333f      	adds	r3, #63	; 0x3f
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3344      	adds	r3, #68	; 0x44
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3348      	adds	r3, #72	; 0x48
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3350      	adds	r3, #80	; 0x50
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	3301      	adds	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d3af      	bcc.n	800244e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e044      	b.n	800257e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	3301      	adds	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3b5      	bcc.n	80024f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	687e      	ldr	r6, [r7, #4]
 8002590:	466d      	mov	r5, sp
 8002592:	f106 0410 	add.w	r4, r6, #16
 8002596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025a6:	1d33      	adds	r3, r6, #4
 80025a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	f002 f842 	bl	8004634 <USB_DevInit>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00d      	b.n	80025de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 f8be 	bl	8005758 <USB_DevDisconnect>

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_PCD_Start+0x1c>
 80025fe:	2302      	movs	r3, #2
 8002600:	e020      	b.n	8002644 <HAL_PCD_Start+0x5e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	2b01      	cmp	r3, #1
 8002610:	d109      	bne.n	8002626 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002616:	2b01      	cmp	r3, #1
 8002618:	d005      	beq.n	8002626 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f001 ff94 	bl	8004558 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f003 f86e 	bl	8005716 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b08d      	sub	sp, #52	; 0x34
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f003 f92c 	bl	80058c0 <USB_GetMode>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 839d 	bne.w	8002daa <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 f890 	bl	800579a <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8393 	beq.w	8002da8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f003 f887 	bl	800579a <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d107      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f002 0202 	and.w	r2, r2, #2
 80026a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 f875 	bl	800579a <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d161      	bne.n	800277e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699a      	ldr	r2, [r3, #24]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0210 	bic.w	r2, r2, #16
 80026c8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 020f 	and.w	r2, r3, #15
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	3304      	adds	r3, #4
 80026e8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	0c5b      	lsrs	r3, r3, #17
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d124      	bne.n	8002740 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d035      	beq.n	800276e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800270c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	6a38      	ldr	r0, [r7, #32]
 8002716:	f002 feac 	bl	8005472 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002726:	441a      	add	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002738:	441a      	add	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	619a      	str	r2, [r3, #24]
 800273e:	e016      	b.n	800276e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	0c5b      	lsrs	r3, r3, #17
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	2b06      	cmp	r3, #6
 800274a:	d110      	bne.n	800276e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002752:	2208      	movs	r2, #8
 8002754:	4619      	mov	r1, r3
 8002756:	6a38      	ldr	r0, [r7, #32]
 8002758:	f002 fe8b 	bl	8005472 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002768:	441a      	add	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0210 	orr.w	r2, r2, #16
 800277c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 f809 	bl	800579a <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002792:	d16e      	bne.n	8002872 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f003 f80f 	bl	80057c0 <USB_ReadDevAllOutEpInterrupt>
 80027a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027a4:	e062      	b.n	800286c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d057      	beq.n	8002860 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 f834 	bl	8005828 <USB_ReadDevOutEPInterrupt>
 80027c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00c      	beq.n	80027e6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d8:	461a      	mov	r2, r3
 80027da:	2301      	movs	r3, #1
 80027dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fd99 	bl	8003318 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00c      	beq.n	800280a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fc:	461a      	mov	r2, r3
 80027fe:	2308      	movs	r3, #8
 8002800:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fe93 	bl	8003530 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002820:	461a      	mov	r2, r3
 8002822:	2310      	movs	r3, #16
 8002824:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283c:	461a      	mov	r2, r3
 800283e:	2320      	movs	r3, #32
 8002840:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d009      	beq.n	8002860 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4413      	add	r3, r2
 8002854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002858:	461a      	mov	r2, r3
 800285a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800285e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	3301      	adds	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d199      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f002 ff8f 	bl	800579a <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002886:	f040 80c0 	bne.w	8002a0a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f002 ffb0 	bl	80057f4 <USB_ReadDevAllInEpInterrupt>
 8002894:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800289a:	e0b2      	b.n	8002a02 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80a7 	beq.w	80029f6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 ffd6 	bl	8005864 <USB_ReadDevInEPInterrupt>
 80028b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d057      	beq.n	8002974 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	2201      	movs	r2, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69f9      	ldr	r1, [r7, #28]
 80028e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028e4:	4013      	ands	r3, r2
 80028e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f4:	461a      	mov	r2, r3
 80028f6:	2301      	movs	r3, #1
 80028f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d132      	bne.n	8002968 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3348      	adds	r3, #72	; 0x48
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4403      	add	r3, r0
 8002922:	3344      	adds	r3, #68	; 0x44
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4419      	add	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4403      	add	r3, r0
 8002936:	3348      	adds	r3, #72	; 0x48
 8002938:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d113      	bne.n	8002968 <HAL_PCD_IRQHandler+0x31c>
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3350      	adds	r3, #80	; 0x50
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d108      	bne.n	8002968 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002960:	461a      	mov	r2, r3
 8002962:	2101      	movs	r1, #1
 8002964:	f002 ffde 	bl	8005924 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f004 fe37 	bl	80075e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298a:	461a      	mov	r2, r3
 800298c:	2308      	movs	r3, #8
 800298e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a6:	461a      	mov	r2, r3
 80029a8:	2310      	movs	r3, #16
 80029aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c2:	461a      	mov	r2, r3
 80029c4:	2340      	movs	r3, #64	; 0x40
 80029c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029de:	461a      	mov	r2, r3
 80029e0:	2302      	movs	r3, #2
 80029e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fc03 	bl	80031fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	3301      	adds	r3, #1
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f47f af49 	bne.w	800289c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 fec3 	bl	800579a <USB_ReadInterrupts>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a1e:	d122      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d108      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a46:	2100      	movs	r1, #0
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fe0f 	bl	800366c <HAL_PCDEx_LPM_Callback>
 8002a4e:	e002      	b.n	8002a56 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f004 fe33 	bl	80076bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 fe95 	bl	800579a <USB_ReadInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a7a:	d112      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f004 fdef 	bl	8007670 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002aa0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 fe77 	bl	800579a <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab6:	f040 80c7 	bne.w	8002c48 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2110      	movs	r1, #16
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 ff11 	bl	80048fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ade:	e056      	b.n	8002b8e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aec:	461a      	mov	r2, r3
 8002aee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002af2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b04:	0151      	lsls	r1, r2, #5
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	440a      	add	r2, r1
 8002b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b12:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b24:	0151      	lsls	r1, r2, #5
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	440a      	add	r2, r1
 8002b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b40:	461a      	mov	r2, r3
 8002b42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b58:	0151      	lsls	r1, r2, #5
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b78:	0151      	lsls	r1, r2, #5
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d3a3      	bcc.n	8002ae0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002baa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d016      	beq.n	8002be2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc4:	f043 030b 	orr.w	r3, r3, #11
 8002bc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bda:	f043 030b 	orr.w	r3, r3, #11
 8002bde:	6453      	str	r3, [r2, #68]	; 0x44
 8002be0:	e015      	b.n	8002c0e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bf4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002bf8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c08:	f043 030b 	orr.w	r3, r3, #11
 8002c0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c32:	461a      	mov	r2, r3
 8002c34:	f002 fe76 	bl	8005924 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 fda4 	bl	800579a <USB_ReadInterrupts>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5c:	d124      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fe3a 	bl	80058dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 fea2 	bl	80049b6 <USB_GetDevSpeed>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681c      	ldr	r4, [r3, #0]
 8002c7e:	f001 f915 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8002c82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f001 fbc1 	bl	8004414 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f004 fccd 	bl	8007632 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f002 fd74 	bl	800579a <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d10a      	bne.n	8002cd2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f004 fcaa 	bl	8007616 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f002 0208 	and.w	r2, r2, #8
 8002cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fd5f 	bl	800579a <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ce6:	d10f      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f004 fd02 	bl	80076fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fd44 	bl	800579a <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d1c:	d10f      	bne.n	8002d3e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	4619      	mov	r1, r3
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f004 fcd5 	bl	80076d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f002 fd29 	bl	800579a <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d52:	d10a      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f004 fce3 	bl	8007720 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f002 fd13 	bl	800579a <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d115      	bne.n	8002daa <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f004 fcd3 	bl	800773c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	e000      	b.n	8002daa <HAL_PCD_IRQHandler+0x75e>
      return;
 8002da8:	bf00      	nop
    }
  }
}
 8002daa:	3734      	adds	r7, #52	; 0x34
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}

08002db0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_PCD_SetAddress+0x1a>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e013      	b.n	8002df2 <HAL_PCD_SetAddress+0x42>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 fc71 	bl	80056ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	4608      	mov	r0, r1
 8002e04:	4611      	mov	r1, r2
 8002e06:	461a      	mov	r2, r3
 8002e08:	4603      	mov	r3, r0
 8002e0a:	70fb      	strb	r3, [r7, #3]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	803b      	strh	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	da0f      	bge.n	8002e40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f003 020f 	and.w	r2, r3, #15
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	3338      	adds	r3, #56	; 0x38
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	3304      	adds	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	705a      	strb	r2, [r3, #1]
 8002e3e:	e00f      	b.n	8002e60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e6c:	883a      	ldrh	r2, [r7, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	78ba      	ldrb	r2, [r7, #2]
 8002e76:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e8a:	78bb      	ldrb	r3, [r7, #2]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d102      	bne.n	8002e96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_PCD_EP_Open+0xaa>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e00e      	b.n	8002ec2 <HAL_PCD_EP_Open+0xc8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68f9      	ldr	r1, [r7, #12]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 fda4 	bl	8004a00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	da0f      	bge.n	8002efe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	3338      	adds	r3, #56	; 0x38
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	705a      	strb	r2, [r3, #1]
 8002efc:	e00f      	b.n	8002f1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f003 020f 	and.w	r2, r3, #15
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_PCD_EP_Close+0x6e>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e00e      	b.n	8002f56 <HAL_PCD_EP_Close+0x8c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 fde2 	bl	8004b10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2200      	movs	r2, #0
 8002f98:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fba:	7afb      	ldrb	r3, [r7, #11]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6979      	ldr	r1, [r7, #20]
 8002fd2:	f002 f8bd 	bl	8005150 <USB_EP0StartXfer>
 8002fd6:	e008      	b.n	8002fea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6979      	ldr	r1, [r7, #20]
 8002fe6:	f001 fe6f 	bl	8004cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	460b      	mov	r3, r1
 8003002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003004:	7afb      	ldrb	r3, [r7, #11]
 8003006:	f003 020f 	and.w	r2, r3, #15
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	3338      	adds	r3, #56	; 0x38
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2201      	movs	r2, #1
 8003032:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003034:	7afb      	ldrb	r3, [r7, #11]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	b2da      	uxtb	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	f002 f873 	bl	8005150 <USB_EP0StartXfer>
 800306a:	e008      	b.n	800307e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	6979      	ldr	r1, [r7, #20]
 800307a:	f001 fe25 	bl	8004cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d901      	bls.n	80030a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e050      	b.n	8003148 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da0f      	bge.n	80030ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	3338      	adds	r3, #56	; 0x38
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	3304      	adds	r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	705a      	strb	r2, [r3, #1]
 80030cc:	e00d      	b.n	80030ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	3304      	adds	r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_PCD_EP_SetStall+0x82>
 8003106:	2302      	movs	r3, #2
 8003108:	e01e      	b.n	8003148 <HAL_PCD_EP_SetStall+0xc0>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68f9      	ldr	r1, [r7, #12]
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fa02 	bl	8005522 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	b2d9      	uxtb	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003138:	461a      	mov	r2, r3
 800313a:	f002 fbf3 	bl	8005924 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	d901      	bls.n	800316e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e042      	b.n	80031f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800316e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003172:	2b00      	cmp	r3, #0
 8003174:	da0f      	bge.n	8003196 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	3338      	adds	r3, #56	; 0x38
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	705a      	strb	r2, [r3, #1]
 8003194:	e00f      	b.n	80031b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_PCD_EP_ClrStall+0x86>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e00e      	b.n	80031f4 <HAL_PCD_EP_ClrStall+0xa4>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 fa0a 	bl	80055fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af02      	add	r7, sp, #8
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	3338      	adds	r3, #56	; 0x38
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	d901      	bls.n	8003234 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e06c      	b.n	800330e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	429a      	cmp	r2, r3
 8003248:	d902      	bls.n	8003250 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	3303      	adds	r3, #3
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003258:	e02b      	b.n	80032b2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	429a      	cmp	r2, r3
 800326e:	d902      	bls.n	8003276 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3303      	adds	r3, #3
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800328e:	b2db      	uxtb	r3, r3
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	4603      	mov	r3, r0
 8003294:	6978      	ldr	r0, [r7, #20]
 8003296:	f002 f8ae 	bl	80053f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	441a      	add	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	441a      	add	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d809      	bhi.n	80032dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d203      	bcs.n	80032dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1be      	bne.n	800325a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d811      	bhi.n	800330c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	2201      	movs	r2, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	43db      	mvns	r3, r3
 8003302:	6939      	ldr	r1, [r7, #16]
 8003304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003308:	4013      	ands	r3, r2
 800330a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	333c      	adds	r3, #60	; 0x3c
 8003330:	3304      	adds	r3, #4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b01      	cmp	r3, #1
 800334c:	f040 80a0 	bne.w	8003490 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d015      	beq.n	8003386 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a72      	ldr	r2, [pc, #456]	; (8003528 <PCD_EP_OutXfrComplete_int+0x210>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f240 80dd 	bls.w	800351e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 80d7 	beq.w	800351e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337c:	461a      	mov	r2, r3
 800337e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003382:	6093      	str	r3, [r2, #8]
 8003384:	e0cb      	b.n	800351e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339c:	461a      	mov	r2, r3
 800339e:	2320      	movs	r3, #32
 80033a0:	6093      	str	r3, [r2, #8]
 80033a2:	e0bc      	b.n	800351e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 80b7 	bne.w	800351e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a5d      	ldr	r2, [pc, #372]	; (8003528 <PCD_EP_OutXfrComplete_int+0x210>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d90f      	bls.n	80033d8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	461a      	mov	r2, r3
 80033d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d4:	6093      	str	r3, [r2, #8]
 80033d6:	e0a2      	b.n	800351e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033ea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	0159      	lsls	r1, r3, #5
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	440b      	add	r3, r1
 80033f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80033fe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4403      	add	r3, r0
 800340e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003412:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4403      	add	r3, r0
 8003436:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4419      	add	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4403      	add	r3, r0
 800344c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003450:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d114      	bne.n	8003482 <PCD_EP_OutXfrComplete_int+0x16a>
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d108      	bne.n	8003482 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800347a:	461a      	mov	r2, r3
 800347c:	2101      	movs	r1, #1
 800347e:	f002 fa51 	bl	8005924 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f004 f88f 	bl	80075ac <HAL_PCD_DataOutStageCallback>
 800348e:	e046      	b.n	800351e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a26      	ldr	r2, [pc, #152]	; (800352c <PCD_EP_OutXfrComplete_int+0x214>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d124      	bne.n	80034e2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ae:	461a      	mov	r2, r3
 80034b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b4:	6093      	str	r3, [r2, #8]
 80034b6:	e032      	b.n	800351e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ce:	461a      	mov	r2, r3
 80034d0:	2320      	movs	r3, #32
 80034d2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f004 f866 	bl	80075ac <HAL_PCD_DataOutStageCallback>
 80034e0:	e01d      	b.n	800351e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d114      	bne.n	8003512 <PCD_EP_OutXfrComplete_int+0x1fa>
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d108      	bne.n	8003512 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800350a:	461a      	mov	r2, r3
 800350c:	2100      	movs	r1, #0
 800350e:	f002 fa09 	bl	8005924 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f004 f847 	bl	80075ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	4f54300a 	.word	0x4f54300a
 800352c:	4f54310a 	.word	0x4f54310a

08003530 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	333c      	adds	r3, #60	; 0x3c
 8003548:	3304      	adds	r3, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d90e      	bls.n	8003584 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357c:	461a      	mov	r2, r3
 800357e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003582:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f003 ffff 	bl	8007588 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d90c      	bls.n	80035ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d108      	bne.n	80035ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035a4:	461a      	mov	r2, r3
 80035a6:	2101      	movs	r1, #1
 80035a8:	f002 f9bc 	bl	8005924 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	4f54300a 	.word	0x4f54300a

080035bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	70fb      	strb	r3, [r7, #3]
 80035c8:	4613      	mov	r3, r2
 80035ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d107      	bne.n	80035ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035da:	883b      	ldrh	r3, [r7, #0]
 80035dc:	0419      	lsls	r1, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
 80035e8:	e028      	b.n	800363c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	4413      	add	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e00d      	b.n	800361a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	3340      	adds	r3, #64	; 0x40
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4413      	add	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	3301      	adds	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	3b01      	subs	r3, #1
 8003620:	429a      	cmp	r2, r3
 8003622:	d3ec      	bcc.n	80035fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003624:	883b      	ldrh	r3, [r7, #0]
 8003626:	0418      	lsls	r0, r3, #16
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6819      	ldr	r1, [r3, #0]
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	3b01      	subs	r3, #1
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	4302      	orrs	r2, r0
 8003634:	3340      	adds	r3, #64	; 0x40
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e264      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d075      	beq.n	800378e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036a2:	4ba3      	ldr	r3, [pc, #652]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d00c      	beq.n	80036c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ae:	4ba0      	ldr	r3, [pc, #640]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d112      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ba:	4b9d      	ldr	r3, [pc, #628]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c6:	d10b      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	4b99      	ldr	r3, [pc, #612]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d05b      	beq.n	800378c <HAL_RCC_OscConfig+0x108>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d157      	bne.n	800378c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e23f      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e8:	d106      	bne.n	80036f8 <HAL_RCC_OscConfig+0x74>
 80036ea:	4b91      	ldr	r3, [pc, #580]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a90      	ldr	r2, [pc, #576]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e01d      	b.n	8003734 <HAL_RCC_OscConfig+0xb0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x98>
 8003702:	4b8b      	ldr	r3, [pc, #556]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a8a      	ldr	r2, [pc, #552]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b88      	ldr	r3, [pc, #544]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a87      	ldr	r2, [pc, #540]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0xb0>
 800371c:	4b84      	ldr	r3, [pc, #528]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a83      	ldr	r2, [pc, #524]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b81      	ldr	r3, [pc, #516]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a80      	ldr	r2, [pc, #512]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 800372e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d013      	beq.n	8003764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe fb3e 	bl	8001dbc <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003744:	f7fe fb3a 	bl	8001dbc <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e204      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0xc0>
 8003762:	e014      	b.n	800378e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fb2a 	bl	8001dbc <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800376c:	f7fe fb26 	bl	8001dbc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1f0      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0xe8>
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d063      	beq.n	8003862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800379a:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a6:	4b62      	ldr	r3, [pc, #392]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d11c      	bne.n	80037ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b2:	4b5f      	ldr	r3, [pc, #380]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d116      	bne.n	80037ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	4b5c      	ldr	r3, [pc, #368]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_RCC_OscConfig+0x152>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d001      	beq.n	80037d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e1c4      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d6:	4b56      	ldr	r3, [pc, #344]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4952      	ldr	r1, [pc, #328]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	e03a      	b.n	8003862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f4:	4b4f      	ldr	r3, [pc, #316]	; (8003934 <HAL_RCC_OscConfig+0x2b0>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe fadf 	bl	8001dbc <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003802:	f7fe fadb 	bl	8001dbc <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e1a5      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	4b46      	ldr	r3, [pc, #280]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b43      	ldr	r3, [pc, #268]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4940      	ldr	r1, [pc, #256]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	e015      	b.n	8003862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003836:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <HAL_RCC_OscConfig+0x2b0>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fabe 	bl	8001dbc <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003844:	f7fe faba 	bl	8001dbc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e184      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	4b36      	ldr	r3, [pc, #216]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d030      	beq.n	80038d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003876:	4b30      	ldr	r3, [pc, #192]	; (8003938 <HAL_RCC_OscConfig+0x2b4>)
 8003878:	2201      	movs	r2, #1
 800387a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fe fa9e 	bl	8001dbc <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003884:	f7fe fa9a 	bl	8001dbc <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e164      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	4b26      	ldr	r3, [pc, #152]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x200>
 80038a2:	e015      	b.n	80038d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_RCC_OscConfig+0x2b4>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038aa:	f7fe fa87 	bl	8001dbc <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b2:	f7fe fa83 	bl	8001dbc <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e14d      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80038c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80a0 	beq.w	8003a1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e2:	4b13      	ldr	r3, [pc, #76]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fc:	6413      	str	r3, [r2, #64]	; 0x40
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCC_OscConfig+0x2b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d121      	bne.n	800395e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_RCC_OscConfig+0x2b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_RCC_OscConfig+0x2b8>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003926:	f7fe fa49 	bl	8001dbc <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	e011      	b.n	8003952 <HAL_RCC_OscConfig+0x2ce>
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	42470000 	.word	0x42470000
 8003938:	42470e80 	.word	0x42470e80
 800393c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003940:	f7fe fa3c 	bl	8001dbc <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e106      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	4b85      	ldr	r3, [pc, #532]	; (8003b68 <HAL_RCC_OscConfig+0x4e4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x2f0>
 8003966:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a80      	ldr	r2, [pc, #512]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	e01c      	b.n	80039ae <HAL_RCC_OscConfig+0x32a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b05      	cmp	r3, #5
 800397a:	d10c      	bne.n	8003996 <HAL_RCC_OscConfig+0x312>
 800397c:	4b7b      	ldr	r3, [pc, #492]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	4a7a      	ldr	r2, [pc, #488]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003982:	f043 0304 	orr.w	r3, r3, #4
 8003986:	6713      	str	r3, [r2, #112]	; 0x70
 8003988:	4b78      	ldr	r3, [pc, #480]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	4a77      	ldr	r2, [pc, #476]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6713      	str	r3, [r2, #112]	; 0x70
 8003994:	e00b      	b.n	80039ae <HAL_RCC_OscConfig+0x32a>
 8003996:	4b75      	ldr	r3, [pc, #468]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a74      	ldr	r2, [pc, #464]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70
 80039a2:	4b72      	ldr	r3, [pc, #456]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a71      	ldr	r2, [pc, #452]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 80039a8:	f023 0304 	bic.w	r3, r3, #4
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d015      	beq.n	80039e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fe fa01 	bl	8001dbc <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fe f9fd 	bl	8001dbc <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e0c5      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ee      	beq.n	80039be <HAL_RCC_OscConfig+0x33a>
 80039e0:	e014      	b.n	8003a0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e2:	f7fe f9eb 	bl	8001dbc <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fe f9e7 	bl	8001dbc <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e0af      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a00:	4b5a      	ldr	r3, [pc, #360]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ee      	bne.n	80039ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d105      	bne.n	8003a1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a12:	4b56      	ldr	r3, [pc, #344]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a55      	ldr	r2, [pc, #340]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 809b 	beq.w	8003b5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a28:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d05c      	beq.n	8003aee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d141      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3c:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <HAL_RCC_OscConfig+0x4ec>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a42:	f7fe f9bb 	bl	8001dbc <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7fe f9b7 	bl	8001dbc <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e081      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5c:	4b43      	ldr	r3, [pc, #268]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	019b      	lsls	r3, r3, #6
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	3b01      	subs	r3, #1
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	061b      	lsls	r3, r3, #24
 8003a8c:	4937      	ldr	r1, [pc, #220]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a92:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <HAL_RCC_OscConfig+0x4ec>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe f990 	bl	8001dbc <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fe f98c 	bl	8001dbc <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e056      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	4b2e      	ldr	r3, [pc, #184]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x41c>
 8003abe:	e04e      	b.n	8003b5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_RCC_OscConfig+0x4ec>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fe f979 	bl	8001dbc <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ace:	f7fe f975 	bl	8001dbc <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e03f      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae0:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x44a>
 8003aec:	e037      	b.n	8003b5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e032      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003afa:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <HAL_RCC_OscConfig+0x4e8>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d028      	beq.n	8003b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d121      	bne.n	8003b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d11a      	bne.n	8003b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d111      	bne.n	8003b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	42470060 	.word	0x42470060

08003b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0cc      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b88:	4b68      	ldr	r3, [pc, #416]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d90c      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b63      	ldr	r3, [pc, #396]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0b8      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d020      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc8:	4b59      	ldr	r3, [pc, #356]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a58      	ldr	r2, [pc, #352]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a52      	ldr	r2, [pc, #328]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	494d      	ldr	r1, [pc, #308]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d044      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b47      	ldr	r3, [pc, #284]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d119      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e06f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	4b3b      	ldr	r3, [pc, #236]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e067      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c52:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4934      	ldr	r1, [pc, #208]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c64:	f7fe f8aa 	bl	8001dbc <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fe f8a6 	bl	8001dbc <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e04f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 020c 	and.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1eb      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d20c      	bcs.n	8003cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e032      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4916      	ldr	r1, [pc, #88]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	490e      	ldr	r1, [pc, #56]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cfa:	f000 f821 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	490a      	ldr	r1, [pc, #40]	; (8003d34 <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	5ccb      	ldrb	r3, [r1, r3]
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <HAL_RCC_ClockConfig+0x1c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe f80a 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023c00 	.word	0x40023c00
 8003d30:	40023800 	.word	0x40023800
 8003d34:	08007b88 	.word	0x08007b88
 8003d38:	20000008 	.word	0x20000008
 8003d3c:	2000000c 	.word	0x2000000c

08003d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	b5b0      	push	{r4, r5, r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d46:	2100      	movs	r1, #0
 8003d48:	6079      	str	r1, [r7, #4]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	60f9      	str	r1, [r7, #12]
 8003d4e:	2100      	movs	r1, #0
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d52:	2100      	movs	r1, #0
 8003d54:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d56:	4952      	ldr	r1, [pc, #328]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d58:	6889      	ldr	r1, [r1, #8]
 8003d5a:	f001 010c 	and.w	r1, r1, #12
 8003d5e:	2908      	cmp	r1, #8
 8003d60:	d00d      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0x3e>
 8003d62:	2908      	cmp	r1, #8
 8003d64:	f200 8094 	bhi.w	8003e90 <HAL_RCC_GetSysClockFreq+0x150>
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x32>
 8003d6c:	2904      	cmp	r1, #4
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x38>
 8003d70:	e08e      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d72:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d74:	60bb      	str	r3, [r7, #8]
       break;
 8003d76:	e08e      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d78:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d7a:	60bb      	str	r3, [r7, #8]
      break;
 8003d7c:	e08b      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d7e:	4948      	ldr	r1, [pc, #288]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d80:	6849      	ldr	r1, [r1, #4]
 8003d82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d86:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d88:	4945      	ldr	r1, [pc, #276]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d8a:	6849      	ldr	r1, [r1, #4]
 8003d8c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d90:	2900      	cmp	r1, #0
 8003d92:	d024      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d94:	4942      	ldr	r1, [pc, #264]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d96:	6849      	ldr	r1, [r1, #4]
 8003d98:	0989      	lsrs	r1, r1, #6
 8003d9a:	4608      	mov	r0, r1
 8003d9c:	f04f 0100 	mov.w	r1, #0
 8003da0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003da4:	f04f 0500 	mov.w	r5, #0
 8003da8:	ea00 0204 	and.w	r2, r0, r4
 8003dac:	ea01 0305 	and.w	r3, r1, r5
 8003db0:	493d      	ldr	r1, [pc, #244]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003db2:	fb01 f003 	mul.w	r0, r1, r3
 8003db6:	2100      	movs	r1, #0
 8003db8:	fb01 f102 	mul.w	r1, r1, r2
 8003dbc:	1844      	adds	r4, r0, r1
 8003dbe:	493a      	ldr	r1, [pc, #232]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003dc0:	fba2 0101 	umull	r0, r1, r2, r1
 8003dc4:	1863      	adds	r3, r4, r1
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	f7fc fa02 	bl	80001d8 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e04a      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dde:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	099b      	lsrs	r3, r3, #6
 8003de4:	461a      	mov	r2, r3
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003dee:	f04f 0100 	mov.w	r1, #0
 8003df2:	ea02 0400 	and.w	r4, r2, r0
 8003df6:	ea03 0501 	and.w	r5, r3, r1
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	014b      	lsls	r3, r1, #5
 8003e08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e0c:	0142      	lsls	r2, r0, #5
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	1b00      	subs	r0, r0, r4
 8003e14:	eb61 0105 	sbc.w	r1, r1, r5
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	018b      	lsls	r3, r1, #6
 8003e22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e26:	0182      	lsls	r2, r0, #6
 8003e28:	1a12      	subs	r2, r2, r0
 8003e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e2e:	f04f 0000 	mov.w	r0, #0
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	00d9      	lsls	r1, r3, #3
 8003e38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e3c:	00d0      	lsls	r0, r2, #3
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	1912      	adds	r2, r2, r4
 8003e44:	eb45 0303 	adc.w	r3, r5, r3
 8003e48:	f04f 0000 	mov.w	r0, #0
 8003e4c:	f04f 0100 	mov.w	r1, #0
 8003e50:	0299      	lsls	r1, r3, #10
 8003e52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e56:	0290      	lsls	r0, r2, #10
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	f7fc f9b6 	bl	80001d8 <__aeabi_uldivmod>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4613      	mov	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	0c1b      	lsrs	r3, r3, #16
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	60bb      	str	r3, [r7, #8]
      break;
 8003e8e:	e002      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e92:	60bb      	str	r3, [r7, #8]
      break;
 8003e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e96:	68bb      	ldr	r3, [r7, #8]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	00f42400 	.word	0x00f42400
 8003ea8:	017d7840 	.word	0x017d7840

08003eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000008 	.word	0x20000008

08003ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ec8:	f7ff fff0 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0a9b      	lsrs	r3, r3, #10
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4903      	ldr	r1, [pc, #12]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	08007b98 	.word	0x08007b98

08003eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ef0:	f7ff ffdc 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0b5b      	lsrs	r3, r3, #13
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4903      	ldr	r1, [pc, #12]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	08007b98 	.word	0x08007b98

08003f14 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e047      	b.n	8003fb6 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd fe18 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f831 	bl	8003fc0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0208 	orr.w	r2, r2, #8
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	b09f      	sub	sp, #124	; 0x7c
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	68d9      	ldr	r1, [r3, #12]
 8003fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	ea40 0301 	orr.w	r3, r0, r1
 8003fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004004:	f021 010c 	bic.w	r1, r1, #12
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800400e:	430b      	orrs	r3, r1
 8004010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	6999      	ldr	r1, [r3, #24]
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	ea40 0301 	orr.w	r3, r0, r1
 8004028:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800402a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4bc5      	ldr	r3, [pc, #788]	; (8004344 <UART_SetConfig+0x384>)
 8004030:	429a      	cmp	r2, r3
 8004032:	d004      	beq.n	800403e <UART_SetConfig+0x7e>
 8004034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4bc3      	ldr	r3, [pc, #780]	; (8004348 <UART_SetConfig+0x388>)
 800403a:	429a      	cmp	r2, r3
 800403c:	d103      	bne.n	8004046 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800403e:	f7ff ff55 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8004042:	6778      	str	r0, [r7, #116]	; 0x74
 8004044:	e002      	b.n	800404c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004046:	f7ff ff3d 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 800404a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800404c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004054:	f040 80b6 	bne.w	80041c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405a:	461c      	mov	r4, r3
 800405c:	f04f 0500 	mov.w	r5, #0
 8004060:	4622      	mov	r2, r4
 8004062:	462b      	mov	r3, r5
 8004064:	1891      	adds	r1, r2, r2
 8004066:	6439      	str	r1, [r7, #64]	; 0x40
 8004068:	415b      	adcs	r3, r3
 800406a:	647b      	str	r3, [r7, #68]	; 0x44
 800406c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004070:	1912      	adds	r2, r2, r4
 8004072:	eb45 0303 	adc.w	r3, r5, r3
 8004076:	f04f 0000 	mov.w	r0, #0
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	00d9      	lsls	r1, r3, #3
 8004080:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004084:	00d0      	lsls	r0, r2, #3
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	1911      	adds	r1, r2, r4
 800408c:	6639      	str	r1, [r7, #96]	; 0x60
 800408e:	416b      	adcs	r3, r5
 8004090:	667b      	str	r3, [r7, #100]	; 0x64
 8004092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	461a      	mov	r2, r3
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	1891      	adds	r1, r2, r2
 800409e:	63b9      	str	r1, [r7, #56]	; 0x38
 80040a0:	415b      	adcs	r3, r3
 80040a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80040ac:	f7fc f894 	bl	80001d8 <__aeabi_uldivmod>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4ba5      	ldr	r3, [pc, #660]	; (800434c <UART_SetConfig+0x38c>)
 80040b6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	011e      	lsls	r6, r3, #4
 80040be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c0:	461c      	mov	r4, r3
 80040c2:	f04f 0500 	mov.w	r5, #0
 80040c6:	4622      	mov	r2, r4
 80040c8:	462b      	mov	r3, r5
 80040ca:	1891      	adds	r1, r2, r2
 80040cc:	6339      	str	r1, [r7, #48]	; 0x30
 80040ce:	415b      	adcs	r3, r3
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
 80040d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040d6:	1912      	adds	r2, r2, r4
 80040d8:	eb45 0303 	adc.w	r3, r5, r3
 80040dc:	f04f 0000 	mov.w	r0, #0
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	00d9      	lsls	r1, r3, #3
 80040e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ea:	00d0      	lsls	r0, r2, #3
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	1911      	adds	r1, r2, r4
 80040f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80040f4:	416b      	adcs	r3, r5
 80040f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	461a      	mov	r2, r3
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	1891      	adds	r1, r2, r2
 8004104:	62b9      	str	r1, [r7, #40]	; 0x28
 8004106:	415b      	adcs	r3, r3
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800410a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800410e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004112:	f7fc f861 	bl	80001d8 <__aeabi_uldivmod>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4b8c      	ldr	r3, [pc, #560]	; (800434c <UART_SetConfig+0x38c>)
 800411c:	fba3 1302 	umull	r1, r3, r3, r2
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	3332      	adds	r3, #50	; 0x32
 800412e:	4a87      	ldr	r2, [pc, #540]	; (800434c <UART_SetConfig+0x38c>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800413c:	441e      	add	r6, r3
 800413e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004140:	4618      	mov	r0, r3
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	1894      	adds	r4, r2, r2
 800414c:	623c      	str	r4, [r7, #32]
 800414e:	415b      	adcs	r3, r3
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
 8004152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004156:	1812      	adds	r2, r2, r0
 8004158:	eb41 0303 	adc.w	r3, r1, r3
 800415c:	f04f 0400 	mov.w	r4, #0
 8004160:	f04f 0500 	mov.w	r5, #0
 8004164:	00dd      	lsls	r5, r3, #3
 8004166:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800416a:	00d4      	lsls	r4, r2, #3
 800416c:	4622      	mov	r2, r4
 800416e:	462b      	mov	r3, r5
 8004170:	1814      	adds	r4, r2, r0
 8004172:	653c      	str	r4, [r7, #80]	; 0x50
 8004174:	414b      	adcs	r3, r1
 8004176:	657b      	str	r3, [r7, #84]	; 0x54
 8004178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	461a      	mov	r2, r3
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	1891      	adds	r1, r2, r2
 8004184:	61b9      	str	r1, [r7, #24]
 8004186:	415b      	adcs	r3, r3
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800418e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004192:	f7fc f821 	bl	80001d8 <__aeabi_uldivmod>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4b6c      	ldr	r3, [pc, #432]	; (800434c <UART_SetConfig+0x38c>)
 800419c:	fba3 1302 	umull	r1, r3, r3, r2
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	2164      	movs	r1, #100	; 0x64
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	3332      	adds	r3, #50	; 0x32
 80041ae:	4a67      	ldr	r2, [pc, #412]	; (800434c <UART_SetConfig+0x38c>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	f003 0207 	and.w	r2, r3, #7
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4432      	add	r2, r6
 80041c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041c2:	e0b9      	b.n	8004338 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c6:	461c      	mov	r4, r3
 80041c8:	f04f 0500 	mov.w	r5, #0
 80041cc:	4622      	mov	r2, r4
 80041ce:	462b      	mov	r3, r5
 80041d0:	1891      	adds	r1, r2, r2
 80041d2:	6139      	str	r1, [r7, #16]
 80041d4:	415b      	adcs	r3, r3
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041dc:	1912      	adds	r2, r2, r4
 80041de:	eb45 0303 	adc.w	r3, r5, r3
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f04f 0100 	mov.w	r1, #0
 80041ea:	00d9      	lsls	r1, r3, #3
 80041ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041f0:	00d0      	lsls	r0, r2, #3
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	eb12 0804 	adds.w	r8, r2, r4
 80041fa:	eb43 0905 	adc.w	r9, r3, r5
 80041fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	008b      	lsls	r3, r1, #2
 8004212:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004216:	0082      	lsls	r2, r0, #2
 8004218:	4640      	mov	r0, r8
 800421a:	4649      	mov	r1, r9
 800421c:	f7fb ffdc 	bl	80001d8 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4b49      	ldr	r3, [pc, #292]	; (800434c <UART_SetConfig+0x38c>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	011e      	lsls	r6, r3, #4
 800422e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004230:	4618      	mov	r0, r3
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	1894      	adds	r4, r2, r2
 800423c:	60bc      	str	r4, [r7, #8]
 800423e:	415b      	adcs	r3, r3
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004246:	1812      	adds	r2, r2, r0
 8004248:	eb41 0303 	adc.w	r3, r1, r3
 800424c:	f04f 0400 	mov.w	r4, #0
 8004250:	f04f 0500 	mov.w	r5, #0
 8004254:	00dd      	lsls	r5, r3, #3
 8004256:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800425a:	00d4      	lsls	r4, r2, #3
 800425c:	4622      	mov	r2, r4
 800425e:	462b      	mov	r3, r5
 8004260:	1814      	adds	r4, r2, r0
 8004262:	64bc      	str	r4, [r7, #72]	; 0x48
 8004264:	414b      	adcs	r3, r1
 8004266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4618      	mov	r0, r3
 800426e:	f04f 0100 	mov.w	r1, #0
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	008b      	lsls	r3, r1, #2
 800427c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004280:	0082      	lsls	r2, r0, #2
 8004282:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004286:	f7fb ffa7 	bl	80001d8 <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4b2f      	ldr	r3, [pc, #188]	; (800434c <UART_SetConfig+0x38c>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	; 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	3332      	adds	r3, #50	; 0x32
 80042a2:	4a2a      	ldr	r2, [pc, #168]	; (800434c <UART_SetConfig+0x38c>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ae:	441e      	add	r6, r3
 80042b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b2:	4618      	mov	r0, r3
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	1894      	adds	r4, r2, r2
 80042be:	603c      	str	r4, [r7, #0]
 80042c0:	415b      	adcs	r3, r3
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042c8:	1812      	adds	r2, r2, r0
 80042ca:	eb41 0303 	adc.w	r3, r1, r3
 80042ce:	f04f 0400 	mov.w	r4, #0
 80042d2:	f04f 0500 	mov.w	r5, #0
 80042d6:	00dd      	lsls	r5, r3, #3
 80042d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042dc:	00d4      	lsls	r4, r2, #3
 80042de:	4622      	mov	r2, r4
 80042e0:	462b      	mov	r3, r5
 80042e2:	eb12 0a00 	adds.w	sl, r2, r0
 80042e6:	eb43 0b01 	adc.w	fp, r3, r1
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	008b      	lsls	r3, r1, #2
 80042fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004302:	0082      	lsls	r2, r0, #2
 8004304:	4650      	mov	r0, sl
 8004306:	4659      	mov	r1, fp
 8004308:	f7fb ff66 	bl	80001d8 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b0e      	ldr	r3, [pc, #56]	; (800434c <UART_SetConfig+0x38c>)
 8004312:	fba3 1302 	umull	r1, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	2164      	movs	r1, #100	; 0x64
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	3332      	adds	r3, #50	; 0x32
 8004324:	4a09      	ldr	r2, [pc, #36]	; (800434c <UART_SetConfig+0x38c>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	f003 020f 	and.w	r2, r3, #15
 8004330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4432      	add	r2, r6
 8004336:	609a      	str	r2, [r3, #8]
}
 8004338:	bf00      	nop
 800433a:	377c      	adds	r7, #124	; 0x7c
 800433c:	46bd      	mov	sp, r7
 800433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004342:	bf00      	nop
 8004344:	40011000 	.word	0x40011000
 8004348:	40011400 	.word	0x40011400
 800434c:	51eb851f 	.word	0x51eb851f

08004350 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004350:	b084      	sub	sp, #16
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	f107 001c 	add.w	r0, r7, #28
 800435e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	d122      	bne.n	80043ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800437c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 fb1c 	bl	80059e0 <USB_CoreReset>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e01a      	b.n	80043e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f001 fb10 	bl	80059e0 <USB_CoreReset>
 80043c0:	4603      	mov	r3, r0
 80043c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38
 80043d6:	e005      	b.n	80043e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10b      	bne.n	8004402 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f043 0206 	orr.w	r2, r3, #6
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800440e:	b004      	add	sp, #16
 8004410:	4770      	bx	lr
	...

08004414 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d165      	bne.n	80044f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4a41      	ldr	r2, [pc, #260]	; (8004530 <USB_SetTurnaroundTime+0x11c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d906      	bls.n	800443e <USB_SetTurnaroundTime+0x2a>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4a40      	ldr	r2, [pc, #256]	; (8004534 <USB_SetTurnaroundTime+0x120>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d202      	bcs.n	800443e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004438:	230f      	movs	r3, #15
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	e062      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4a3c      	ldr	r2, [pc, #240]	; (8004534 <USB_SetTurnaroundTime+0x120>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d306      	bcc.n	8004454 <USB_SetTurnaroundTime+0x40>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <USB_SetTurnaroundTime+0x124>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d202      	bcs.n	8004454 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800444e:	230e      	movs	r3, #14
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e057      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4a38      	ldr	r2, [pc, #224]	; (8004538 <USB_SetTurnaroundTime+0x124>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d306      	bcc.n	800446a <USB_SetTurnaroundTime+0x56>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a37      	ldr	r2, [pc, #220]	; (800453c <USB_SetTurnaroundTime+0x128>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d202      	bcs.n	800446a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004464:	230d      	movs	r3, #13
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	e04c      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a33      	ldr	r2, [pc, #204]	; (800453c <USB_SetTurnaroundTime+0x128>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d306      	bcc.n	8004480 <USB_SetTurnaroundTime+0x6c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4a32      	ldr	r2, [pc, #200]	; (8004540 <USB_SetTurnaroundTime+0x12c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d802      	bhi.n	8004480 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800447a:	230c      	movs	r3, #12
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e041      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <USB_SetTurnaroundTime+0x12c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d906      	bls.n	8004496 <USB_SetTurnaroundTime+0x82>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4a2e      	ldr	r2, [pc, #184]	; (8004544 <USB_SetTurnaroundTime+0x130>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d802      	bhi.n	8004496 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004490:	230b      	movs	r3, #11
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e036      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <USB_SetTurnaroundTime+0x130>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d906      	bls.n	80044ac <USB_SetTurnaroundTime+0x98>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4a29      	ldr	r2, [pc, #164]	; (8004548 <USB_SetTurnaroundTime+0x134>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d802      	bhi.n	80044ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044a6:	230a      	movs	r3, #10
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e02b      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a26      	ldr	r2, [pc, #152]	; (8004548 <USB_SetTurnaroundTime+0x134>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d906      	bls.n	80044c2 <USB_SetTurnaroundTime+0xae>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a25      	ldr	r2, [pc, #148]	; (800454c <USB_SetTurnaroundTime+0x138>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d202      	bcs.n	80044c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044bc:	2309      	movs	r3, #9
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	e020      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4a21      	ldr	r2, [pc, #132]	; (800454c <USB_SetTurnaroundTime+0x138>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d306      	bcc.n	80044d8 <USB_SetTurnaroundTime+0xc4>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4a20      	ldr	r2, [pc, #128]	; (8004550 <USB_SetTurnaroundTime+0x13c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d802      	bhi.n	80044d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044d2:	2308      	movs	r3, #8
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e015      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <USB_SetTurnaroundTime+0x13c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d906      	bls.n	80044ee <USB_SetTurnaroundTime+0xda>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <USB_SetTurnaroundTime+0x140>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d202      	bcs.n	80044ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044e8:	2307      	movs	r3, #7
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e00a      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044ee:	2306      	movs	r3, #6
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e007      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044fa:	2309      	movs	r3, #9
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e001      	b.n	8004504 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004500:	2309      	movs	r3, #9
 8004502:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	029b      	lsls	r3, r3, #10
 8004518:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	00d8acbf 	.word	0x00d8acbf
 8004534:	00e4e1c0 	.word	0x00e4e1c0
 8004538:	00f42400 	.word	0x00f42400
 800453c:	01067380 	.word	0x01067380
 8004540:	011a499f 	.word	0x011a499f
 8004544:	01312cff 	.word	0x01312cff
 8004548:	014ca43f 	.word	0x014ca43f
 800454c:	016e3600 	.word	0x016e3600
 8004550:	01a6ab1f 	.word	0x01a6ab1f
 8004554:	01e84800 	.word	0x01e84800

08004558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f043 0201 	orr.w	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 0201 	bic.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d115      	bne.n	80045ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045ca:	2001      	movs	r0, #1
 80045cc:	f7fd fc02 	bl	8001dd4 <HAL_Delay>
      ms++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f001 f972 	bl	80058c0 <USB_GetMode>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d01e      	beq.n	8004620 <USB_SetCurrentMode+0x84>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b31      	cmp	r3, #49	; 0x31
 80045e6:	d9f0      	bls.n	80045ca <USB_SetCurrentMode+0x2e>
 80045e8:	e01a      	b.n	8004620 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d115      	bne.n	800461c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045fc:	2001      	movs	r0, #1
 80045fe:	f7fd fbe9 	bl	8001dd4 <HAL_Delay>
      ms++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f001 f959 	bl	80058c0 <USB_GetMode>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <USB_SetCurrentMode+0x84>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b31      	cmp	r3, #49	; 0x31
 8004618:	d9f0      	bls.n	80045fc <USB_SetCurrentMode+0x60>
 800461a:	e001      	b.n	8004620 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e005      	b.n	800462c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b32      	cmp	r3, #50	; 0x32
 8004624:	d101      	bne.n	800462a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004634:	b084      	sub	sp, #16
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	e009      	b.n	8004668 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3340      	adds	r3, #64	; 0x40
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3301      	adds	r3, #1
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b0e      	cmp	r3, #14
 800466c:	d9f2      	bls.n	8004654 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d11c      	bne.n	80046ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004682:	f043 0302 	orr.w	r3, r3, #2
 8004686:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
 80046ac:	e00b      	b.n	80046c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046cc:	461a      	mov	r2, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d8:	4619      	mov	r1, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e0:	461a      	mov	r2, r3
 80046e2:	680b      	ldr	r3, [r1, #0]
 80046e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10c      	bne.n	8004706 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046f2:	2100      	movs	r1, #0
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f945 	bl	8004984 <USB_SetDevSpeed>
 80046fa:	e008      	b.n	800470e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046fc:	2101      	movs	r1, #1
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f940 	bl	8004984 <USB_SetDevSpeed>
 8004704:	e003      	b.n	800470e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004706:	2103      	movs	r1, #3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f93b 	bl	8004984 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800470e:	2110      	movs	r1, #16
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f8f3 	bl	80048fc <USB_FlushTxFifo>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f90f 	bl	8004944 <USB_FlushRxFifo>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004742:	461a      	mov	r2, r3
 8004744:	2300      	movs	r3, #0
 8004746:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	461a      	mov	r2, r3
 8004750:	2300      	movs	r3, #0
 8004752:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	e043      	b.n	80047e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800476c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004770:	d118      	bne.n	80047a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e013      	b.n	80047b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479a:	461a      	mov	r2, r3
 800479c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e008      	b.n	80047b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	461a      	mov	r2, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	461a      	mov	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	461a      	mov	r2, r3
 80047d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	3301      	adds	r3, #1
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d3b7      	bcc.n	800475a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	e043      	b.n	8004878 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004806:	d118      	bne.n	800483a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	461a      	mov	r2, r3
 800481c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e013      	b.n	800484c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	461a      	mov	r2, r3
 8004832:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	e008      	b.n	800484c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004846:	461a      	mov	r2, r3
 8004848:	2300      	movs	r3, #0
 800484a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	461a      	mov	r2, r3
 800485a:	2300      	movs	r3, #0
 800485c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004870:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	3301      	adds	r3, #1
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	429a      	cmp	r2, r3
 800487e:	d3b7      	bcc.n	80047f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800488e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004892:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f043 0210 	orr.w	r2, r3, #16
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <USB_DevInit+0x2c4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f043 0208 	orr.w	r2, r3, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048f4:	b004      	add	sp, #16
 80048f6:	4770      	bx	lr
 80048f8:	803c3800 	.word	0x803c3800

080048fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	019b      	lsls	r3, r3, #6
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3301      	adds	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	4a08      	ldr	r2, [pc, #32]	; (8004940 <USB_FlushTxFifo+0x44>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e006      	b.n	8004934 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b20      	cmp	r3, #32
 8004930:	d0f1      	beq.n	8004916 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	00030d40 	.word	0x00030d40

08004944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2210      	movs	r2, #16
 8004954:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	4a08      	ldr	r2, [pc, #32]	; (8004980 <USB_FlushRxFifo+0x3c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e006      	b.n	8004974 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d0f1      	beq.n	8004956 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	00030d40 	.word	0x00030d40

08004984 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a4:	4313      	orrs	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b087      	sub	sp, #28
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0306 	and.w	r3, r3, #6
 80049ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75fb      	strb	r3, [r7, #23]
 80049da:	e00a      	b.n	80049f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d002      	beq.n	80049e8 <USB_GetDevSpeed+0x32>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b06      	cmp	r3, #6
 80049e6:	d102      	bne.n	80049ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049e8:	2302      	movs	r3, #2
 80049ea:	75fb      	strb	r3, [r7, #23]
 80049ec:	e001      	b.n	80049f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049ee:	230f      	movs	r3, #15
 80049f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d13a      	bne.n	8004a92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	f003 030f 	and.w	r3, r3, #15
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	68f9      	ldr	r1, [r7, #12]
 8004a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d155      	bne.n	8004b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	78db      	ldrb	r3, [r3, #3]
 8004a6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	059b      	lsls	r3, r3, #22
 8004a76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	e036      	b.n	8004b00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11a      	bne.n	8004b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	78db      	ldrb	r3, [r3, #3]
 8004ae4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d161      	bne.n	8004bf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b42:	d11f      	bne.n	8004b84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	0151      	lsls	r1, r2, #5
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	440a      	add	r2, r1
 8004b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	2101      	movs	r1, #1
 8004b96:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	2101      	movs	r1, #1
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	0159      	lsls	r1, r3, #5
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	440b      	add	r3, r1
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	4619      	mov	r1, r3
 8004be8:	4b35      	ldr	r3, [pc, #212]	; (8004cc0 <USB_DeactivateEndpoint+0x1b0>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
 8004bee:	e060      	b.n	8004cb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c06:	d11f      	bne.n	8004c48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	2101      	movs	r1, #1
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	43db      	mvns	r3, r3
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c68:	4013      	ands	r3, r2
 8004c6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	43db      	mvns	r3, r3
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	0159      	lsls	r1, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	440b      	add	r3, r1
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	4619      	mov	r1, r3
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <USB_DeactivateEndpoint+0x1b4>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	ec337800 	.word	0xec337800
 8004cc4:	eff37800 	.word	0xeff37800

08004cc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	; 0x28
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	f040 815c 	bne.w	8004fa2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d132      	bne.n	8004d58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d50:	0cdb      	lsrs	r3, r3, #19
 8004d52:	04db      	lsls	r3, r3, #19
 8004d54:	6113      	str	r3, [r2, #16]
 8004d56:	e074      	b.n	8004e42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d72:	0cdb      	lsrs	r3, r3, #19
 8004d74:	04db      	lsls	r3, r3, #19
 8004d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	0151      	lsls	r1, r2, #5
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	440a      	add	r2, r1
 8004d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6959      	ldr	r1, [r3, #20]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	440b      	add	r3, r1
 8004db4:	1e59      	subs	r1, r3, #1
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dbe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004dc0:	4b9d      	ldr	r3, [pc, #628]	; (8005038 <USB_EPStartXfer+0x370>)
 8004dc2:	400b      	ands	r3, r1
 8004dc4:	69b9      	ldr	r1, [r7, #24]
 8004dc6:	0148      	lsls	r0, r1, #5
 8004dc8:	69f9      	ldr	r1, [r7, #28]
 8004dca:	4401      	add	r1, r0
 8004dcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dea:	69b9      	ldr	r1, [r7, #24]
 8004dec:	0148      	lsls	r0, r1, #5
 8004dee:	69f9      	ldr	r1, [r7, #28]
 8004df0:	4401      	add	r1, r0
 8004df2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004df6:	4313      	orrs	r3, r2
 8004df8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	78db      	ldrb	r3, [r3, #3]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d11f      	bne.n	8004e42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d14b      	bne.n	8004ee0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	78db      	ldrb	r3, [r3, #3]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d128      	bne.n	8004ebe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d110      	bne.n	8004e9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	e00f      	b.n	8004ebe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e12f      	b.n	8005140 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004efe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	78db      	ldrb	r3, [r3, #3]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d015      	beq.n	8004f34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8117 	beq.w	8005140 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	2101      	movs	r1, #1
 8004f24:	fa01 f303 	lsl.w	r3, r1, r3
 8004f28:	69f9      	ldr	r1, [r7, #28]
 8004f2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	634b      	str	r3, [r1, #52]	; 0x34
 8004f32:	e105      	b.n	8005140 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d110      	bne.n	8004f66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	e00f      	b.n	8004f86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	68d9      	ldr	r1, [r3, #12]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	b298      	uxth	r0, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4603      	mov	r3, r0
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fa2b 	bl	80053f6 <USB_WritePacket>
 8004fa0:	e0ce      	b.n	8005140 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	0cdb      	lsrs	r3, r3, #19
 8004fbe:	04db      	lsls	r3, r3, #19
 8004fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fe4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d126      	bne.n	800503c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005004:	69b9      	ldr	r1, [r7, #24]
 8005006:	0148      	lsls	r0, r1, #5
 8005008:	69f9      	ldr	r1, [r7, #28]
 800500a:	4401      	add	r1, r0
 800500c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005010:	4313      	orrs	r3, r2
 8005012:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005032:	6113      	str	r3, [r2, #16]
 8005034:	e036      	b.n	80050a4 <USB_EPStartXfer+0x3dc>
 8005036:	bf00      	nop
 8005038:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4413      	add	r3, r2
 8005046:	1e5a      	subs	r2, r3, #1
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	8afb      	ldrh	r3, [r7, #22]
 8005062:	04d9      	lsls	r1, r3, #19
 8005064:	4b39      	ldr	r3, [pc, #228]	; (800514c <USB_EPStartXfer+0x484>)
 8005066:	400b      	ands	r3, r1
 8005068:	69b9      	ldr	r1, [r7, #24]
 800506a:	0148      	lsls	r0, r1, #5
 800506c:	69f9      	ldr	r1, [r7, #28]
 800506e:	4401      	add	r1, r0
 8005070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005074:	4313      	orrs	r3, r2
 8005076:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	8af9      	ldrh	r1, [r7, #22]
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	0148      	lsls	r0, r1, #5
 8005098:	69f9      	ldr	r1, [r7, #28]
 800509a:	4401      	add	r1, r0
 800509c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050a0:	4313      	orrs	r3, r2
 80050a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d10d      	bne.n	80050c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	68d9      	ldr	r1, [r3, #12]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	460a      	mov	r2, r1
 80050c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	78db      	ldrb	r3, [r3, #3]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d128      	bne.n	8005120 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d110      	bne.n	8005100 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e00f      	b.n	8005120 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800513e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	1ff80000 	.word	0x1ff80000

08005150 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b01      	cmp	r3, #1
 800516e:	f040 80cd 	bne.w	800530c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d132      	bne.n	80051e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005194:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005198:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800519c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d8:	0cdb      	lsrs	r3, r3, #19
 80051da:	04db      	lsls	r3, r3, #19
 80051dc:	6113      	str	r3, [r2, #16]
 80051de:	e04e      	b.n	800527e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fa:	0cdb      	lsrs	r3, r3, #19
 80051fc:	04db      	lsls	r3, r3, #19
 80051fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800521e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005222:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	695a      	ldr	r2, [r3, #20]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	429a      	cmp	r2, r3
 800522e:	d903      	bls.n	8005238 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526e:	6939      	ldr	r1, [r7, #16]
 8005270:	0148      	lsls	r0, r1, #5
 8005272:	6979      	ldr	r1, [r7, #20]
 8005274:	4401      	add	r1, r0
 8005276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800527a:	4313      	orrs	r3, r2
 800527c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d11e      	bne.n	80052c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	461a      	mov	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e092      	b.n	80053e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d07e      	beq.n	80053e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	2101      	movs	r1, #1
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005306:	4313      	orrs	r3, r2
 8005308:	634b      	str	r3, [r1, #52]	; 0x34
 800530a:	e06d      	b.n	80053e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005326:	0cdb      	lsrs	r3, r3, #19
 8005328:	04db      	lsls	r3, r3, #19
 800532a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	440a      	add	r2, r1
 8005342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005346:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800534a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800534e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800537e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005396:	6939      	ldr	r1, [r7, #16]
 8005398:	0148      	lsls	r0, r1, #5
 800539a:	6979      	ldr	r1, [r7, #20]
 800539c:	4401      	add	r1, r0
 800539e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053a2:	4313      	orrs	r3, r2
 80053a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10d      	bne.n	80053c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68d9      	ldr	r1, [r3, #12]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	460a      	mov	r2, r1
 80053c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b089      	sub	sp, #36	; 0x24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	4611      	mov	r1, r2
 8005402:	461a      	mov	r2, r3
 8005404:	460b      	mov	r3, r1
 8005406:	71fb      	strb	r3, [r7, #7]
 8005408:	4613      	mov	r3, r2
 800540a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005414:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	d123      	bne.n	8005464 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800541c:	88bb      	ldrh	r3, [r7, #4]
 800541e:	3303      	adds	r3, #3
 8005420:	089b      	lsrs	r3, r3, #2
 8005422:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	e018      	b.n	800545c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	031a      	lsls	r2, r3, #12
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005436:	461a      	mov	r2, r3
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	3301      	adds	r3, #1
 8005442:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3301      	adds	r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3301      	adds	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	3301      	adds	r3, #1
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	429a      	cmp	r2, r3
 8005462:	d3e2      	bcc.n	800542a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3724      	adds	r7, #36	; 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005472:	b480      	push	{r7}
 8005474:	b08b      	sub	sp, #44	; 0x2c
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	4613      	mov	r3, r2
 800547e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	089b      	lsrs	r3, r3, #2
 800548c:	b29b      	uxth	r3, r3
 800548e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005498:	2300      	movs	r3, #0
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	e014      	b.n	80054c8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	601a      	str	r2, [r3, #0]
    pDest++;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	3301      	adds	r3, #1
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	3301      	adds	r3, #1
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	3301      	adds	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	3301      	adds	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	3301      	adds	r3, #1
 80054c6:	623b      	str	r3, [r7, #32]
 80054c8:	6a3a      	ldr	r2, [r7, #32]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d3e6      	bcc.n	800549e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054d0:	8bfb      	ldrh	r3, [r7, #30]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01e      	beq.n	8005514 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e0:	461a      	mov	r2, r3
 80054e2:	f107 0310 	add.w	r3, r7, #16
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	701a      	strb	r2, [r3, #0]
      i++;
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	3301      	adds	r3, #1
 8005500:	623b      	str	r3, [r7, #32]
      pDest++;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	3301      	adds	r3, #1
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005508:	8bfb      	ldrh	r3, [r7, #30]
 800550a:	3b01      	subs	r3, #1
 800550c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800550e:	8bfb      	ldrh	r3, [r7, #30]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1ea      	bne.n	80054ea <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005516:	4618      	mov	r0, r3
 8005518:	372c      	adds	r7, #44	; 0x2c
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d12c      	bne.n	8005598 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	db12      	blt.n	8005576 <USB_EPSetStall+0x54>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00f      	beq.n	8005576 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005570:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005574:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	e02b      	b.n	80055f0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	db12      	blt.n	80055d0 <USB_EPSetStall+0xae>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00f      	beq.n	80055d0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055ce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d128      	bne.n	800566c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005638:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	78db      	ldrb	r3, [r3, #3]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d003      	beq.n	800564a <USB_EPClearStall+0x4c>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	78db      	ldrb	r3, [r3, #3]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d138      	bne.n	80056bc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	e027      	b.n	80056bc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	0151      	lsls	r1, r2, #5
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	440a      	add	r2, r1
 8005682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800568a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	78db      	ldrb	r3, [r3, #3]
 8005690:	2b03      	cmp	r3, #3
 8005692:	d003      	beq.n	800569c <USB_EPClearStall+0x9e>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	78db      	ldrb	r3, [r3, #3]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d10f      	bne.n	80056bc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	460b      	mov	r3, r1
 80056d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005730:	f023 0303 	bic.w	r3, r3, #3
 8005734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005744:	f023 0302 	bic.w	r3, r3, #2
 8005748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005786:	f043 0302 	orr.w	r3, r3, #2
 800578a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4013      	ands	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057b2:	68fb      	ldr	r3, [r7, #12]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4013      	ands	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	0c1b      	lsrs	r3, r3, #16
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	b29b      	uxth	r3, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	4013      	ands	r3, r2
 8005854:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005856:	68bb      	ldr	r3, [r7, #8]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005886:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
 8005894:	01db      	lsls	r3, r3, #7
 8005896:	b2db      	uxtb	r3, r3
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4013      	ands	r3, r2
 80058b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058b2:	68bb      	ldr	r3, [r7, #8]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	f003 0301 	and.w	r3, r3, #1
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058fa:	f023 0307 	bic.w	r3, r3, #7
 80058fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800590e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005912:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	460b      	mov	r3, r1
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	333c      	adds	r3, #60	; 0x3c
 800593a:	3304      	adds	r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4a26      	ldr	r2, [pc, #152]	; (80059dc <USB_EP0_OutStart+0xb8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d90a      	bls.n	800595e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005958:	d101      	bne.n	800595e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	e037      	b.n	80059ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	461a      	mov	r2, r3
 8005966:	2300      	movs	r3, #0
 8005968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800597c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598c:	f043 0318 	orr.w	r3, r3, #24
 8005990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059a6:	7afb      	ldrb	r3, [r7, #11]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d10f      	bne.n	80059cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b2:	461a      	mov	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	4f54300a 	.word	0x4f54300a

080059e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3301      	adds	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <USB_CoreReset+0x60>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e01a      	b.n	8005a32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	daf3      	bge.n	80059ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f043 0201 	orr.w	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <USB_CoreReset+0x60>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e006      	b.n	8005a32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d0f1      	beq.n	8005a14 <USB_CoreReset+0x34>

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	00030d40 	.word	0x00030d40

08005a44 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8005a50:	2018      	movs	r0, #24
 8005a52:	f001 fff9 	bl	8007a48 <USBD_static_malloc>
 8005a56:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d105      	bne.n	8005a6a <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a66:	2302      	movs	r3, #2
 8005a68:	e038      	b.n	8005adc <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	7c1b      	ldrb	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2205      	movs	r2, #5
 8005a7e:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2205      	movs	r2, #5
 8005a84:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8005a88:	e006      	b.n	8005a98 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2205      	movs	r2, #5
 8005a8e:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2205      	movs	r2, #5
 8005a94:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005a98:	2302      	movs	r3, #2
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	2181      	movs	r1, #129	; 0x81
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f001 fec1 	bl	8007826 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005aaa:	2302      	movs	r3, #2
 8005aac:	2203      	movs	r2, #3
 8005aae:	2101      	movs	r1, #1
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 feb8 	bl	8007826 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 ff95 	bl	8007a04 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005af0:	2181      	movs	r1, #129	; 0x81
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 febd 	bl	8007872 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005b04:	2101      	movs	r1, #1
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 feb3 	bl	8007872 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00e      	beq.n	8005b44 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 ff94 	bl	8007a64 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b60:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e0ed      	b.n	8005d58 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d052      	beq.n	8005c2e <USBD_CUSTOM_HID_Setup+0xde>
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	f040 80dd 	bne.w	8005d48 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	3b02      	subs	r3, #2
 8005b94:	2b09      	cmp	r3, #9
 8005b96:	d842      	bhi.n	8005c1e <USBD_CUSTOM_HID_Setup+0xce>
 8005b98:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <USBD_CUSTOM_HID_Setup+0x50>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005bd7 	.word	0x08005bd7
 8005ba8:	08005c1f 	.word	0x08005c1f
 8005bac:	08005c1f 	.word	0x08005c1f
 8005bb0:	08005c1f 	.word	0x08005c1f
 8005bb4:	08005c1f 	.word	0x08005c1f
 8005bb8:	08005c1f 	.word	0x08005c1f
 8005bbc:	08005c09 	.word	0x08005c09
 8005bc0:	08005be7 	.word	0x08005be7
 8005bc4:	08005bc9 	.word	0x08005bc9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	885b      	ldrh	r3, [r3, #2]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	605a      	str	r2, [r3, #4]
          break;
 8005bd4:	e02a      	b.n	8005c2c <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 fa9b 	bl	800711a <USBD_CtlSendData>
          break;
 8005be4:	e022      	b.n	8005c2c <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	885b      	ldrh	r3, [r3, #2]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	609a      	str	r2, [r3, #8]
          break;
 8005bf6:	e019      	b.n	8005c2c <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 fa8a 	bl	800711a <USBD_CtlSendData>
          break;
 8005c06:	e011      	b.n	8005c2c <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005c0e:	6939      	ldr	r1, [r7, #16]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	88db      	ldrh	r3, [r3, #6]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 faab 	bl	8007172 <USBD_CtlPrepareRx>
          break;
 8005c1c:	e006      	b.n	8005c2c <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 fa09 	bl	8007038 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c26:	2303      	movs	r3, #3
 8005c28:	75fb      	strb	r3, [r7, #23]
          break;
 8005c2a:	bf00      	nop
      }
      break;
 8005c2c:	e093      	b.n	8005d56 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	2b0b      	cmp	r3, #11
 8005c34:	d87f      	bhi.n	8005d36 <USBD_CUSTOM_HID_Setup+0x1e6>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <USBD_CUSTOM_HID_Setup+0xec>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c6d 	.word	0x08005c6d
 8005c40:	08005d45 	.word	0x08005d45
 8005c44:	08005d37 	.word	0x08005d37
 8005c48:	08005d37 	.word	0x08005d37
 8005c4c:	08005d37 	.word	0x08005d37
 8005c50:	08005d37 	.word	0x08005d37
 8005c54:	08005c97 	.word	0x08005c97
 8005c58:	08005d37 	.word	0x08005d37
 8005c5c:	08005d37 	.word	0x08005d37
 8005c60:	08005d37 	.word	0x08005d37
 8005c64:	08005ce5 	.word	0x08005ce5
 8005c68:	08005d0f 	.word	0x08005d0f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d107      	bne.n	8005c88 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c78:	f107 030e 	add.w	r3, r7, #14
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 fa4a 	bl	800711a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c86:	e05e      	b.n	8005d46 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 f9d4 	bl	8007038 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	75fb      	strb	r3, [r7, #23]
          break;
 8005c94:	e057      	b.n	8005d46 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	885b      	ldrh	r3, [r3, #2]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b22      	cmp	r3, #34	; 0x22
 8005ca0:	d10b      	bne.n	8005cba <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	88db      	ldrh	r3, [r3, #6]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	bf28      	it	cs
 8005caa:	2302      	movcs	r3, #2
 8005cac:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	e00d      	b.n	8005cd6 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	885b      	ldrh	r3, [r3, #2]
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b21      	cmp	r3, #33	; 0x21
 8005cc4:	d107      	bne.n	8005cd6 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005cc6:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <USBD_CUSTOM_HID_Setup+0x210>)
 8005cc8:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	88db      	ldrh	r3, [r3, #6]
 8005cce:	2b09      	cmp	r3, #9
 8005cd0:	bf28      	it	cs
 8005cd2:	2309      	movcs	r3, #9
 8005cd4:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005cd6:	8bfb      	ldrh	r3, [r7, #30]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	69b9      	ldr	r1, [r7, #24]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 fa1c 	bl	800711a <USBD_CtlSendData>
          break;
 8005ce2:	e030      	b.n	8005d46 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d107      	bne.n	8005d00 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 fa0e 	bl	800711a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cfe:	e022      	b.n	8005d46 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 f998 	bl	8007038 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	75fb      	strb	r3, [r7, #23]
          break;
 8005d0c:	e01b      	b.n	8005d46 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d106      	bne.n	8005d28 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	885b      	ldrh	r3, [r3, #2]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d26:	e00e      	b.n	8005d46 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 f984 	bl	8007038 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d30:	2303      	movs	r3, #3
 8005d32:	75fb      	strb	r3, [r7, #23]
          break;
 8005d34:	e007      	b.n	8005d46 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 f97d 	bl	8007038 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	75fb      	strb	r3, [r7, #23]
          break;
 8005d42:	e000      	b.n	8005d46 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8005d44:	bf00      	nop
      }
      break;
 8005d46:	e006      	b.n	8005d56 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 f974 	bl	8007038 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	75fb      	strb	r3, [r7, #23]
      break;
 8005d54:	bf00      	nop
  }
  return (uint8_t)ret;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	200000d0 	.word	0x200000d0

08005d64 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e01a      	b.n	8005db6 <USBD_CUSTOM_HID_SendReport+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d86:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d10f      	bne.n	8005db4 <USBD_CUSTOM_HID_SendReport+0x50>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	7d1b      	ldrb	r3, [r3, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <USBD_CUSTOM_HID_SendReport+0x4c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	2181      	movs	r1, #129	; 0x81
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f001 fe0a 	bl	80079c2 <USBD_LL_Transmit>
 8005dae:	e001      	b.n	8005db4 <USBD_CUSTOM_HID_SendReport+0x50>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <USBD_CUSTOM_HID_SendReport+0x52>
    }
  }
  return (uint8_t)USBD_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2229      	movs	r2, #41	; 0x29
 8005dcc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8005dce:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	2000004c 	.word	0x2000004c

08005de0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2229      	movs	r2, #41	; 0x29
 8005dec:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8005dee:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	20000078 	.word	0x20000078

08005e00 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2229      	movs	r2, #41	; 0x29
 8005e0c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005e0e:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	200000a4 	.word	0x200000a4

08005e20 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e32:	2200      	movs	r2, #0
 8005e34:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e00e      	b.n	8005e7c <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e64:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	7810      	ldrb	r0, [r2, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	7852      	ldrb	r2, [r2, #1]
 8005e76:	4611      	mov	r1, r2
 8005e78:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e00a      	b.n	8005eb0 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 fdab 	bl	8007a04 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e011      	b.n	8005ef6 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d10c      	bne.n	8005ef4 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	7810      	ldrb	r0, [r2, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	7852      	ldrb	r2, [r2, #1]
 8005eea:	4611      	mov	r1, r2
 8005eec:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	220a      	movs	r2, #10
 8005f0c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005f0e:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	200000dc 	.word	0x200000dc

08005f20 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e004      	b.n	8005f3e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b086      	sub	sp, #24
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	4613      	mov	r3, r2
 8005f56:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e01f      	b.n	8005fa2 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	79fa      	ldrb	r2, [r7, #7]
 8005f94:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f001 fbde 	bl	8007758 <USBD_LL_Init>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e016      	b.n	8005ff0 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	f107 020e 	add.w	r2, r7, #14
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4798      	blx	r3
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fbf5 	bl	80077f0 <USBD_LL_Start>
 8006006:	4603      	mov	r3, r0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006032:	2303      	movs	r3, #3
 8006034:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	78fa      	ldrb	r2, [r7, #3]
 800604a:	4611      	mov	r1, r2
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	4611      	mov	r1, r2
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
  }

  return USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 ff8f 	bl	8006fc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060b4:	461a      	mov	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d01a      	beq.n	8006100 <USBD_LL_SetupStage+0x72>
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d822      	bhi.n	8006114 <USBD_LL_SetupStage+0x86>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <USBD_LL_SetupStage+0x4a>
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d00a      	beq.n	80060ec <USBD_LL_SetupStage+0x5e>
 80060d6:	e01d      	b.n	8006114 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fa61 	bl	80065a8 <USBD_StdDevReq>
 80060e6:	4603      	mov	r3, r0
 80060e8:	73fb      	strb	r3, [r7, #15]
      break;
 80060ea:	e020      	b.n	800612e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fac5 	bl	8006684 <USBD_StdItfReq>
 80060fa:	4603      	mov	r3, r0
 80060fc:	73fb      	strb	r3, [r7, #15]
      break;
 80060fe:	e016      	b.n	800612e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fb04 	bl	8006716 <USBD_StdEPReq>
 800610e:	4603      	mov	r3, r0
 8006110:	73fb      	strb	r3, [r7, #15]
      break;
 8006112:	e00c      	b.n	800612e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800611a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800611e:	b2db      	uxtb	r3, r3
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fbc4 	bl	80078b0 <USBD_LL_StallEP>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
      break;
 800612c:	bf00      	nop
  }

  return ret;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	460b      	mov	r3, r1
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006146:	7afb      	ldrb	r3, [r7, #11]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d138      	bne.n	80061be <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006152:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800615a:	2b03      	cmp	r3, #3
 800615c:	d14a      	bne.n	80061f4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	429a      	cmp	r2, r3
 8006168:	d913      	bls.n	8006192 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4293      	cmp	r3, r2
 8006182:	bf28      	it	cs
 8006184:	4613      	movcs	r3, r2
 8006186:	461a      	mov	r2, r3
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f001 f80e 	bl	80071ac <USBD_CtlContinueRx>
 8006190:	e030      	b.n	80061f4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b03      	cmp	r3, #3
 800619c:	d10b      	bne.n	80061b6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f001 f809 	bl	80071ce <USBD_CtlSendStatus>
 80061bc:	e01a      	b.n	80061f4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d114      	bne.n	80061f4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00e      	beq.n	80061f4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	7afa      	ldrb	r2, [r7, #11]
 80061e0:	4611      	mov	r1, r2
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	4798      	blx	r3
 80061e6:	4603      	mov	r3, r0
 80061e8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
 80061f2:	e000      	b.n	80061f6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	460b      	mov	r3, r1
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d16b      	bne.n	80062ea <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3314      	adds	r3, #20
 8006216:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800621e:	2b02      	cmp	r3, #2
 8006220:	d156      	bne.n	80062d0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	429a      	cmp	r2, r3
 800622c:	d914      	bls.n	8006258 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	1ad2      	subs	r2, r2, r3
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	461a      	mov	r2, r3
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 ff83 	bl	8007150 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800624a:	2300      	movs	r3, #0
 800624c:	2200      	movs	r2, #0
 800624e:	2100      	movs	r1, #0
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f001 fbd7 	bl	8007a04 <USBD_LL_PrepareReceive>
 8006256:	e03b      	b.n	80062d0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d11c      	bne.n	800629e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800626c:	429a      	cmp	r2, r3
 800626e:	d316      	bcc.n	800629e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800627a:	429a      	cmp	r2, r3
 800627c:	d20f      	bcs.n	800629e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800627e:	2200      	movs	r2, #0
 8006280:	2100      	movs	r1, #0
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 ff64 	bl	8007150 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006290:	2300      	movs	r3, #0
 8006292:	2200      	movs	r2, #0
 8006294:	2100      	movs	r1, #0
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f001 fbb4 	bl	8007a04 <USBD_LL_PrepareReceive>
 800629c:	e018      	b.n	80062d0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d10b      	bne.n	80062c2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062c2:	2180      	movs	r1, #128	; 0x80
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f001 faf3 	bl	80078b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 ff92 	bl	80071f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d122      	bne.n	8006320 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff fe98 	bl	8006010 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062e8:	e01a      	b.n	8006320 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d114      	bne.n	8006320 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00e      	beq.n	8006320 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	7afa      	ldrb	r2, [r7, #11]
 800630c:	4611      	mov	r1, r2
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	4798      	blx	r3
 8006312:	4603      	mov	r3, r0
 8006314:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	e000      	b.n	8006322 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800635a:	2303      	movs	r3, #3
 800635c:	e02f      	b.n	80063be <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00f      	beq.n	8006388 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6852      	ldr	r2, [r2, #4]
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	4611      	mov	r1, r2
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006388:	2340      	movs	r3, #64	; 0x40
 800638a:	2200      	movs	r2, #0
 800638c:	2100      	movs	r1, #0
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 fa49 	bl	8007826 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2240      	movs	r2, #64	; 0x40
 80063a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063a4:	2340      	movs	r3, #64	; 0x40
 80063a6:	2200      	movs	r2, #0
 80063a8:	2180      	movs	r1, #128	; 0x80
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fa3b 	bl	8007826 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2240      	movs	r2, #64	; 0x40
 80063ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2204      	movs	r2, #4
 8006400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b04      	cmp	r3, #4
 8006424:	d106      	bne.n	8006434 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800642c:	b2da      	uxtb	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006454:	2303      	movs	r3, #3
 8006456:	e012      	b.n	800647e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b03      	cmp	r3, #3
 8006462:	d10b      	bne.n	800647c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800649c:	2303      	movs	r3, #3
 800649e:	e014      	b.n	80064ca <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d10d      	bne.n	80064c8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	78fa      	ldrb	r2, [r7, #3]
 80064c2:	4611      	mov	r1, r2
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e014      	b.n	8006516 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d10d      	bne.n	8006514 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	78fa      	ldrb	r2, [r7, #3]
 800650e:	4611      	mov	r1, r2
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6852      	ldr	r2, [r2, #4]
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	4611      	mov	r1, r2
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	4798      	blx	r3
  }

  return USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	3301      	adds	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800658a:	8a3b      	ldrh	r3, [r7, #16]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	b21a      	sxth	r2, r3
 8006590:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006594:	4313      	orrs	r3, r2
 8006596:	b21b      	sxth	r3, r3
 8006598:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800659a:	89fb      	ldrh	r3, [r7, #14]
}
 800659c:	4618      	mov	r0, r3
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d005      	beq.n	80065ce <USBD_StdDevReq+0x26>
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d853      	bhi.n	800666e <USBD_StdDevReq+0xc6>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <USBD_StdDevReq+0x3a>
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d14f      	bne.n	800666e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]
      break;
 80065e0:	e04a      	b.n	8006678 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	2b09      	cmp	r3, #9
 80065e8:	d83b      	bhi.n	8006662 <USBD_StdDevReq+0xba>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <USBD_StdDevReq+0x48>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006645 	.word	0x08006645
 80065f4:	08006659 	.word	0x08006659
 80065f8:	08006663 	.word	0x08006663
 80065fc:	0800664f 	.word	0x0800664f
 8006600:	08006663 	.word	0x08006663
 8006604:	08006623 	.word	0x08006623
 8006608:	08006619 	.word	0x08006619
 800660c:	08006663 	.word	0x08006663
 8006610:	0800663b 	.word	0x0800663b
 8006614:	0800662d 	.word	0x0800662d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f9de 	bl	80069dc <USBD_GetDescriptor>
          break;
 8006620:	e024      	b.n	800666c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fb43 	bl	8006cb0 <USBD_SetAddress>
          break;
 800662a:	e01f      	b.n	800666c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fb82 	bl	8006d38 <USBD_SetConfig>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]
          break;
 8006638:	e018      	b.n	800666c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fc21 	bl	8006e84 <USBD_GetConfig>
          break;
 8006642:	e013      	b.n	800666c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fc52 	bl	8006ef0 <USBD_GetStatus>
          break;
 800664c:	e00e      	b.n	800666c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fc81 	bl	8006f58 <USBD_SetFeature>
          break;
 8006656:	e009      	b.n	800666c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fc90 	bl	8006f80 <USBD_ClrFeature>
          break;
 8006660:	e004      	b.n	800666c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fce7 	bl	8007038 <USBD_CtlError>
          break;
 800666a:	bf00      	nop
      }
      break;
 800666c:	e004      	b.n	8006678 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fce1 	bl	8007038 <USBD_CtlError>
      break;
 8006676:	bf00      	nop
  }

  return ret;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop

08006684 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d005      	beq.n	80066aa <USBD_StdItfReq+0x26>
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d82f      	bhi.n	8006702 <USBD_StdItfReq+0x7e>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <USBD_StdItfReq+0x26>
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d12b      	bne.n	8006702 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d81d      	bhi.n	80066f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	889b      	ldrh	r3, [r3, #4]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d813      	bhi.n	80066ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
 80066d0:	4603      	mov	r3, r0
 80066d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	88db      	ldrh	r3, [r3, #6]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d110      	bne.n	80066fe <USBD_StdItfReq+0x7a>
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10d      	bne.n	80066fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fd73 	bl	80071ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066e8:	e009      	b.n	80066fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fca3 	bl	8007038 <USBD_CtlError>
          break;
 80066f2:	e004      	b.n	80066fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fc9e 	bl	8007038 <USBD_CtlError>
          break;
 80066fc:	e000      	b.n	8006700 <USBD_StdItfReq+0x7c>
          break;
 80066fe:	bf00      	nop
      }
      break;
 8006700:	e004      	b.n	800670c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fc97 	bl	8007038 <USBD_CtlError>
      break;
 800670a:	bf00      	nop
  }

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	889b      	ldrh	r3, [r3, #4]
 8006728:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d007      	beq.n	8006746 <USBD_StdEPReq+0x30>
 8006736:	2b40      	cmp	r3, #64	; 0x40
 8006738:	f200 8145 	bhi.w	80069c6 <USBD_StdEPReq+0x2b0>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <USBD_StdEPReq+0x44>
 8006740:	2b20      	cmp	r3, #32
 8006742:	f040 8140 	bne.w	80069c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
      break;
 8006758:	e13a      	b.n	80069d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	2b03      	cmp	r3, #3
 8006760:	d007      	beq.n	8006772 <USBD_StdEPReq+0x5c>
 8006762:	2b03      	cmp	r3, #3
 8006764:	f300 8129 	bgt.w	80069ba <USBD_StdEPReq+0x2a4>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d07f      	beq.n	800686c <USBD_StdEPReq+0x156>
 800676c:	2b01      	cmp	r3, #1
 800676e:	d03c      	beq.n	80067ea <USBD_StdEPReq+0xd4>
 8006770:	e123      	b.n	80069ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d002      	beq.n	8006784 <USBD_StdEPReq+0x6e>
 800677e:	2b03      	cmp	r3, #3
 8006780:	d016      	beq.n	80067b0 <USBD_StdEPReq+0x9a>
 8006782:	e02c      	b.n	80067de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00d      	beq.n	80067a6 <USBD_StdEPReq+0x90>
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	2b80      	cmp	r3, #128	; 0x80
 800678e:	d00a      	beq.n	80067a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 f88b 	bl	80078b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800679a:	2180      	movs	r1, #128	; 0x80
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 f887 	bl	80078b0 <USBD_LL_StallEP>
 80067a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067a4:	e020      	b.n	80067e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fc45 	bl	8007038 <USBD_CtlError>
              break;
 80067ae:	e01b      	b.n	80067e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	885b      	ldrh	r3, [r3, #2]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10e      	bne.n	80067d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00b      	beq.n	80067d6 <USBD_StdEPReq+0xc0>
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d008      	beq.n	80067d6 <USBD_StdEPReq+0xc0>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	88db      	ldrh	r3, [r3, #6]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 f86d 	bl	80078b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fcf9 	bl	80071ce <USBD_CtlSendStatus>

              break;
 80067dc:	e004      	b.n	80067e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fc29 	bl	8007038 <USBD_CtlError>
              break;
 80067e6:	bf00      	nop
          }
          break;
 80067e8:	e0ec      	b.n	80069c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d002      	beq.n	80067fc <USBD_StdEPReq+0xe6>
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d016      	beq.n	8006828 <USBD_StdEPReq+0x112>
 80067fa:	e030      	b.n	800685e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00d      	beq.n	800681e <USBD_StdEPReq+0x108>
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	d00a      	beq.n	800681e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 f84f 	bl	80078b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006812:	2180      	movs	r1, #128	; 0x80
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 f84b 	bl	80078b0 <USBD_LL_StallEP>
 800681a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800681c:	e025      	b.n	800686a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fc09 	bl	8007038 <USBD_CtlError>
              break;
 8006826:	e020      	b.n	800686a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	885b      	ldrh	r3, [r3, #2]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11b      	bne.n	8006868 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 f855 	bl	80078ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fcc2 	bl	80071ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800685c:	e004      	b.n	8006868 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fbe9 	bl	8007038 <USBD_CtlError>
              break;
 8006866:	e000      	b.n	800686a <USBD_StdEPReq+0x154>
              break;
 8006868:	bf00      	nop
          }
          break;
 800686a:	e0ab      	b.n	80069c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d002      	beq.n	800687e <USBD_StdEPReq+0x168>
 8006878:	2b03      	cmp	r3, #3
 800687a:	d032      	beq.n	80068e2 <USBD_StdEPReq+0x1cc>
 800687c:	e097      	b.n	80069ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <USBD_StdEPReq+0x17e>
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	2b80      	cmp	r3, #128	; 0x80
 8006888:	d004      	beq.n	8006894 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fbd3 	bl	8007038 <USBD_CtlError>
                break;
 8006892:	e091      	b.n	80069b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006898:	2b00      	cmp	r3, #0
 800689a:	da0b      	bge.n	80068b4 <USBD_StdEPReq+0x19e>
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	3310      	adds	r3, #16
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	4413      	add	r3, r2
 80068b0:	3304      	adds	r3, #4
 80068b2:	e00b      	b.n	80068cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	3304      	adds	r3, #4
 80068cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2202      	movs	r2, #2
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fc1d 	bl	800711a <USBD_CtlSendData>
              break;
 80068e0:	e06a      	b.n	80069b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da11      	bge.n	800690e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	f003 020f 	and.w	r2, r3, #15
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	3324      	adds	r3, #36	; 0x24
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d117      	bne.n	8006934 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fb96 	bl	8007038 <USBD_CtlError>
                  break;
 800690c:	e054      	b.n	80069b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	f003 020f 	and.w	r2, r3, #15
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d104      	bne.n	8006934 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fb83 	bl	8007038 <USBD_CtlError>
                  break;
 8006932:	e041      	b.n	80069b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006938:	2b00      	cmp	r3, #0
 800693a:	da0b      	bge.n	8006954 <USBD_StdEPReq+0x23e>
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	3310      	adds	r3, #16
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	3304      	adds	r3, #4
 8006952:	e00b      	b.n	800696c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	4413      	add	r3, r2
 800696a:	3304      	adds	r3, #4
 800696c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <USBD_StdEPReq+0x264>
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	2b80      	cmp	r3, #128	; 0x80
 8006978:	d103      	bne.n	8006982 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	e00e      	b.n	80069a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 ffd0 	bl	800792c <USBD_LL_IsStallEP>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	e002      	b.n	80069a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2202      	movs	r2, #2
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fbb7 	bl	800711a <USBD_CtlSendData>
              break;
 80069ac:	e004      	b.n	80069b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fb41 	bl	8007038 <USBD_CtlError>
              break;
 80069b6:	bf00      	nop
          }
          break;
 80069b8:	e004      	b.n	80069c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fb3b 	bl	8007038 <USBD_CtlError>
          break;
 80069c2:	bf00      	nop
      }
      break;
 80069c4:	e004      	b.n	80069d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fb35 	bl	8007038 <USBD_CtlError>
      break;
 80069ce:	bf00      	nop
  }

  return ret;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	885b      	ldrh	r3, [r3, #2]
 80069f6:	0a1b      	lsrs	r3, r3, #8
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	2b06      	cmp	r3, #6
 80069fe:	f200 8128 	bhi.w	8006c52 <USBD_GetDescriptor+0x276>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <USBD_GetDescriptor+0x2c>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a25 	.word	0x08006a25
 8006a0c:	08006a3d 	.word	0x08006a3d
 8006a10:	08006a7d 	.word	0x08006a7d
 8006a14:	08006c53 	.word	0x08006c53
 8006a18:	08006c53 	.word	0x08006c53
 8006a1c:	08006bf3 	.word	0x08006bf3
 8006a20:	08006c1f 	.word	0x08006c1f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	7c12      	ldrb	r2, [r2, #16]
 8006a30:	f107 0108 	add.w	r1, r7, #8
 8006a34:	4610      	mov	r0, r2
 8006a36:	4798      	blx	r3
 8006a38:	60f8      	str	r0, [r7, #12]
      break;
 8006a3a:	e112      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	7c1b      	ldrb	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10d      	bne.n	8006a60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	f107 0208 	add.w	r2, r7, #8
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
 8006a54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a5e:	e100      	b.n	8006c62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	f107 0208 	add.w	r2, r7, #8
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	2202      	movs	r2, #2
 8006a78:	701a      	strb	r2, [r3, #0]
      break;
 8006a7a:	e0f2      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b05      	cmp	r3, #5
 8006a84:	f200 80ac 	bhi.w	8006be0 <USBD_GetDescriptor+0x204>
 8006a88:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <USBD_GetDescriptor+0xb4>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006aa9 	.word	0x08006aa9
 8006a94:	08006add 	.word	0x08006add
 8006a98:	08006b11 	.word	0x08006b11
 8006a9c:	08006b45 	.word	0x08006b45
 8006aa0:	08006b79 	.word	0x08006b79
 8006aa4:	08006bad 	.word	0x08006bad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	7c12      	ldrb	r2, [r2, #16]
 8006ac0:	f107 0108 	add.w	r1, r7, #8
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4798      	blx	r3
 8006ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aca:	e091      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fab2 	bl	8007038 <USBD_CtlError>
            err++;
 8006ad4:	7afb      	ldrb	r3, [r7, #11]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8006ada:	e089      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	f107 0108 	add.w	r1, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006afe:	e077      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa98 	bl	8007038 <USBD_CtlError>
            err++;
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b0e:	e06f      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	7c12      	ldrb	r2, [r2, #16]
 8006b28:	f107 0108 	add.w	r1, r7, #8
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
 8006b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b32:	e05d      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa7e 	bl	8007038 <USBD_CtlError>
            err++;
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	72fb      	strb	r3, [r7, #11]
          break;
 8006b42:	e055      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00b      	beq.n	8006b68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	7c12      	ldrb	r2, [r2, #16]
 8006b5c:	f107 0108 	add.w	r1, r7, #8
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
 8006b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b66:	e043      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa64 	bl	8007038 <USBD_CtlError>
            err++;
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	3301      	adds	r3, #1
 8006b74:	72fb      	strb	r3, [r7, #11]
          break;
 8006b76:	e03b      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	7c12      	ldrb	r2, [r2, #16]
 8006b90:	f107 0108 	add.w	r1, r7, #8
 8006b94:	4610      	mov	r0, r2
 8006b96:	4798      	blx	r3
 8006b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b9a:	e029      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa4a 	bl	8007038 <USBD_CtlError>
            err++;
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8006baa:	e021      	b.n	8006bf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7c12      	ldrb	r2, [r2, #16]
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4798      	blx	r3
 8006bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bce:	e00f      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa30 	bl	8007038 <USBD_CtlError>
            err++;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bde:	e007      	b.n	8006bf0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa28 	bl	8007038 <USBD_CtlError>
          err++;
 8006be8:	7afb      	ldrb	r3, [r7, #11]
 8006bea:	3301      	adds	r3, #1
 8006bec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006bee:	bf00      	nop
      }
      break;
 8006bf0:	e037      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7c1b      	ldrb	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c02:	f107 0208 	add.w	r2, r7, #8
 8006c06:	4610      	mov	r0, r2
 8006c08:	4798      	blx	r3
 8006c0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c0c:	e029      	b.n	8006c62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa11 	bl	8007038 <USBD_CtlError>
        err++;
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c1c:	e021      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	7c1b      	ldrb	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10d      	bne.n	8006c42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	f107 0208 	add.w	r2, r7, #8
 8006c32:	4610      	mov	r0, r2
 8006c34:	4798      	blx	r3
 8006c36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	2207      	movs	r2, #7
 8006c3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c40:	e00f      	b.n	8006c62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f9f7 	bl	8007038 <USBD_CtlError>
        err++;
 8006c4a:	7afb      	ldrb	r3, [r7, #11]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c50:	e007      	b.n	8006c62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f9ef 	bl	8007038 <USBD_CtlError>
      err++;
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c60:	bf00      	nop
  }

  if (err != 0U)
 8006c62:	7afb      	ldrb	r3, [r7, #11]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11e      	bne.n	8006ca6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	88db      	ldrh	r3, [r3, #6]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d016      	beq.n	8006c9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c70:	893b      	ldrh	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00e      	beq.n	8006c94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	88da      	ldrh	r2, [r3, #6]
 8006c7a:	893b      	ldrh	r3, [r7, #8]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	bf28      	it	cs
 8006c80:	4613      	movcs	r3, r2
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa44 	bl	800711a <USBD_CtlSendData>
 8006c92:	e009      	b.n	8006ca8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9ce 	bl	8007038 <USBD_CtlError>
 8006c9c:	e004      	b.n	8006ca8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fa95 	bl	80071ce <USBD_CtlSendStatus>
 8006ca4:	e000      	b.n	8006ca8 <USBD_GetDescriptor+0x2cc>
    return;
 8006ca6:	bf00      	nop
  }
}
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop

08006cb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	889b      	ldrh	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d131      	bne.n	8006d26 <USBD_SetAddress+0x76>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	88db      	ldrh	r3, [r3, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d12d      	bne.n	8006d26 <USBD_SetAddress+0x76>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	885b      	ldrh	r3, [r3, #2]
 8006cce:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd0:	d829      	bhi.n	8006d26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d104      	bne.n	8006cf4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f9a3 	bl	8007038 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf2:	e01d      	b.n	8006d30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	7bfa      	ldrb	r2, [r7, #15]
 8006cf8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fe3f 	bl	8007984 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa61 	bl	80071ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1a:	e009      	b.n	8006d30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d24:	e004      	b.n	8006d30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f985 	bl	8007038 <USBD_CtlError>
  }
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	885b      	ldrh	r3, [r3, #2]
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	4b4c      	ldr	r3, [pc, #304]	; (8006e80 <USBD_SetConfig+0x148>)
 8006d4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d50:	4b4b      	ldr	r3, [pc, #300]	; (8006e80 <USBD_SetConfig+0x148>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d905      	bls.n	8006d64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f96c 	bl	8007038 <USBD_CtlError>
    return USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e088      	b.n	8006e76 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d002      	beq.n	8006d76 <USBD_SetConfig+0x3e>
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d025      	beq.n	8006dc0 <USBD_SetConfig+0x88>
 8006d74:	e071      	b.n	8006e5a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d76:	4b42      	ldr	r3, [pc, #264]	; (8006e80 <USBD_SetConfig+0x148>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01c      	beq.n	8006db8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006d7e:	4b40      	ldr	r3, [pc, #256]	; (8006e80 <USBD_SetConfig+0x148>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d88:	4b3d      	ldr	r3, [pc, #244]	; (8006e80 <USBD_SetConfig+0x148>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff f949 	bl	8006026 <USBD_SetClassConfig>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f949 	bl	8007038 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006da6:	e065      	b.n	8006e74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fa10 	bl	80071ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2203      	movs	r2, #3
 8006db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006db6:	e05d      	b.n	8006e74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fa08 	bl	80071ce <USBD_CtlSendStatus>
      break;
 8006dbe:	e059      	b.n	8006e74 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006dc0:	4b2f      	ldr	r3, [pc, #188]	; (8006e80 <USBD_SetConfig+0x148>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d112      	bne.n	8006dee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006dd0:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <USBD_SetConfig+0x148>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dda:	4b29      	ldr	r3, [pc, #164]	; (8006e80 <USBD_SetConfig+0x148>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff f93c 	bl	800605e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f9f1 	bl	80071ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006dec:	e042      	b.n	8006e74 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006dee:	4b24      	ldr	r3, [pc, #144]	; (8006e80 <USBD_SetConfig+0x148>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d02a      	beq.n	8006e52 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff f92a 	bl	800605e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e0a:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <USBD_SetConfig+0x148>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e14:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <USBD_SetConfig+0x148>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff f903 	bl	8006026 <USBD_SetClassConfig>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00f      	beq.n	8006e4a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f903 	bl	8007038 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff f90f 	bl	800605e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e48:	e014      	b.n	8006e74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f9bf 	bl	80071ce <USBD_CtlSendStatus>
      break;
 8006e50:	e010      	b.n	8006e74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9bb 	bl	80071ce <USBD_CtlSendStatus>
      break;
 8006e58:	e00c      	b.n	8006e74 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f8eb 	bl	8007038 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e62:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <USBD_SetConfig+0x148>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff f8f8 	bl	800605e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	73fb      	strb	r3, [r7, #15]
      break;
 8006e72:	bf00      	nop
  }

  return ret;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000177 	.word	0x20000177

08006e84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	88db      	ldrh	r3, [r3, #6]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d004      	beq.n	8006ea0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f8cd 	bl	8007038 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e9e:	e023      	b.n	8006ee8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	dc02      	bgt.n	8006eb2 <USBD_GetConfig+0x2e>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dc03      	bgt.n	8006eb8 <USBD_GetConfig+0x34>
 8006eb0:	e015      	b.n	8006ede <USBD_GetConfig+0x5a>
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d00b      	beq.n	8006ece <USBD_GetConfig+0x4a>
 8006eb6:	e012      	b.n	8006ede <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f927 	bl	800711a <USBD_CtlSendData>
        break;
 8006ecc:	e00c      	b.n	8006ee8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f91f 	bl	800711a <USBD_CtlSendData>
        break;
 8006edc:	e004      	b.n	8006ee8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f8a9 	bl	8007038 <USBD_CtlError>
        break;
 8006ee6:	bf00      	nop
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d81e      	bhi.n	8006f46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	88db      	ldrh	r3, [r3, #6]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d004      	beq.n	8006f1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f890 	bl	8007038 <USBD_CtlError>
        break;
 8006f18:	e01a      	b.n	8006f50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f043 0202 	orr.w	r2, r3, #2
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f8eb 	bl	800711a <USBD_CtlSendData>
      break;
 8006f44:	e004      	b.n	8006f50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f875 	bl	8007038 <USBD_CtlError>
      break;
 8006f4e:	bf00      	nop
  }
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	885b      	ldrh	r3, [r3, #2]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d106      	bne.n	8006f78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f92b 	bl	80071ce <USBD_CtlSendStatus>
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d80b      	bhi.n	8006fb0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	885b      	ldrh	r3, [r3, #2]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d10c      	bne.n	8006fba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f910 	bl	80071ce <USBD_CtlSendStatus>
      }
      break;
 8006fae:	e004      	b.n	8006fba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f840 	bl	8007038 <USBD_CtlError>
      break;
 8006fb8:	e000      	b.n	8006fbc <USBD_ClrFeature+0x3c>
      break;
 8006fba:	bf00      	nop
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	781a      	ldrb	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3301      	adds	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7ff fabc 	bl	800656c <SWAPBYTE>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3301      	adds	r3, #1
 8007006:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff faaf 	bl	800656c <SWAPBYTE>
 800700e:	4603      	mov	r3, r0
 8007010:	461a      	mov	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff faa2 	bl	800656c <SWAPBYTE>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	80da      	strh	r2, [r3, #6]
}
 8007030:	bf00      	nop
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007042:	2180      	movs	r1, #128	; 0x80
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fc33 	bl	80078b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800704a:	2100      	movs	r1, #0
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fc2f 	bl	80078b0 <USBD_LL_StallEP>
}
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d036      	beq.n	80070de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007074:	6938      	ldr	r0, [r7, #16]
 8007076:	f000 f836 	bl	80070e6 <USBD_GetLen>
 800707a:	4603      	mov	r3, r0
 800707c:	3301      	adds	r3, #1
 800707e:	b29b      	uxth	r3, r3
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	4413      	add	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	701a      	strb	r2, [r3, #0]
  idx++;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	3301      	adds	r3, #1
 8007098:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	4413      	add	r3, r2
 80070a0:	2203      	movs	r2, #3
 80070a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	3301      	adds	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070aa:	e013      	b.n	80070d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4413      	add	r3, r2
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	7812      	ldrb	r2, [r2, #0]
 80070b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	3301      	adds	r3, #1
 80070bc:	613b      	str	r3, [r7, #16]
    idx++;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	3301      	adds	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	4413      	add	r3, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	3301      	adds	r3, #1
 80070d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e7      	bne.n	80070ac <USBD_GetString+0x52>
 80070dc:	e000      	b.n	80070e0 <USBD_GetString+0x86>
    return;
 80070de:	bf00      	nop
  }
}
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070f6:	e005      	b.n	8007104 <USBD_GetLen+0x1e>
  {
    len++;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	3301      	adds	r3, #1
 80070fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	3301      	adds	r3, #1
 8007102:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1f5      	bne.n	80070f8 <USBD_GetLen+0x12>
  }

  return len;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2202      	movs	r2, #2
 800712a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	2100      	movs	r1, #0
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f000 fc3e 	bl	80079c2 <USBD_LL_Transmit>

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	2100      	movs	r1, #0
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fc2d 	bl	80079c2 <USBD_LL_Transmit>

  return USBD_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2203      	movs	r2, #3
 8007182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	2100      	movs	r1, #0
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 fc31 	bl	8007a04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	2100      	movs	r1, #0
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fc20 	bl	8007a04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2204      	movs	r2, #4
 80071da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071de:	2300      	movs	r3, #0
 80071e0:	2200      	movs	r2, #0
 80071e2:	2100      	movs	r1, #0
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fbec 	bl	80079c2 <USBD_LL_Transmit>

  return USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2205      	movs	r2, #5
 8007200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007204:	2300      	movs	r3, #0
 8007206:	2200      	movs	r2, #0
 8007208:	2100      	movs	r1, #0
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fbfa 	bl	8007a04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007220:	2200      	movs	r2, #0
 8007222:	4912      	ldr	r1, [pc, #72]	; (800726c <MX_USB_DEVICE_Init+0x50>)
 8007224:	4812      	ldr	r0, [pc, #72]	; (8007270 <MX_USB_DEVICE_Init+0x54>)
 8007226:	f7fe fe90 	bl	8005f4a <USBD_Init>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007230:	f7fa fc70 	bl	8001b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007234:	490f      	ldr	r1, [pc, #60]	; (8007274 <MX_USB_DEVICE_Init+0x58>)
 8007236:	480e      	ldr	r0, [pc, #56]	; (8007270 <MX_USB_DEVICE_Init+0x54>)
 8007238:	f7fe feb7 	bl	8005faa <USBD_RegisterClass>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007242:	f7fa fc67 	bl	8001b14 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007246:	490c      	ldr	r1, [pc, #48]	; (8007278 <MX_USB_DEVICE_Init+0x5c>)
 8007248:	4809      	ldr	r0, [pc, #36]	; (8007270 <MX_USB_DEVICE_Init+0x54>)
 800724a:	f7fe fe69 	bl	8005f20 <USBD_CUSTOM_HID_RegisterInterface>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007254:	f7fa fc5e 	bl	8001b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007258:	4805      	ldr	r0, [pc, #20]	; (8007270 <MX_USB_DEVICE_Init+0x54>)
 800725a:	f7fe fecd 	bl	8005ff8 <USBD_Start>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007264:	f7fa fc56 	bl	8001b14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007268:	bf00      	nop
 800726a:	bd80      	pop	{r7, pc}
 800726c:	200000fc 	.word	0x200000fc
 8007270:	200001ec 	.word	0x200001ec
 8007274:	20000014 	.word	0x20000014
 8007278:	200000ec 	.word	0x200000ec

0800727c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007280:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007282:	4618      	mov	r0, r3
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007290:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007292:	4618      	mov	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	460a      	mov	r2, r1
 80072a6:	71fb      	strb	r3, [r7, #7]
 80072a8:	4613      	mov	r3, r2
 80072aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80072ac:	4803      	ldr	r0, [pc, #12]	; (80072bc <CUSTOM_HID_OutEvent_FS+0x20>)
 80072ae:	f7fe fde9 	bl	8005e84 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80072b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	200001ec 	.word	0x200001ec

080072c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2212      	movs	r2, #18
 80072d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072d2:	4b03      	ldr	r3, [pc, #12]	; (80072e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20000118 	.word	0x20000118

080072e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2204      	movs	r2, #4
 80072f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072f6:	4b03      	ldr	r3, [pc, #12]	; (8007304 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	2000012c 	.word	0x2000012c

08007308 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	6039      	str	r1, [r7, #0]
 8007312:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4907      	ldr	r1, [pc, #28]	; (800733c <USBD_FS_ProductStrDescriptor+0x34>)
 800731e:	4808      	ldr	r0, [pc, #32]	; (8007340 <USBD_FS_ProductStrDescriptor+0x38>)
 8007320:	f7ff fe9b 	bl	800705a <USBD_GetString>
 8007324:	e004      	b.n	8007330 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	4904      	ldr	r1, [pc, #16]	; (800733c <USBD_FS_ProductStrDescriptor+0x34>)
 800732a:	4805      	ldr	r0, [pc, #20]	; (8007340 <USBD_FS_ProductStrDescriptor+0x38>)
 800732c:	f7ff fe95 	bl	800705a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	200004bc 	.word	0x200004bc
 8007340:	08007b40 	.word	0x08007b40

08007344 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	4904      	ldr	r1, [pc, #16]	; (8007364 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007354:	4804      	ldr	r0, [pc, #16]	; (8007368 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007356:	f7ff fe80 	bl	800705a <USBD_GetString>
  return USBD_StrDesc;
 800735a:	4b02      	ldr	r3, [pc, #8]	; (8007364 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	200004bc 	.word	0x200004bc
 8007368:	08007b4c 	.word	0x08007b4c

0800736c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	6039      	str	r1, [r7, #0]
 8007376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	221a      	movs	r2, #26
 800737c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800737e:	f000 f843 	bl	8007408 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007382:	4b02      	ldr	r3, [pc, #8]	; (800738c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20000130 	.word	0x20000130

08007390 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	4603      	mov	r3, r0
 8007398:	6039      	str	r1, [r7, #0]
 800739a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d105      	bne.n	80073ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	4907      	ldr	r1, [pc, #28]	; (80073c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073a6:	4808      	ldr	r0, [pc, #32]	; (80073c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073a8:	f7ff fe57 	bl	800705a <USBD_GetString>
 80073ac:	e004      	b.n	80073b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	4904      	ldr	r1, [pc, #16]	; (80073c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073b2:	4805      	ldr	r0, [pc, #20]	; (80073c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073b4:	f7ff fe51 	bl	800705a <USBD_GetString>
  }
  return USBD_StrDesc;
 80073b8:	4b02      	ldr	r3, [pc, #8]	; (80073c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	200004bc 	.word	0x200004bc
 80073c8:	08007b5c 	.word	0x08007b5c

080073cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	6039      	str	r1, [r7, #0]
 80073d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d105      	bne.n	80073ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	4907      	ldr	r1, [pc, #28]	; (8007400 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073e2:	4808      	ldr	r0, [pc, #32]	; (8007404 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073e4:	f7ff fe39 	bl	800705a <USBD_GetString>
 80073e8:	e004      	b.n	80073f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	4904      	ldr	r1, [pc, #16]	; (8007400 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073ee:	4805      	ldr	r0, [pc, #20]	; (8007404 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073f0:	f7ff fe33 	bl	800705a <USBD_GetString>
  }
  return USBD_StrDesc;
 80073f4:	4b02      	ldr	r3, [pc, #8]	; (8007400 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	200004bc 	.word	0x200004bc
 8007404:	08007b70 	.word	0x08007b70

08007408 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800740e:	4b0f      	ldr	r3, [pc, #60]	; (800744c <Get_SerialNum+0x44>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007414:	4b0e      	ldr	r3, [pc, #56]	; (8007450 <Get_SerialNum+0x48>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800741a:	4b0e      	ldr	r3, [pc, #56]	; (8007454 <Get_SerialNum+0x4c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4413      	add	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d009      	beq.n	8007442 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800742e:	2208      	movs	r2, #8
 8007430:	4909      	ldr	r1, [pc, #36]	; (8007458 <Get_SerialNum+0x50>)
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 f814 	bl	8007460 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007438:	2204      	movs	r2, #4
 800743a:	4908      	ldr	r1, [pc, #32]	; (800745c <Get_SerialNum+0x54>)
 800743c:	68b8      	ldr	r0, [r7, #8]
 800743e:	f000 f80f 	bl	8007460 <IntToUnicode>
  }
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	1fff7a10 	.word	0x1fff7a10
 8007450:	1fff7a14 	.word	0x1fff7a14
 8007454:	1fff7a18 	.word	0x1fff7a18
 8007458:	20000132 	.word	0x20000132
 800745c:	20000142 	.word	0x20000142

08007460 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]
 8007476:	e027      	b.n	80074c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	0f1b      	lsrs	r3, r3, #28
 800747c:	2b09      	cmp	r3, #9
 800747e:	d80b      	bhi.n	8007498 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	0f1b      	lsrs	r3, r3, #28
 8007484:	b2da      	uxtb	r2, r3
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	4619      	mov	r1, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	440b      	add	r3, r1
 8007490:	3230      	adds	r2, #48	; 0x30
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e00a      	b.n	80074ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	0f1b      	lsrs	r3, r3, #28
 800749c:	b2da      	uxtb	r2, r3
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4619      	mov	r1, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	440b      	add	r3, r1
 80074a8:	3237      	adds	r2, #55	; 0x37
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	3301      	adds	r3, #1
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	3301      	adds	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
 80074c8:	7dfa      	ldrb	r2, [r7, #23]
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d3d3      	bcc.n	8007478 <IntToUnicode+0x18>
  }
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074e8:	f107 0314 	add.w	r3, r7, #20
 80074ec:	2200      	movs	r2, #0
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	609a      	str	r2, [r3, #8]
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007500:	d13a      	bne.n	8007578 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007502:	2300      	movs	r3, #0
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	4b1e      	ldr	r3, [pc, #120]	; (8007580 <HAL_PCD_MspInit+0xa0>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <HAL_PCD_MspInit+0xa0>)
 800750c:	f043 0301 	orr.w	r3, r3, #1
 8007510:	6313      	str	r3, [r2, #48]	; 0x30
 8007512:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <HAL_PCD_MspInit+0xa0>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800751e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007524:	2302      	movs	r3, #2
 8007526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007528:	2300      	movs	r3, #0
 800752a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800752c:	2303      	movs	r3, #3
 800752e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007530:	230a      	movs	r3, #10
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007534:	f107 0314 	add.w	r3, r7, #20
 8007538:	4619      	mov	r1, r3
 800753a:	4812      	ldr	r0, [pc, #72]	; (8007584 <HAL_PCD_MspInit+0xa4>)
 800753c:	f7fa fd80 	bl	8002040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007540:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <HAL_PCD_MspInit+0xa0>)
 8007542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007544:	4a0e      	ldr	r2, [pc, #56]	; (8007580 <HAL_PCD_MspInit+0xa0>)
 8007546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754a:	6353      	str	r3, [r2, #52]	; 0x34
 800754c:	2300      	movs	r3, #0
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <HAL_PCD_MspInit+0xa0>)
 8007552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007554:	4a0a      	ldr	r2, [pc, #40]	; (8007580 <HAL_PCD_MspInit+0xa0>)
 8007556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800755a:	6453      	str	r3, [r2, #68]	; 0x44
 800755c:	4b08      	ldr	r3, [pc, #32]	; (8007580 <HAL_PCD_MspInit+0xa0>)
 800755e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007568:	2200      	movs	r2, #0
 800756a:	2100      	movs	r1, #0
 800756c:	2043      	movs	r0, #67	; 0x43
 800756e:	f7fa fd30 	bl	8001fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007572:	2043      	movs	r0, #67	; 0x43
 8007574:	f7fa fd49 	bl	800200a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007578:	bf00      	nop
 800757a:	3728      	adds	r7, #40	; 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40023800 	.word	0x40023800
 8007584:	40020000 	.word	0x40020000

08007588 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7fe fd75 	bl	800608e <USBD_LL_SetupStage>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80075be:	78fa      	ldrb	r2, [r7, #3]
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	440b      	add	r3, r1
 80075cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	4619      	mov	r1, r3
 80075d6:	f7fe fdaf 	bl	8006138 <USBD_LL_DataOutStage>
}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	3348      	adds	r3, #72	; 0x48
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	4619      	mov	r1, r3
 800760a:	f7fe fdf8 	bl	80061fe <USBD_LL_DataInStage>
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007624:	4618      	mov	r0, r3
 8007626:	f7fe ff0c 	bl	8006442 <USBD_LL_SOF>
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800763a:	2301      	movs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d001      	beq.n	800764a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007646:	f7fa fa65 	bl	8001b14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007650:	7bfa      	ldrb	r2, [r7, #15]
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe feb6 	bl	80063c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fe62 	bl	800632a <USBD_LL_Reset>
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe feb1 	bl	80063e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007696:	f043 0301 	orr.w	r3, r3, #1
 800769a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076a4:	4b04      	ldr	r3, [pc, #16]	; (80076b8 <HAL_PCD_SuspendCallback+0x48>)
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	4a03      	ldr	r2, [pc, #12]	; (80076b8 <HAL_PCD_SuspendCallback+0x48>)
 80076aa:	f043 0306 	orr.w	r3, r3, #6
 80076ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	e000ed00 	.word	0xe000ed00

080076bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fea1 	bl	8006412 <USBD_LL_Resume>
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076ea:	78fa      	ldrb	r2, [r7, #3]
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe feef 	bl	80064d2 <USBD_LL_IsoOUTIncomplete>
}
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800770e:	78fa      	ldrb	r2, [r7, #3]
 8007710:	4611      	mov	r1, r2
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe feb7 	bl	8006486 <USBD_LL_IsoINIncomplete>
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fef5 	bl	800651e <USBD_LL_DevConnected>
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fef2 	bl	8006534 <USBD_LL_DevDisconnected>
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d13c      	bne.n	80077e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007768:	4a20      	ldr	r2, [pc, #128]	; (80077ec <USBD_LL_Init+0x94>)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a1e      	ldr	r2, [pc, #120]	; (80077ec <USBD_LL_Init+0x94>)
 8007774:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007778:	4b1c      	ldr	r3, [pc, #112]	; (80077ec <USBD_LL_Init+0x94>)
 800777a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800777e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007780:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <USBD_LL_Init+0x94>)
 8007782:	2204      	movs	r2, #4
 8007784:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007786:	4b19      	ldr	r3, [pc, #100]	; (80077ec <USBD_LL_Init+0x94>)
 8007788:	2202      	movs	r2, #2
 800778a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800778c:	4b17      	ldr	r3, [pc, #92]	; (80077ec <USBD_LL_Init+0x94>)
 800778e:	2200      	movs	r2, #0
 8007790:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007792:	4b16      	ldr	r3, [pc, #88]	; (80077ec <USBD_LL_Init+0x94>)
 8007794:	2202      	movs	r2, #2
 8007796:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007798:	4b14      	ldr	r3, [pc, #80]	; (80077ec <USBD_LL_Init+0x94>)
 800779a:	2200      	movs	r2, #0
 800779c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800779e:	4b13      	ldr	r3, [pc, #76]	; (80077ec <USBD_LL_Init+0x94>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80077a4:	4b11      	ldr	r3, [pc, #68]	; (80077ec <USBD_LL_Init+0x94>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <USBD_LL_Init+0x94>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80077b0:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <USBD_LL_Init+0x94>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077b6:	480d      	ldr	r0, [pc, #52]	; (80077ec <USBD_LL_Init+0x94>)
 80077b8:	f7fa fdf8 	bl	80023ac <HAL_PCD_Init>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80077c2:	f7fa f9a7 	bl	8001b14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077c6:	2180      	movs	r1, #128	; 0x80
 80077c8:	4808      	ldr	r0, [pc, #32]	; (80077ec <USBD_LL_Init+0x94>)
 80077ca:	f7fb ff3e 	bl	800364a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077ce:	2240      	movs	r2, #64	; 0x40
 80077d0:	2100      	movs	r1, #0
 80077d2:	4806      	ldr	r0, [pc, #24]	; (80077ec <USBD_LL_Init+0x94>)
 80077d4:	f7fb fef2 	bl	80035bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077d8:	2280      	movs	r2, #128	; 0x80
 80077da:	2101      	movs	r1, #1
 80077dc:	4803      	ldr	r0, [pc, #12]	; (80077ec <USBD_LL_Init+0x94>)
 80077de:	f7fb feed 	bl	80035bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	200006bc 	.word	0x200006bc

080077f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007806:	4618      	mov	r0, r3
 8007808:	f7fa feed 	bl	80025e6 <HAL_PCD_Start>
 800780c:	4603      	mov	r3, r0
 800780e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f930 	bl	8007a78 <USBD_Get_USB_Status>
 8007818:	4603      	mov	r3, r0
 800781a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800781c:	7bbb      	ldrb	r3, [r7, #14]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	4608      	mov	r0, r1
 8007830:	4611      	mov	r1, r2
 8007832:	461a      	mov	r2, r3
 8007834:	4603      	mov	r3, r0
 8007836:	70fb      	strb	r3, [r7, #3]
 8007838:	460b      	mov	r3, r1
 800783a:	70bb      	strb	r3, [r7, #2]
 800783c:	4613      	mov	r3, r2
 800783e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800784e:	78bb      	ldrb	r3, [r7, #2]
 8007850:	883a      	ldrh	r2, [r7, #0]
 8007852:	78f9      	ldrb	r1, [r7, #3]
 8007854:	f7fb fad1 	bl	8002dfa <HAL_PCD_EP_Open>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	4618      	mov	r0, r3
 8007860:	f000 f90a 	bl	8007a78 <USBD_Get_USB_Status>
 8007864:	4603      	mov	r3, r0
 8007866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007868:	7bbb      	ldrb	r3, [r7, #14]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800788c:	78fa      	ldrb	r2, [r7, #3]
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f7fb fb1a 	bl	8002eca <HAL_PCD_EP_Close>
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 f8eb 	bl	8007a78 <USBD_Get_USB_Status>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	4611      	mov	r1, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fb fbda 	bl	8003088 <HAL_PCD_EP_SetStall>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f8cc 	bl	8007a78 <USBD_Get_USB_Status>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f7fb fc1f 	bl	8003150 <HAL_PCD_EP_ClrStall>
 8007912:	4603      	mov	r3, r0
 8007914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f8ad 	bl	8007a78 <USBD_Get_USB_Status>
 800791e:	4603      	mov	r3, r0
 8007920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007922:	7bbb      	ldrb	r3, [r7, #14]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800793e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007944:	2b00      	cmp	r3, #0
 8007946:	da0b      	bge.n	8007960 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800794e:	68f9      	ldr	r1, [r7, #12]
 8007950:	4613      	mov	r3, r2
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	333e      	adds	r3, #62	; 0x3e
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	e00b      	b.n	8007978 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	4613      	mov	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	1a9b      	subs	r3, r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007976:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fb fa04 	bl	8002db0 <HAL_PCD_SetAddress>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f862 	bl	8007a78 <USBD_Get_USB_Status>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b086      	sub	sp, #24
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	460b      	mov	r3, r1
 80079d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079e0:	7af9      	ldrb	r1, [r7, #11]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	f7fb fb05 	bl	8002ff4 <HAL_PCD_EP_Transmit>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f841 	bl	8007a78 <USBD_Get_USB_Status>
 80079f6:	4603      	mov	r3, r0
 80079f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	607a      	str	r2, [r7, #4]
 8007a0e:	603b      	str	r3, [r7, #0]
 8007a10:	460b      	mov	r3, r1
 8007a12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a22:	7af9      	ldrb	r1, [r7, #11]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	f7fb fa99 	bl	8002f5e <HAL_PCD_EP_Receive>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 f820 	bl	8007a78 <USBD_Get_USB_Status>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007a50:	4b03      	ldr	r3, [pc, #12]	; (8007a60 <USBD_static_malloc+0x18>)
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	20000178 	.word	0x20000178

08007a64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]

}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d817      	bhi.n	8007abc <USBD_Get_USB_Status+0x44>
 8007a8c:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <USBD_Get_USB_Status+0x1c>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007aab 	.word	0x08007aab
 8007a9c:	08007ab1 	.word	0x08007ab1
 8007aa0:	08007ab7 	.word	0x08007ab7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa8:	e00b      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	73fb      	strb	r3, [r7, #15]
    break;
 8007aae:	e008      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab4:	e005      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aba:	e002      	b.n	8007ac2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac0:	bf00      	nop
  }
  return usb_status;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <__libc_init_array>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	4d0d      	ldr	r5, [pc, #52]	; (8007b08 <__libc_init_array+0x38>)
 8007ad4:	4c0d      	ldr	r4, [pc, #52]	; (8007b0c <__libc_init_array+0x3c>)
 8007ad6:	1b64      	subs	r4, r4, r5
 8007ad8:	10a4      	asrs	r4, r4, #2
 8007ada:	2600      	movs	r6, #0
 8007adc:	42a6      	cmp	r6, r4
 8007ade:	d109      	bne.n	8007af4 <__libc_init_array+0x24>
 8007ae0:	4d0b      	ldr	r5, [pc, #44]	; (8007b10 <__libc_init_array+0x40>)
 8007ae2:	4c0c      	ldr	r4, [pc, #48]	; (8007b14 <__libc_init_array+0x44>)
 8007ae4:	f000 f820 	bl	8007b28 <_init>
 8007ae8:	1b64      	subs	r4, r4, r5
 8007aea:	10a4      	asrs	r4, r4, #2
 8007aec:	2600      	movs	r6, #0
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	d105      	bne.n	8007afe <__libc_init_array+0x2e>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af8:	4798      	blx	r3
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7ee      	b.n	8007adc <__libc_init_array+0xc>
 8007afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b02:	4798      	blx	r3
 8007b04:	3601      	adds	r6, #1
 8007b06:	e7f2      	b.n	8007aee <__libc_init_array+0x1e>
 8007b08:	08007ba8 	.word	0x08007ba8
 8007b0c:	08007ba8 	.word	0x08007ba8
 8007b10:	08007ba8 	.word	0x08007ba8
 8007b14:	08007bac 	.word	0x08007bac

08007b18 <memset>:
 8007b18:	4402      	add	r2, r0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d100      	bne.n	8007b22 <memset+0xa>
 8007b20:	4770      	bx	lr
 8007b22:	f803 1b01 	strb.w	r1, [r3], #1
 8007b26:	e7f9      	b.n	8007b1c <memset+0x4>

08007b28 <_init>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	bf00      	nop
 8007b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2e:	bc08      	pop	{r3}
 8007b30:	469e      	mov	lr, r3
 8007b32:	4770      	bx	lr

08007b34 <_fini>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr
